/*
 * Module code.
 *
 * Generated by SIP 4.19.7
 */

#include "sipAPI_analysis.h"

#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 12 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 25 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraphbuilderinterface.sip"
#include "qgsgraphbuilderinterface.h"
#line 15 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 30 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsnetworkstrategy.sip"
#include "qgsnetworkstrategy.h"
#line 18 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 22 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/qgszonalstatistics.sip"
#include "qgszonalstatistics.h"
#line 21 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 24 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 30 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 200 "core/auto_generated/qgsfeatureiterator.sip"
#include "qgsfeatureiterator.h"
#line 36 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 21 "core/auto_generated/qgsfeaturesink.sip"
#include "qgsfeaturesink.h"
#line 39 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 28 "core/auto_generated/qgsfeature.sip"
#include "qgsfeature.h"
#if (SIP_VERSION >= 0x040900 && SIP_VERSION < 0x040c01)
#define sipType_QVariant ((sipWrapperType *) sipTypeAsPyTypeObject (sipType_QVariant))
#endif
#line 48 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 35 "core/auto_generated/qgsfeedback.sip"
#include "qgsfeedback.h"
#line 51 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 28 "core/auto_generated/qgspointxy.sip"
#include "qgspointxy.h"
#line 54 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 57 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 261 "core/conversions.sip"
#include <QSet>
#line 63 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 66 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 69 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "core/auto_generated/geometry/qgsrectangle.sip"
#include "qgsrectangle.h"
#line 72 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckerror.sip"
#include "qgsgeometrycheckerror.h"
#line 75 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qicon.sip"
#include <qicon.h>
#line 78 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 28 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgssinglegeometrycheck.sip"
#include "qgssinglegeometrycheck.h"
#line 81 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 305 "core/auto_generated/qgsvectorlayer.sip"
#include "qgsvectorlayer.h"
#line 84 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 1726 "core/conversions.sip"
#include <qgswkbtypes.h>
#line 87 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 24 "core/auto_generated/geometry/qgswkbtypes.sip"
#include "qgswkbtypes.h"
#line 90 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 93 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 773 "core/conversions.sip"
#include <QMap>
#line 96 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsfeaturepool.sip"
#include "qgsfeaturepool.h"
#line 99 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 102 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 36 "/usr/share/sip/PyQt5/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 105 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 108 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 111 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 114 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 45 "core/auto_generated/geometry/qgsgeometry.sip"
#include "qgsgeometry.h"
#line 117 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 120 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 2391 "core/auto_generated/processing/qgsprocessingparameters.sip"
#include "qgsprocessingparameters.h"
#line 123 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "core/auto_generated/processing/qgsprocessingcontext.sip"
#include "qgsprocessingcontext.h"
#line 126 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsalignraster.sip"
#include "qgsalignraster.h"
#include <gdal_version.h>
#line 130 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 20 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsexiftools.sip"
#include "qgsexiftools.h"
#line 133 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 20 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsexiftools.sip"
#include "qgsexiftools.h"
#line 46 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsexiftools.sip"
#include "qgsexiftools.h"
#line 138 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 23 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgskde.sip"
#include "qgskde.h"
#line 141 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 22 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsrastercalculator.sip"
#include "qgsrastercalculator.h"
#line 144 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 16 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsrastermatrix.sip"
#include "qgsrastermatrix.h"
#line 147 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 35 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/qgsgeometrysnappersinglesource.sip"
#include "qgsgeometrysnappersinglesource.h"
#line 150 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 22 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/qgszonalstatistics.sip"
#include "qgszonalstatistics.h"
#line 153 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckerutils.sip"
#include "qgsgeometrycheckerutils.h"
#line 156 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 41 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/interpolation/qgsinterpolator.sip"
#include "qgsinterpolator.h"
#line 159 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 23 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraph.sip"
#include "qgsgraph.h"
#line 162 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 72 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraph.sip"
#include "qgsgraph.h"
#line 165 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 118 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraph.sip"
#include "qgsgraph.h"
#line 168 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 21 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsnetworkdistancestrategy.sip"
#include "qgsnetworkdistancestrategy.h"
#line 171 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 22 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraphanalyzer.sip"
#include "qgsgraphanalyzer.h"
#line 174 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 30 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckregistry.sip"
#include "qgsgeometrycheckregistry.h"
#line 177 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 180 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

/* Define the strings used by this module. */
const char sipStrings__analysis[] = {
    'Q', 'g', 's', 'K', 'e', 'r', 'n', 'e', 'l', 'D', 'e', 'n', 's', 'i', 't', 'y', 'E', 's', 't', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'O', 'u', 't', 'p', 'u', 't', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'Q', 'g', 's', 'K', 'e', 'r', 'n', 'e', 'l', 'D', 'e', 'n', 's', 'i', 't', 'y', 'E', 's', 't', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'K', 'e', 'r', 'n', 'e', 'l', 'S', 'h', 'a', 'p', 'e', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'e', 'r', 'U', 't', 'i', 'l', 's', ':', ':', 'L', 'a', 'y', 'e', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'Q', 'g', 's', 'K', 'e', 'r', 'n', 'e', 'l', 'D', 'e', 'n', 's', 'i', 't', 'y', 'E', 's', 't', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'e', 'r', 'U', 't', 'i', 'l', 's', ':', ':', 'L', 'a', 'y', 'e', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'g', 's', 'T', 'i', 'n', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', ':', ':', 'T', 'i', 'n', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'i', 'o', 'n', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'O', 'u', 't', 'p', 'u', 't', 'R', 'a', 's', 't', 'e', 'r', 'L', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'O', 'u', 't', 'p', 'u', 't', 'V', 'e', 'c', 't', 'o', 'r', 'L', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'S', 'i', 'n', 'g', 'l', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', '*', '>', 0,
    'Q', 'g', 's', 'K', 'e', 'r', 'n', 'e', 'l', 'D', 'e', 'n', 's', 'i', 't', 'y', 'E', 's', 't', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'R', 'e', 's', 'u', 'l', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', ':', ':', 'L', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', 'E', 'n', 't', 'r', 'y', '>', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'L', 'a', 'y', 'e', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 'I', 'd', 's', 0,
    'Q', 'g', 's', 'V', 'e', 'c', 't', 'o', 'r', 'L', 'a', 'y', 'e', 'r', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', ':', ':', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', ':', ':', 'V', 'a', 'l', 'u', 'e', 'T', 'y', 'p', 'e', 0,
    'e', 'x', 'p', 'o', 'r', 't', 'F', 'r', 'e', 'q', 'u', 'e', 'n', 'c', 'y', 'D', 'i', 's', 't', 'r', 'i', 'b', 'u', 't', 'i', 'o', 'n', 'T', 'o', 'C', 's', 'v', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'F', 'a', 'c', 't', 'o', 'r', 'y', '*', '>', 0,
    'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'M', 'a', 't', 'r', 'i', 'x', ':', ':', 'O', 'n', 'e', 'A', 'r', 'g', 'O', 'p', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'M', 'a', 't', 'r', 'i', 'x', ':', ':', 'T', 'w', 'o', 'A', 'r', 'g', 'O', 'p', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'c', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'e', 'O', 'p', 't', 'i', 'm', 'i', 'z', 'e', 'd', 'R', 'e', 'l', 'i', 'e', 'f', 'C', 'l', 'a', 's', 's', 'e', 's', 0,
    'Q', 'g', 's', 'A', 'l', 'i', 'g', 'n', 'R', 'a', 's', 't', 'e', 'r', ':', ':', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'g', 's', 'Z', 'o', 'n', 'a', 'l', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', ':', ':', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'S', 'n', 'a', 'p', 'p', 'e', 'r', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'O', 'u', 't', 'p', 'u', 't', 'T', 'a', 'b', 'l', 'e', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', '*', '>', 0,
    'Q', 'M', 'a', 'p', '<', 'Q', 'S', 't', 'r', 'i', 'n', 'g', ',', 'Q', 'g', 's', 'F', 'e', 'a', 't', 'u', 'r', 'e', 'P', 'o', 'o', 'l', '*', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'R', 'e', 'l', 'i', 'e', 'f', ':', ':', 'R', 'e', 'l', 'i', 'e', 'f', 'C', 'o', 'l', 'o', 'r', '>', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'g', 's', 'Z', 'o', 'n', 'a', 'l', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', ':', ':', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'C', 'h', 'a', 'n', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'C', 'h', 'a', 'n', 'g', 'e', 'W', 'h', 'a', 't', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', ':', ':', 'V', 'a', 'l', 'u', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'C', 'l', 'o', 's', 'e', 's', 't', 'N', 'o', 'E', 'x', 't', 'r', 'a', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'S', 'n', 'a', 'p', 'p', 'e', 'r', ':', ':', 'S', 'n', 'a', 'p', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'A', 'l', 'i', 'g', 'n', 'R', 'a', 's', 't', 'e', 'r', ':', ':', 'I', 't', 'e', 'm', '>', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'C', 'h', 'e', 'c', 'k', 'T', 'y', 'p', 'e', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', 'S', 'i', 'n', 'g', 'l', 'e', 0,
    'Q', 'g', 's', 'S', 'i', 'n', 'g', 'l', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', ':', ':', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'N', 'o', 'd', 'e', ':', ':', 'O', 'p', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', ':', ':', 'R', 'e', 's', 'u', 'l', 't', 0,
    'Q', 'g', 's', 'E', 'x', 'i', 'f', 'T', 'o', 'o', 'l', 's', ':', ':', 'G', 'e', 'o', 'T', 'a', 'g', 'D', 'e', 't', 'a', 'i', 'l', 's', 0,
    'Q', 'g', 's', 'A', 'l', 'i', 'g', 'n', 'R', 'a', 's', 't', 'e', 'r', ':', ':', 'R', 'e', 's', 'a', 'm', 'p', 'l', 'e', 'A', 'l', 'g', 0,
    'Q', 'g', 's', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', ':', ':', 'L', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'S', 'n', 'a', 'p', 'p', 'e', 'r', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'N', 'o', 'd', 'e', 's', 'N', 'o', 'E', 'x', 't', 'r', 'a', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 0,
    'Q', 'g', 's', 'K', 'e', 'r', 'n', 'e', 'l', 'D', 'e', 'n', 's', 'i', 't', 'y', 'E', 's', 't', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'g', 's', 'A', 'l', 'i', 'g', 'n', 'R', 'a', 's', 't', 'e', 'r', ':', ':', 'R', 'a', 's', 't', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'R', 'a', 's', 't', 'e', 'r', 'F', 'i', 'l', 'e', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'e', 'c', 't', 'o', 'r', 'F', 'i', 'l', 'e', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 's', 'N', 'o', 'n', 'F', 'i', 'l', 'e', 'B', 'a', 's', 'e', 'd', 'O', 'u', 't', 'p', 'u', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'N', 'o', 'd', 'e', '*', '>', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', 'V', 'e', 'r', 't', 'e', 'x', 'D', 'a', 't', 'a', 0,
    'Q', 'g', 's', 'M', 'e', 's', 'h', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', ':', ':', 'R', 'e', 's', 'u', 'l', 't', 0,
    'h', 'a', 's', 'D', 'a', 't', 'a', 'D', 'e', 'f', 'i', 'n', 'e', 'd', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'F', 'a', 'c', 't', 'o', 'r', 'y', 'T', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'R', 'e', 'g', 'i', 's', 't', 'r', 'y', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 'B', 'u', 'i', 'l', 'd', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', 'E', 'n', 't', 'r', 'y', 0,
    'c', 'o', 'm', 'p', 'a', 't', 'i', 'b', 'l', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'T', 'y', 'p', 'e', 's', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 'g', 's', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'S', 'p', 'e', 'e', 'd', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', ':', ':', 'R', 'e', 's', 'u', 'l', 't', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'e', 'r', 'U', 't', 'i', 'l', 's', 0,
    'Q', 'g', 's', 'T', 'o', 't', 'a', 'l', 'C', 'u', 'r', 'v', 'a', 't', 'u', 'r', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'N', 'o', 'd', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'u', 'g', 'g', 'e', 's', 't', 'e', 'd', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 'L', 'a', 'y', 'e', 'r', 0,
    's', 'e', 't', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 'F', 'r', 'o', 'm', 'R', 'a', 's', 't', 'e', 'r', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'V', 'e', 'r', 't', 'e', 'x', 'M', 'a', 'r', 'k', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'V', 'e', 'r', 't', 'e', 'x', 'M', 'a', 'r', 'k', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', ':', ':', 'F', 'l', 'a', 'g', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'F', 'a', 'c', 't', 'o', 'r', 'i', 'e', 's', 0,
    'Q', 'g', 's', 'S', 'i', 'n', 'g', 'l', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 0,
    'Q', 'g', 's', 'V', 'e', 'c', 't', 'o', 'r', 'L', 'a', 'y', 'e', 'r', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 0,
    's', 'e', 't', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'C', 'o', 'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 0,
    'i', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'i', 'o', 'n', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'Q', 'g', 's', 'R', 'e', 'l', 'i', 'e', 'f', ':', ':', 'R', 'e', 'l', 'i', 'e', 'f', 'C', 'o', 'l', 'o', 'r', 0,
    'i', 's', 'S', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'O', 'u', 't', 'p', 'u', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'o', 'r', 'r', 'e', 'c', 't', 'R', 'i', 'n', 'g', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'h', 'a', 's', 'D', 'a', 't', 'a', 'D', 'e', 'f', 'i', 'n', 'e', 'd', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'I', 'n', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'E', 'r', 'r', 'o', 'r', 0,
    'r', 'e', 'v', 'e', 'r', 's', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'E', 'n', 'd', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 'f', 'e', 'r', 'C', 'l', 'o', 's', 'e', 's', 't', 0,
    'p', 'a', 'r', 's', 'e', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'N', 'i', 'n', 'e', 'C', 'e', 'l', 'l', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'R', 'e', 'g', 'i', 's', 't', 'r', 'y', 0,
    'd', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'I', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    's', 'k', 'i', 'p', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'C', 'r', 'e', 'a', 't', 'i', 'o', 'n', 0,
    'h', 'o', 'n', 'o', 'u', 'r', 'A', 'x', 'i', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'i', 'n', 'v', 'e', 'r', 't', 'A', 'x', 'i', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'T', 'r', 'i', 'a', 'n', 'g', 'u', 'l', 'a', 't', 'i', 'o', 'n', 'S', 'i', 'n', 'k', 0,
    'F', 'e', 'a', 't', 'u', 'r', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'S', 'o', 'u', 'r', 'c', 'e', 'S', 't', 'r', 'u', 'c', 't', 'u', 'r', 'e', 'L', 'i', 'n', 'e', 's', 0,
    's', 'e', 't', 'O', 'u', 't', 'p', 'u', 't', 'N', 'o', 'd', 'a', 't', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'h', 'e', 'c', 'k', 'I', 'n', 'p', 'u', 't', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    's', 'r', 'c', 'C', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 'I', 'n', 'D', 'e', 's', 't', 'C', 'R', 'S', 0,
    'Q', 'g', 's', 'A', 'l', 'i', 'g', 'n', 'R', 'a', 's', 't', 'e', 'r', ':', ':', 'I', 't', 'e', 'm', 0,
    'r', 'a', 's', 't', 'e', 'r', 'U', 'n', 'i', 't', 's', 'P', 'e', 'r', 'P', 'i', 'x', 'e', 'l', 'Y', 0,
    'r', 'a', 's', 't', 'e', 'r', 'U', 'n', 'i', 't', 's', 'P', 'e', 'r', 'P', 'i', 'x', 'e', 'l', 'X', 0,
    'l', 'o', 'a', 'd', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'y', 'l', 'e', 'F', 'l', 'a', 'g', 0,
    'o', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'Q', 'g', 's', 'N', 'a', 't', 'i', 'v', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 's', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 'f', 'i', 'g', 0,
    't', 'r', 'i', 'a', 'n', 'g', 'u', 'l', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'e', 'l', 'd', 's', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'C', 'o', 'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 0,
    'c', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'e', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', 0,
    'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'i', 'e', 's', 0,
    'E', 'n', 'd', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 'f', 'e', 'r', 'N', 'o', 'd', 'e', 's', 0,
    'Q', 'g', 's', 'R', 'u', 'g', 'g', 'e', 'd', 'n', 'e', 's', 's', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'R', 'e', 'l', 'i', 'e', 'f', 'C', 'o', 'l', 'o', 'r', 'C', 'l', 'a', 's', 's', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'N', 'o', 'd', 'a', 't', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'g', 's', 'D', 'e', 'r', 'i', 'v', 'a', 't', 'i', 'v', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'u', 'g', 'g', 'e', 's', 't', 'e', 'd', 'W', 'a', 'r', 'p', 'O', 'u', 't', 'p', 'u', 't', 0,
    'a', 'l', 'i', 'g', 'n', 'e', 'd', 'R', 'a', 's', 't', 'e', 'r', 'E', 'x', 't', 'e', 'n', 't', 0,
    'R', 'A', '_', 'N', 'e', 'a', 'r', 'e', 's', 't', 'N', 'e', 'i', 'g', 'h', 'b', 'o', 'u', 'r', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'h', 'i', 'l', 'd', 'W', 'k', 'b', 'T', 'y', 'p', 'e', 0,
    'f', 'o', 'u', 'n', 'd', 'M', 'a', 't', 'c', 'h', 'i', 'n', 'g', 'S', 'y', 'm', 'b', 'o', 'l', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'D', 'e', 'f', 'i', 'n', 'i', 't', 'i', 'o', 'n', 0,
    'f', 'i', 'e', 'l', 'd', 'V', 'a', 'l', 'u', 'e', 'C', 'o', 'n', 'v', 'e', 'r', 't', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', '>', 0,
    'b', 'o', 't', 'h', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'r', 'e', 'q', 'u', 'i', 'r', 'e', 'd', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'Q', 'g', 's', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    'Q', 'g', 's', 'T', 'i', 'n', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'I', 'D', 'W', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'Z', 'o', 'n', 'a', 'l', 'S', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', 0,
    'E', 'n', 'd', 'P', 'o', 'i', 'n', 't', 'T', 'o', 'E', 'n', 'd', 'P', 'o', 'i', 'n', 't', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'S', 'n', 'a', 'p', 'p', 'e', 'r', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'r', 'n', 'e', 'l', 'E', 'p', 'a', 'n', 'e', 'c', 'h', 'n', 'i', 'k', 'o', 'v', 0,
    'Q', 'g', 's', 'H', 'i', 'l', 'l', 's', 'h', 'a', 'd', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'M', 'a', 'p', 'U', 'n', 'i', 't', 'S', 'c', 'a', 'l', 'e', 0,
    'h', 'a', 's', 'D', 'a', 't', 'a', 'D', 'e', 'f', 'i', 'n', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 'c', 'y', 0,
    'r', 'a', 's', 't', 'e', 'r', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'E', 'l', 'e', 'm', 0,
    'm', 'a', 'x', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 'T', 'o', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'r', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'B', 'a', 'c', 'k', 'w', 'a', 'r', 'd', 0,
    't', 'o', 'p', 'o', 'l', 'o', 'g', 'y', 'T', 'o', 'l', 'e', 'r', 'a', 'n', 'c', 'e', 0,
    'Q', 'g', 's', 'G', 'r', 'i', 'd', 'F', 'i', 'l', 'e', 'W', 'r', 'i', 't', 'e', 'r', 0,
    's', 'n', 'a', 'p', 'p', 'e', 'd', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'i', 'e', 's', 0,
    'Q', 'g', 's', 'M', 'e', 's', 'h', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'C', 'a', 'l', 'c', 'N', 'o', 'd', 'e', 0,
    'c', 'l', 'e', 'a', 'r', 'R', 'e', 'l', 'i', 'e', 'f', 'C', 'o', 'l', 'o', 'r', 's', 0,
    'C', 'r', 'e', 'a', 't', 'e', 'O', 'u', 't', 'p', 'u', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'o', 'u', 't', 'p', 'u', 't', 'N', 'o', 'd', 'a', 't', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'F', 'i', 'l', 'e', 'C', 'r', 'e', 'a', 't', 'i', 'o', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'Q', 'g', 's', 'N', 'i', 'n', 'e', 'C', 'e', 'l', 'l', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'a', 'l', 'i', 'g', 'n', 'e', 'd', 'R', 'a', 's', 't', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'w', 'i', 'd', 't', 'h', 'M', 'a', 'p', 'U', 'n', 'i', 't', 'S', 'c', 'a', 'l', 'e', 0,
    'i', 'n', 'c', 'l', 'u', 'd', 'e', 'O', 'u', 't', 'O', 'f', 'R', 'a', 'n', 'g', 'e', 0,
    'c', 'o', 'm', 'p', 'a', 't', 'i', 'b', 'l', 'e', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'd', 'a', 't', 'a', 's', 'o', 'u', 'r', 'c', 'e', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'g', 'r', 'i', 'd', 'I', 'n', 'v', 'e', 'r', 's', 'e', 'S', 'i', 'z', 'e', 'X', 'Y', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'T', 'r', 'e', 'e', 'N', 'o', 'd', 'e', 's', 0,
    's', 'e', 't', 'D', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'C', 'r', 's', 0,
    'f', 'i', 'e', 'l', 'd', 'O', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'e', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 'S', 'u', 'b', 'W', 'i', 'n', 'd', 'o', 'w', 's', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'F', 'e', 'a', 't', 'u', 'r', 'e', 'N', 'o', 'd', 'e', 'C', 'h', 'e', 'c', 'k', 0,
    'Q', 'g', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 0,
    'r', 'e', 'd', 'u', 'c', 'e', 'd', 'T', 'o', 'l', 'e', 'r', 'a', 'n', 'c', 'e', 0,
    'a', 'f', 'f', 'e', 'c', 't', 'e', 'd', 'A', 'r', 'e', 'a', 'B', 'B', 'o', 'x', 0,
    'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'P', 'o', 'i', 'n', 't', 's', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'i', 'e', 'l', 'd', 'I', 'd', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 'A', 'n', 'a', 'l', 'y', 'z', 'e', 'r', 0,
    'S', 'o', 'u', 'r', 'c', 'e', 'B', 'r', 'e', 'a', 'k', 'L', 'i', 'n', 'e', 's', 0,
    'e', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', '_', 'v', 'a', 'l', 'i', 'd', 0,
    'i', 'n', 'p', 'u', 't', 'N', 'o', 'd', 'a', 't', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'K', 'e', 'r', 'n', 'e', 'l', 'T', 'r', 'i', 'a', 'n', 'g', 'u', 'l', 'a', 'r', 0,
    'c', 'u', 's', 't', 'o', 'm', 'G', 'r', 'i', 'd', 'O', 'f', 'f', 's', 'e', 't', 0,
    'i', 'n', 'c', 'l', 'u', 'd', 'e', 'E', 'm', 'p', 't', 'y', 'R', 'o', 'w', 's', 0,
    'i', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'e', 'P', 'o', 'i', 'n', 't', 0,
    'd', 'r', 'a', 'w', 'V', 'e', 'r', 't', 'e', 'x', 'M', 'a', 'r', 'k', 'e', 'r', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'A', 'l', 'p', 'h', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'G', 'r', 'e', 'e', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'o', 'u', 't', 'p', 'u', 't', 'D', 'e', 'f', 'i', 'n', 'i', 't', 'i', 'o', 'n', 0,
    't', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 'c', 'y', 'C', 'o', 'd', 'e', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 'O', 'l', 'd', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    's', 't', 'a', 't', 'i', 'c', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'S', 't', 'a', 't', 'u', 's', 'F', 'i', 'x', 'F', 'a', 'i', 'l', 'e', 'd', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 'B', 'u', 'i', 'l', 'd', 'e', 'r', 0,
    'Q', 'g', 's', 'I', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', 0,
    'r', 'a', 's', 't', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'P', 'r', 'e', 'f', 'i', 'x', 0,
    'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'D', 'a', 't', 'a', 's', 'e', 't', 's', 0,
    'Q', 'g', 's', 'R', 'a', 's', 't', 'e', 'r', 'M', 'a', 't', 'r', 'i', 'x', 0,
    's', 'e', 't', 'R', 'e', 'l', 'i', 'e', 'f', 'C', 'o', 'l', 'o', 'r', 's', 0,
    'I', 'n', 'p', 'u', 't', 'L', 'a', 'y', 'e', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'K', 'e', 'r', 'n', 'e', 'l', 'T', 'r', 'i', 'w', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'L', 'i', 'g', 'h', 't', 'A', 'z', 'i', 'm', 'u', 't', 'h', 0,
    'Q', 'g', 's', 'A', 's', 'p', 'e', 'c', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'd', 'r', 'a', 'w', 'H', 'e', 'a', 'd', 'e', 'r', 'L', 'i', 'n', 'e', 's', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 'Q', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'B', 'l', 'u', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'p', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'y', 'm', 'b', 'o', 'l', 'o', 'g', 'y', 'E', 'x', 'p', 'o', 'r', 't', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', '_', 'f', 'o', 'r', 'm', 'a', 't', 0,
    'a', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 'M', 'o', 'd', 'e', 0,
    'S', 't', 'a', 't', 'u', 's', 'O', 'b', 's', 'o', 'l', 'e', 't', 'e', 0,
    's', 't', 'a', 'r', 't', 'V', 'e', 'r', 't', 'e', 'x', 'I', 'd', 'x', 0,
    't', 'o', 'M', 'e', 't', 'r', 'i', 'c', 'F', 'a', 'c', 't', 'o', 'r', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 'V', 'e', 'r', 't', 'e', 'x', 0,
    'V', 'a', 'l', 'u', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'Q', 'g', 's', 'F', 'e', 'a', 't', 'u', 'r', 'e', 'P', 'o', 'o', 'l', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 'S', 'n', 'a', 'p', 'p', 'e', 'd', 0,
    'p', 'a', 'r', 's', 'e', 'r', 'E', 'r', 'r', 'o', 'r', 'M', 's', 'g', 0,
    's', 'e', 't', 'N', 'o', 'd', 'a', 't', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'g', 's', 'S', 'l', 'o', 'p', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'n', 'O', 'u', 't', 'p', 'u', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'c', 'u', 's', 't', 'o', 'm', 'C', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 0,
    'r', 'e', 's', 'a', 'm', 'p', 'l', 'e', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'o', 'u', 't', 'p', 'u', 't', 'F', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'R', 'A', '_', 'C', 'u', 'b', 'i', 'c', 'S', 'p', 'l', 'i', 'n', 'e', 0,
    'Q', 'g', 's', 'A', 'l', 'i', 'g', 'n', 'R', 'a', 's', 't', 'e', 'r', 0,
    'l', 'o', 'a', 'd', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 's', 0,
    'c', 'a', 'n', 'B', 'e', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 'd', 0,
    'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'E', 'l', 'e', 'm', 0,
    'i', 's', 'E', 'x', 't', 'e', 'r', 'i', 'o', 'r', 'R', 'i', 'n', 'g', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'R', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'y', 'm', 'b', 'o', 'l', 'o', 'g', 'y', 'S', 'c', 'a', 'l', 'e', 0,
    'd', 'r', 'a', 'w', 'A', 's', 'O', 'u', 't', 'l', 'i', 'n', 'e', 's', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 'O', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'i', 'm', 'p', 'l', 'i', 'f', 'y', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'd', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'C', 'r', 's', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'q', 'g', 'i', 's', '.', '_', 'a', 'n', 'a', 'l', 'y', 's', 'i', 's', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'C', 'h', 'e', 'c', 'k', 0,
    'c', 'o', 'l', 'l', 'e', 'c', 't', 'E', 'r', 'r', 'o', 'r', 's', 0,
    'e', 'r', 'r', 'o', 'r', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'S', 't', 'a', 't', 'u', 's', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    's', 'n', 'a', 'p', 'p', 'e', 'd', 'P', 'o', 'i', 'n', 't', 's', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'B', 'o', 't', 'h', 0,
    'f', 'r', 'o', 'm', 'V', 'e', 'r', 't', 'e', 'x', 'I', 'd', 'x', 0,
    'o', 'u', 't', 'g', 'o', 'i', 'n', 'g', 'E', 'd', 'g', 'e', 's', 0,
    'i', 'n', 'c', 'o', 'm', 'i', 'n', 'g', 'E', 'd', 'g', 'e', 's', 0,
    's', 't', 'r', 'a', 't', 'e', 'g', 'y', 'I', 'n', 'd', 'e', 'x', 0,
    'i', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'a', 'c', 'h', 'e', 'B', 'a', 's', 'e', 'D', 'a', 't', 'a', 0,
    'E', 'v', 'a', 'l', 'u', 'a', 't', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'f', 'o', 'r', 'm', 'u', 'l', 'a', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'r', 'a', 's', 't', 'e', 'r', 'E', 'n', 't', 'r', 'i', 'e', 's', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'R', 'a', 's', 't', 'e', 'r', 0,
    'R', 'a', 's', 't', 'e', 'r', 'I', 'o', 'E', 'r', 'r', 'o', 'r', 0,
    'K', 'e', 'r', 'n', 'e', 'l', 'U', 'n', 'i', 'f', 'o', 'r', 'm', 0,
    'K', 'e', 'r', 'n', 'e', 'l', 'Q', 'u', 'a', 'r', 't', 'i', 'c', 0,
    's', 'e', 't', 'L', 'i', 'g', 'h', 't', 'A', 'n', 'g', 'l', 'e', 0,
    'c', 'a', 'l', 'c', 'F', 'i', 'r', 's', 't', 'D', 'e', 'r', 'Y', 0,
    'c', 'a', 'l', 'c', 'F', 'i', 'r', 's', 't', 'D', 'e', 'r', 'X', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'A', 'n', 'd', 'W', 'a', 'r', 'p', 0,
    's', 'e', 't', 'C', 'l', 'i', 'p', 'E', 'x', 't', 'e', 'n', 't', 0,
    's', 'e', 't', 'G', 'r', 'i', 'd', 'O', 'f', 'f', 's', 'e', 't', 0,
    'r', 'e', 's', 'c', 'a', 'l', 'e', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'i', 'n', 'p', 'u', 't', 'F', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'i', 'n', 'c', 'l', 'u', 'd', 'e', 'H', 'e', 'a', 'd', 'e', 'r', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    's', 'n', 'a', 'p', 'T', 'o', 'l', 'e', 'r', 'a', 'n', 'c', 'e', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'd', 'a', 't', 'a', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 's', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'k', 'e', 'y', 'S', 't', 'a', 'r', 't', 's', 'W', 'i', 't', 'h', 0,
    'm', 'a', 'p', 'T', 'o', 'P', 'i', 'x', 'e', 'l', 'T', 'o', 'l', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'd', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    't', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'T', 'i', 'm', 'e', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'M', 'o', 'd', 'e', 0,
    'c', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'o', 'u', 'r', 'c', 'e', '_', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'F', 'e', 'a', 't', 'u', 'r', 'e', 'C', 'h', 'e', 'c', 'k', 0,
    'i', 's', 'C', 'o', 'm', 'p', 'a', 't', 'i', 'b', 'l', 'e', 0,
    'c', 'h', 'e', 'c', 'k', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 'P', 'o', 'o', 'l', 's', 0,
    's', 'e', 't', 'F', 'i', 'x', 'F', 'a', 'i', 'l', 'e', 'd', 0,
    'l', 'a', 'y', 'e', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    's', 'h', 'o', 'r', 't', 'e', 's', 't', 'T', 'r', 'e', 'e', 0,
    'c', 'r', 'i', 't', 'e', 'r', 'i', 'o', 'n', 'N', 'u', 'm', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 'E', 'd', 'g', 'e', 0,
    'C', 'l', 'o', 'u', 'g', 'h', 'T', 'o', 'c', 'h', 'e', 'r', 0,
    'i', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'o', 'r', 0,
    'S', 'o', 'u', 'r', 'c', 'e', 'P', 'o', 'i', 'n', 't', 's', 0,
    'r', 'e', 'f', 'r', 'e', 's', 'h', 'C', 'a', 'c', 'h', 'e', 0,
    'p', 'o', 'l', 'y', 'g', 'o', 'n', 'L', 'a', 'y', 'e', 'r', 0,
    's', 'n', 'a', 'p', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    's', 'n', 'a', 'p', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'g', 'r', 'e', 'a', 't', 'e', 'r', 'E', 'q', 'u', 'a', 'l', 0,
    'r', 'e', 'l', 'i', 'e', 'f', 'C', 'o', 'l', 'o', 'r', 's', 0,
    'm', 'a', 'x', 'E', 'l', 'e', 'v', 'a', 't', 'i', 'o', 'n', 0,
    'm', 'i', 'n', 'E', 'l', 'e', 'v', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 'Y', 0,
    's', 'e', 't', 'C', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 'X', 0,
    'o', 'u', 't', 'p', 'u', 't', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'O', 'u', 't', 'p', 'u', 't', 'S', 'c', 'a', 'l', 'e', 'd', 0,
    'Q', 'g', 's', 'E', 'x', 'i', 'f', 'T', 'o', 'o', 'l', 's', 0,
    'c', 'u', 's', 't', 'o', 'm', 'C', 'R', 'S', 'W', 'k', 't', 0,
    'i', 'g', 'n', 'o', 'r', 'e', 'L', 'o', 'c', 'k', 'e', 'd', 0,
    'b', 'a', 's', 'e', 'G', 'e', 'o', 'm', 'T', 'y', 'p', 'e', 0,
    'a', 'd', 'd', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'o', 'u', 't', 'g', 'o', 'i', 'n', 'g', 'D', 'a', 't', 'a', 0,
    'l', 'a', 'y', 'e', 'r', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'd', 'a', 't', 'a', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'a', 'u', 't', 'h', 'C', 'o', 'n', 'f', 'i', 'g', 'I', 'd', 0,
    'c', 'l', 'i', 'p', 'T', 'o', 'E', 'x', 't', 'e', 'n', 't', 0,
    'd', 'e', 's', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    's', 'c', 'a', 'l', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'l', 'i', 'g', 'h', 't', 'A', 'z', 'i', 'm', 'u', 't', 'h', 0,
    'o', 'u', 't', 'p', 'u', 't', 'E', 'x', 't', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'W', 'k', 'b', 'T', 'y', 'p', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'O', 'u', 't', 'p', 'u', 't', 0,
    'b', 'a', 's', 'e', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'V', 'e', 'r', 't', 'e', 'x', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'E', 'x', 't', 'e', 'n', 't', 0,
    'o', 'n', 'l', 'y', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'f', 'i', 'l', 'e', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'l', 'a', 'y', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'N', 'a', 'm', 'e', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'N', 'o', 'd', 'e', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 'E', 'l', 'e', 'm', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'A', 'r', 'e', 'a', 0,
    'e', 'r', 'r', 'o', 'r', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'o', 'u', 't', 'p', 'u', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    't', 'a', 'r', 'g', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    'm', 'i', 'd', 'L', 'i', 'n', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'A', 'd', 'd', 'e', 'd', 0,
    'a', 'd', 'd', 'S', 't', 'r', 'a', 't', 'e', 'g', 'y', 0,
    's', 'i', 'n', 'g', 'l', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'V', 'a', 'l', 'u', 'e', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'S', 't', 'a', 't', 'u', 's', 'F', 'i', 'x', 'e', 'd', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'I', 'd', 0,
    'e', 'l', 'l', 'i', 'p', 's', 'o', 'i', 'd', 'I', 'D', 0,
    't', 'o', 'V', 'e', 'r', 't', 'e', 'x', 'I', 'd', 'x', 0,
    'c', 'o', 'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 0,
    'v', 'a', 'l', 'u', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'n', 'a', 'p', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'l', 'e', 's', 's', 'e', 'r', 'E', 'q', 'u', 'a', 'l', 0,
    'g', 'r', 'e', 'a', 't', 'e', 'r', 'T', 'h', 'a', 'n', 0,
    'n', 'o', 'd', 'a', 't', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'n', 'O', 'u', 't', 'p', 'u', 't', 'R', 'o', 'w', 's', 0,
    'w', 'e', 'i', 'g', 'h', 't', 'F', 'i', 'e', 'l', 'd', 0,
    'r', 'a', 'd', 'i', 'u', 's', 'F', 'i', 'e', 'l', 'd', 0,
    'D', 'r', 'i', 'v', 'e', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'g', 'e', 'o', 'T', 'a', 'g', 'I', 'm', 'a', 'g', 'e', 0,
    's', 'e', 't', 'C', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 0,
    'R', 'A', '_', 'B', 'i', 'l', 'i', 'n', 'e', 'a', 'r', 0,
    'Q', 'g', 's', 'A', 'n', 'a', 'l', 'y', 's', 'i', 's', 0,
    'f', 'r', 'a', 'm', 'e', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'G', 'r', 'o', 'u', 'p', 0,
    'i', 't', 'e', 'm', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'v', 'e', 'r', 's', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 0,
    'e', 'n', 'd', 'C', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'C', 'o', 'u', 'n', 't', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'B', 'o', 'x', 0,
    'l', 'a', 'b', 'e', 'l', 'S', 'h', 'i', 'f', 't', 's', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'A', 'l', 'p', 'h', 'a', 0,
    'i', 'n', 'p', 'u', 't', 'F', 'i', 'e', 'l', 'd', 's', 0,
    's', 'v', 'g', 'I', 'c', 'o', 'n', 'P', 'a', 't', 'h', 0,
    't', 'a', 'r', 'g', 'e', 't', 'U', 'n', 'i', 't', 's', 0,
    'M', 'e', 'm', 'o', 'r', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'a', 'v', 'e', 'P', 'o', 'i', 'n', 't', 'I', 'd', 0,
    'a', 't', 'F', 'e', 'a', 't', 'u', 'r', 'e', 'I', 'd', 0,
    'n', 'e', 'w', 'F', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', 's', 0,
    'm', 'a', 'x', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'r', 'a', 's', 't', 'e', 'r', 'L', 'a', 'y', 'e', 'r', 0,
    'g', 'r', 'i', 'd', 'O', 'r', 'i', 'g', 'i', 'n', 'Y', 0,
    'g', 'r', 'i', 'd', 'O', 'r', 'i', 'g', 'i', 'n', 'X', 0,
    'f', 'l', 'u', 's', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'a', 'd', 'd', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'm', 'a', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 0,
    'f', 'o', 'r', 'm', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'P', 'a', 'r', 's', 'e', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'O', 'b', 's', 'o', 'l', 'e', 't', 'e', 0,
    'c', 'e', 'n', 't', 'e', 'r', 'P', 'o', 'i', 'n', 't', 0,
    'e', 'r', 'r', 'o', 'r', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'm', 'a', 't', 'c', 'h', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    's', 'c', 'a', 'l', 'e', 'F', 'a', 'c', 't', 'o', 'r', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'd', 'e', 's', 't', 'i', 'n', 'a', 't', 'i', 'o', 'n', 0,
    'o', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'L', 'a', 'y', 'e', 'r', 'C', 'h', 'e', 'c', 'k', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'N', 'o', 'd', 'e', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'R', 'i', 'n', 'g', 0,
    'C', 'h', 'a', 'n', 'g', 'e', 'P', 'a', 'r', 't', 0,
    'c', 'l', 'o', 's', 'e', 'M', 'a', 't', 'c', 'h', 0,
    'V', 'a', 'l', 'u', 'e', 'O', 't', 'h', 'e', 'r', 0,
    'r', 'e', 's', 'u', 'l', 't', 'C', 'o', 's', 't', 0,
    'r', 'e', 's', 'u', 'l', 't', 'T', 'r', 'e', 'e', 0,
    'o', 't', 'f', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'c', 't', 'f', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'f', 'i', 'n', 'd', 'V', 'e', 'r', 't', 'e', 'x', 0,
    'f', 'r', 'o', 'm', 'V', 'e', 'r', 't', 'e', 'x', 0,
    's', 't', 'r', 'a', 't', 'e', 'g', 'i', 'e', 's', 0,
    'o', 'u', 't', 'p', 'u', 't', 'P', 'a', 't', 'h', 0,
    'r', 'a', 's', 't', 'e', 'r', 'B', 'a', 'n', 'd', 0,
    'o', 'u', 't', 'p', 'u', 't', 'M', 'a', 's', 'k', 0,
    'r', 'a', 's', 't', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    't', 'R', 'a', 's', 't', 'e', 'r', 'R', 'e', 'f', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'S', 'i', 'g', 'n', 0,
    's', 'q', 'u', 'a', 'r', 'e', 'R', 'o', 'o', 't', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'A', 'n', 'd', 0,
    'l', 'e', 's', 's', 'e', 'r', 'T', 'h', 'a', 'n', 0,
    'd', 'e', 'c', 'a', 'y', 'R', 'a', 't', 'i', 'o', 0,
    'l', 'i', 'g', 'h', 't', 'A', 'n', 'g', 'l', 'e', 0,
    'o', 'u', 't', 'p', 'u', 't', 'F', 'i', 'l', 'e', 0,
    'r', 'a', 's', 't', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    's', 'e', 't', 'R', 'a', 's', 't', 'e', 'r', 's', 0,
    'R', 'A', '_', 'A', 'v', 'e', 'r', 'a', 'g', 'e', 0,
    'R', 'A', '_', 'L', 'a', 'n', 'c', 'z', 'o', 's', 0,
    'g', 'r', 'i', 'd', 'O', 'f', 'f', 's', 'e', 't', 0,
    'r', 'a', 's', 't', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'l', 'e', 'g', 'e', 'n', 'd', 'N', 'o', 'd', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 'P', 'o', 'i', 'n', 't', 0,
    'f', 'r', 'a', 'm', 'e', 'I', 'n', 'd', 'e', 'x', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'I', 't', 'e', 'm', 0,
    't', 'a', 'r', 'g', 'e', 't', 'S', 'i', 'z', 'e', 0,
    's', 'a', 'm', 'p', 'l', 'e', 'S', 'i', 'z', 'e', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 'I', 'd', 's', 0,
    'r', 'e', 's', 'u', 'l', 't', 'F', 'l', 'a', 'g', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'i', 'e', 's', 0,
    'm', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'z', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'U', 'n', 'i', 't', 0,
    's', 'e', 't', 'Z', 'F', 'a', 'c', 't', 'o', 'r', 0,
    'b', 'a', 'n', 'd', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'a', 'l', 'p', 'h', 'a', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'r', 'e', 'e', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'e', 'x', 'p', 'a', 'n', 's', 'i', 'o', 'n', 's', 0,
    'f', 'o', 'r', 'c', 'e', 'M', 'u', 'l', 't', 'i', 0,
    'g', 'e', 't', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'c', 'a', 't', 'e', 'g', 'o', 'r', 'i', 'e', 's', 0,
    'd', 'e', 'f', 'i', 'n', 'i', 't', 'i', 'o', 'n', 0,
    'd', 'a', 't', 'a', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'I', 'd', 0,
    'g', 'm', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'd', 'e', 'b', 'u', 'g', 'l', 'e', 'v', 'e', 'l', 0,
    'v', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'h', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'a', 'd', 'd', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'n', 'u', 'l', 'l', 's', 'f', 'i', 'r', 's', 't', 0,
    's', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', 0,
    'c', 'l', 'i', 'p', 'E', 'x', 't', 'e', 'n', 't', 0,
    'l', 'a', 'y', 'e', 'r', '_', 'n', 'o', 'd', 'e', 0,
    'e', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'd', 'r', 'i', 'v', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    'c', 'o', 'n', 's', 't', 'r', 'a', 'i', 'n', 't', 0,
    'r', 'e', 'p', 'e', 'a', 't', 'T', 'i', 'm', 'e', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'N', 'o', 'd', 'e', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'S', 'p', 'a', 'n', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'f', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'm', 'i', 't', 'e', 'r', 'L', 'i', 'm', 'i', 't', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', 0,
    'g', 'e', 'n', 'M', 'i', 'p', 'M', 'a', 'p', 's', 0,
    's', 'c', 'a', 'l', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'e', 'x', 'a', 'c', 't', 'M', 'a', 't', 'c', 'h', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    'V', 'a', 'l', 'u', 'e', 'A', 'r', 'e', 'a', 0,
    'm', 'a', 'k', 'e', 'G', 'r', 'a', 'p', 'h', 0,
    'e', 'd', 'g', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'D', 'a', 't', 'a', 0,
    'w', 'r', 'i', 't', 'e', 'F', 'i', 'l', 'e', 0,
    'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'u', 's', 'e', 'M', 'a', 'p', 'C', 'r', 's', 0,
    'r', 'a', 's', 't', 'e', 'r', 'C', 'r', 's', 0,
    's', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', 0,
    'f', 'i', 'n', 'd', 'N', 'o', 'd', 'e', 's', 0,
    't', 'O', 'p', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'O', 'r', 0,
    'Q', 'g', 's', 'R', 'e', 'l', 'i', 'e', 'f', 0,
    'B', 'a', 'n', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'c', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 'Y', 0,
    'c', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 'X', 0,
    'O', 'u', 't', 'p', 'u', 't', 'R', 'a', 'w', 0,
    'g', 'e', 't', 'G', 'e', 'o', 'T', 'a', 'g', 0,
    'i', 'n', 'p', 'u', 't', 'F', 'i', 'l', 'e', 0,
    'R', 'A', '_', 'M', 'e', 'd', 'i', 'a', 'n', 0,
    'l', 'a', 'y', 'e', 'r', 'p', 'a', 't', 'h', 0,
    'i', 'n', 'd', 'e', 'x', 'F', 'r', 'o', 'm', 0,
    'n', 'o', 'd', 'e', 'I', 'n', 'd', 'e', 'x', 0,
    'm', 'a', 'p', 'C', 'o', 'o', 'r', 'd', 's', 0,
    'v', 'a', 'l', 'u', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 't', 'e', 'm', 'S', 't', 'y', 'l', 'e', 0,
    'b', 'e', 'l', 'o', 'w', 'I', 't', 'e', 'm', 0,
    'e', 'l', 'e', 'v', 'a', 't', 'i', 'o', 'n', 0,
    'h', 'i', 's', 't', 'o', 'g', 'r', 'a', 'm', 0,
    'a', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    'a', 'U', 's', 'e', 'r', 'n', 'a', 'm', 'e', 0,
    'a', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', 0,
    'a', 'd', 'd', 'V', 'e', 'r', 't', 'e', 'x', 0,
    's', 't', 'r', 'i', 'n', 'g', 'M', 'a', 'p', 0,
    'd', 'e', 's', 't', 'L', 'a', 'y', 'e', 'r', 0,
    'w', 'i', 'd', 't', 'h', 'U', 'n', 'i', 't', 0,
    'i', 'm', 'a', 'g', 'e', 'P', 'a', 't', 'h', 0,
    'r', 'a', 'n', 'g', 'e', 'L', 'i', 's', 't', 0,
    'b', 'l', 'u', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'b', 'a', 'n', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'o', 'u', 't', 'p', 'u', 't', 'C', 'r', 's', 0,
    'r', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    's', 'i', 'n', 'k', 'F', 'l', 'a', 'g', 's', 0,
    'l', 'a', 'y', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    't', 'e', 'x', 't', 'L', 'i', 'n', 'e', 's', 0,
    'n', 'e', 'i', 'g', 'h', 'b', 'o', 'r', 's', 0,
    'l', 'a', 'y', 'e', 'r', 'N', 'o', 'd', 'e', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 'I', 'd', 0,
    'r', 'o', 'o', 't', 'G', 'r', 'o', 'u', 'p', 0,
    't', 'o', 'l', 'e', 'r', 'a', 'n', 'c', 'e', 0,
    'a', 't', 't', 'r', 'N', 'a', 'm', 'e', 's', 0,
    'a', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    's', 'c', 'o', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    's', 'e', 'm', 'i', 'M', 'i', 'n', 'o', 'r', 0,
    's', 'e', 'm', 'i', 'M', 'a', 'j', 'o', 'r', 0,
    'n', 'o', 'd', 'e', 'L', 'a', 'y', 'e', 'r', 0,
    'l', 'a', 's', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'c', 'h', 'e', 'c', 'k', 'T', 'y', 'p', 'e', 0,
    'a', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'i', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 'L', 'i', 'n', 'e', 0,
    'b', 'e', 'g', 'i', 'n', 'n', 'i', 'n', 'g', 0,
    'j', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'l', 'i', 'n', 'e', 'W', 'i', 'd', 't', 'h', 0,
    'p', 'i', 'x', 'e', 'l', 'S', 'i', 'z', 'e', 0,
    't', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'c', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'r', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'R', 'o', 'w', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'v', 'e', 'r', 't', 'e', 'x', 'I', 'd', 0,
    's', 'e', 't', 'F', 'i', 'x', 'e', 'd', 0,
    'd', 'i', 'j', 'k', 's', 't', 'r', 'a', 0,
    'Q', 'g', 's', 'G', 'r', 'a', 'p', 'h', 0,
    't', 'o', 'V', 'e', 'r', 't', 'e', 'x', 0,
    's', 'k', 'i', 'p', 'L', 'o', 'c', 'k', 0,
    'V', 'a', 'r', 'i', 'a', 'n', 'c', 'e', 0,
    'a', 't', 'a', 'n', 'g', 'e', 'n', 's', 0,
    'a', 'c', 'o', 's', 'i', 'n', 'u', 's', 0,
    'n', 'o', 't', 'E', 'q', 'u', 'a', 'l', 0,
    's', 'u', 'b', 't', 'r', 'a', 'c', 't', 0,
    'n', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'i', 's', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'f', 'i', 'n', 'a', 'l', 'i', 's', 'e', 0,
    'R', 'A', '_', 'C', 'u', 'b', 'i', 'c', 0,
    'c', 'e', 'l', 'l', 'S', 'i', 'z', 'e', 0,
    's', 'u', 'b', 'g', 'g', 'e', 'o', 'm', 0,
    'i', 'd', 'e', 'n', 't', 'i', 'f', 'y', 0,
    'i', 't', 'e', 'm', 'E', 'l', 'e', 'm', 0,
    'f', 'r', 'o', 'm', 'U', 'n', 'i', 't', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 's', 0,
    'm', 'u', 'l', 't', 'i', 'p', 'l', 'y', 0,
    'a', 'S', 'e', 'r', 'v', 'i', 'c', 'e', 0,
    'u', 's', 'e', 'r', 'n', 'a', 'm', 'e', 0,
    'n', 'e', 'w', 'P', 'o', 'i', 'n', 't', 0,
    'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'g', 'e', 'o', 'm', 'L', 'i', 's', 't', 0,
    's', 'u', 'b', 't', 'y', 'p', 'e', 's', 0,
    'b', 'i', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'r', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'p', 'u', 't', 'C', 'r', 's', 0,
    's', 't', 'a', 't', 'e', 'D', 'o', 'c', 0,
    'a', 't', 'V', 'e', 'r', 't', 'e', 'x', 0,
    'i', 'n', 'c', 'l', 'u', 'd', 'e', 'Z', 0,
    'C', 'a', 'n', 'c', 'e', 'l', 'e', 'd', 0,
    'p', 'o', 'i', 'n', 't', 'M', 'a', 'p', 0,
    'l', 'a', 'y', 'e', 'r', 'I', 'd', 's', 0,
    'e', 'n', 'v', 'e', 'l', 'o', 'p', 'e', 0,
    'f', 'i', 'e', 'l', 'd', 'I', 'd', 'x', 0,
    'f', 'e', 'e', 'd', 'b', 'a', 'c', 'k', 0,
    's', 'e', 't', 't', 'i', 'n', 'g', 's', 0,
    'M', 'a', 'j', 'o', 'r', 'i', 't', 'y', 0,
    'M', 'i', 'n', 'o', 'r', 'i', 't', 'y', 0,
    'r', 'e', 'l', 'a', 't', 'i', 'o', 'n', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'c', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 0,
    's', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'l', 'o', 'n', 'g', 'N', 'a', 'm', 'e', 0,
    'p', 'r', 'o', 't', 'o', 'c', 'o', 'l', 0,
    'e', 'r', 'r', 'o', 'r', 'M', 's', 'g', 0,
    'u', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'e', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'f', 'i', 'r', 's', 't', 'R', 'o', 'w', 0,
    'g', 'e', 'o', 'm', 'e', 't', 'r', 'y', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'f', 'i', 'l', 'l', 'R', 'u', 'l', 'e', 0,
    't', 'a', 'b', 'A', 'r', 'r', 'a', 'y', 0,
    't', 'a', 'b', 'S', 't', 'o', 'p', 's', 0,
    'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    's', 'e', 'g', 'm', 'e', 'n', 't', 's', 0,
    'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    'n', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'i', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    's', 'e', 't', 'R', 'i', 'g', 'h', 't', 0,
    'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'b', 'a', 's', 'e', 'N', 'a', 'm', 'e', 0,
    'f', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'i', 's', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'i', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'b', 'u', 'i', 'l', 'd', 'e', 'r', 0,
    'a', 'd', 'd', 'E', 'd', 'g', 'e', 0,
    'e', 'n', 'd', 'T', 'i', 'm', 'e', 0,
    't', 'M', 'a', 't', 'r', 'i', 'x', 0,
    't', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'o', 'p', 'L', 'O', 'G', '1', '0', 0,
    'o', 'p', 'M', 'I', 'N', 'U', 'S', 0,
    'd', 'e', 's', 't', 'W', 'k', 't', 0,
    'r', 'a', 's', 't', 'e', 'r', 's', 0,
    'R', 'A', '_', 'M', 'o', 'd', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 'T', 'o', 0,
    'l', 'a', 's', 't', 'R', 'o', 'w', 0,
    'm', 's', 'g', 'T', 'y', 'p', 'e', 0,
    's', 's', 'l', 'm', 'o', 'd', 'e', 0,
    's', 'u', 'c', 'c', 'e', 's', 's', 0,
    'c', 'h', 'e', 'c', 'k', 'I', 'd', 0,
    'o', 'f', 'f', 's', 'e', 't', 'Y', 0,
    'o', 'f', 'f', 's', 'e', 't', 'X', 0,
    'z', 'F', 'a', 'c', 't', 'o', 'r', 0,
    'r', 'g', 'b', 'C', 'o', 'd', 'e', 0,
    'd', 'e', 's', 't', 'C', 'R', 'S', 0,
    'V', 'a', 'r', 'i', 'e', 't', 'y', 0,
    'd', 'e', 't', 'a', 'i', 'l', 's', 0,
    's', 'r', 's', 'N', 'a', 'm', 'e', 0,
    'c', 'e', 'n', 't', 'e', 'r', 'Y', 0,
    'c', 'e', 'n', 't', 'e', 'r', 'X', 0,
    'q', 'l', 'r', 'f', 'i', 'l', 'e', 0,
    'l', 'a', 'y', 'e', 'r', 'I', 'd', 0,
    'a', 'z', 'i', 'm', 'u', 't', 'h', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 0,
    'S', 'u', 'c', 'c', 'e', 's', 's', 0,
    'y', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'x', 'M', 'a', 'r', 'g', 'i', 'n', 0,
    'e', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 0,
    'n', 'e', 'w', 'N', 'o', 'd', 'e', 0,
    'p', 'r', 'o', 'j', 'e', 'c', 't', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 0,
    'r', 'o', 'w', 'S', 'p', 'a', 'n', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 0,
    'p', 'r', 'i', 'n', 't', 'e', 'r', 0,
    'p', 'r', 'e', 'p', 'a', 'r', 'e', 0,
    'e', 'x', 'p', 'o', 's', 'e', 'd', 0,
    'i', 's', 'E', 'q', 'u', 'a', 'l', 0,
    'p', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'f', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 's', 0,
    's', 'o', 'u', 'r', 'c', 'e', 's', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 0,
    'q', 'u', 'a', 'l', 'i', 't', 'y', 0,
    'p', 'a', 'i', 'n', 't', 'e', 'r', 0,
    's', 'e', 't', 'L', 'e', 'f', 't', 0,
    'c', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'v', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    'm', 'a', 'p', 'C', 'r', 's', 0,
    'V', 'a', 'l', 'u', 'e', 'M', 0,
    'V', 'a', 'l', 'u', 'e', 'Z', 0,
    't', 'h', 'r', 'e', 's', 'h', 0,
    'c', 'S', 't', 'y', 'l', 'e', 0,
    'o', 'p', 'N', 'O', 'N', 'E', 0,
    'a', 's', 'i', 'n', 'u', 's', 0,
    'd', 'i', 'v', 'i', 'd', 'e', 0,
    'o', 'p', 'S', 'I', 'G', 'N', 0,
    'o', 'p', 'A', 'T', 'A', 'N', 0,
    'o', 'p', 'A', 'C', 'O', 'S', 0,
    'o', 'p', 'A', 'S', 'I', 'N', 0,
    'o', 'p', 'S', 'Q', 'R', 'T', 0,
    'o', 'p', 'P', 'L', 'U', 'S', 0,
    'c', 'r', 's', 'W', 'k', 't', 0,
    'R', 'A', '_', 'M', 'i', 'n', 0,
    'R', 'A', '_', 'M', 'a', 'x', 0,
    'i', 't', 'e', 'm', 'I', 'd', 0,
    'o', 'u', 't', 'p', 'u', 't', 0,
    's', 'r', 'c', 'C', 'R', 'S', 0,
    'h', 'e', 'l', 'p', 'I', 'd', 0,
    't', 'h', 'e', 'U', 'R', 'I', 0,
    't', 'o', 'U', 'n', 'i', 't', 0,
    's', 't', 'o', 'r', 'e', 'd', 0,
    'm', 'S', 'c', 'a', 'l', 'e', 0,
    'v', 'l', 'a', 'y', 'e', 'r', 0,
    'r', 'a', 's', 't', 'e', 'r', 0,
    'b', 'a', 'n', 'd', 'N', 'o', 0,
    'v', 'e', 'r', 't', 'e', 'x', 0,
    'b', 'o', 'u', 'n', 'd', 's', 0,
    'f', 'i', 'e', 'l', 'd', 's', 0,
    'z', 'S', 'c', 'a', 'l', 'e', 0,
    's', 'u', 'n', 'k', 'e', 'n', 0,
    'v', 'e', 'r', 'i', 'f', 'y', 0,
    'c', 'o', 'n', 'f', 'i', 'g', 0,
    'e', 'r', 'r', 'o', 'r', 's', 0,
    'l', 'a', 'y', 'o', 'u', 't', 0,
    'p', 'o', 'i', 'n', 't', 's', 0,
    'o', 'r', 'i', 'g', 'i', 'n', 0,
    'l', 'a', 'y', 'e', 'r', 's', 0,
    's', 't', 'r', 'i', 'd', 'e', 0,
    'e', 'x', 't', 'e', 'n', 't', 0,
    'r', 'e', 'a', 's', 'o', 'n', 0,
    's', 'o', 'u', 'r', 'c', 'e', 0,
    'r', 'a', 'd', 'i', 'u', 's', 0,
    'm', 'a', 't', 'r', 'i', 'x', 0,
    'r', 'e', 'g', 'i', 'o', 'n', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 0,
    'u', 'p', 'd', 'a', 't', 'e', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 0,
    'f', 'a', 'c', 't', 'o', 'r', 0,
    's', 'y', 's', 't', 'e', 'm', 0,
    'u', 'n', 'l', 'o', 'a', 'd', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'o', 'f', 'f', 's', 'e', 't', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    'f', 'i', 'l', 't', 'e', 'r', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    'm', 'e', 't', 'h', 'o', 'd', 0,
    'o', 'p', 't', 'i', 'o', 'n', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 0,
    't', 'a', 'r', 'g', 'e', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'r', 'e', 's', 'u', 'l', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    '_', 'v', 'i', 'd', 'x', 0,
    '_', 'w', 'h', 'a', 't', 0,
    'g', 'r', 'a', 'p', 'h', 0,
    'p', 't', '2', 'i', 'd', 0,
    'p', 't', '1', 'i', 'd', 0,
    'l', 'o', 'g', '1', '0', 0,
    'p', 'o', 'w', 'e', 'r', 0,
    'o', 'p', 'L', 'O', 'G', 0,
    'o', 'p', 'T', 'A', 'N', 0,
    'o', 'p', 'C', 'O', 'S', 0,
    'o', 'p', 'S', 'I', 'N', 0,
    'o', 'p', 'A', 'N', 'D', 0,
    'o', 'p', 'P', 'O', 'W', 0,
    'o', 'p', 'D', 'I', 'V', 0,
    'o', 'p', 'M', 'U', 'L', 0,
    'R', 'A', '_', 'Q', '3', 0,
    'R', 'A', '_', 'Q', '1', 0,
    'n', 'o', 'd', 'e', 'L', 0,
    '_', 't', 'y', 'p', 'e', 0,
    'e', 'q', 'u', 'a', 'l', 0,
    'h', 'o', 'l', 'e', 's', 0,
    'r', 'i', 'n', 'g', 's', 0,
    'n', 'R', 'o', 'w', 's', 0,
    'n', 'C', 'o', 'l', 's', 0,
    'p', 'r', 'o', 'p', 's', 0,
    'n', 'o', 'd', 'e', 's', 0,
    'a', 't', 't', 'r', 's', 0,
    'c', 'h', 'e', 'c', 'k', 0,
    's', 't', 'a', 't', 's', 0,
    'S', 't', 'D', 'e', 'v', 0,
    'f', 'i', 'e', 'l', 'd', 0,
    'r', 'e', 'p', 'l', 'y', 0,
    'r', 'e', 'a', 'l', 'm', 0,
    't', 'i', 't', 'l', 'e', 0,
    'u', 'n', 'i', 't', 's', 0,
    'b', 'r', 'u', 's', 'h', 0,
    'c', 'u', 'r', 'v', 'e', 0,
    's', 'h', 'a', 'p', 'e', 0,
    'c', 'o', 'l', 'o', 'r', 0,
    's', 'c', 'o', 'p', 'e', 0,
    'p', 'o', 'i', 'n', 't', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'i', 'n', 'p', 'u', 't', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'r', 'i', 'g', 'h', 't', 0,
    'o', 'r', 'd', 'e', 'r', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'r', 'o', 'l', 'e', 's', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'o', 't', 'h', 'e', 'r', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    'g', 'r', 'o', 'u', 'p', 0,
    's', 't', 'a', 't', 'e', 0,
    'p', 'o', 'o', 'l', 0,
    'o', 'p', 'O', 'R', 0,
    'o', 'p', 'L', 'E', 0,
    'o', 'p', 'G', 'E', 0,
    'o', 'p', 'L', 'T', 0,
    'o', 'p', 'G', 'T', 0,
    'o', 'p', 'N', 'E', 0,
    'o', 'p', 'E', 'Q', 0,
    'e', 'l', 'm', 't', 0,
    't', 'a', 's', 'k', 0,
    'y', 'M', 'a', 'x', 0,
    'x', 'M', 'a', 'x', 0,
    'y', 'M', 'i', 'n', 0,
    'x', 'M', 'i', 'n', 0,
    'y', 'm', 'a', 'x', 0,
    'x', 'm', 'a', 'x', 0,
    'y', 'm', 'i', 'n', 0,
    'x', 'm', 'i', 'n', 0,
    'p', 'i', 'p', 'e', 0,
    'p', 'a', 's', 's', 0,
    'p', 'a', 'r', 't', 0,
    'c', 'o', 's', 't', 0,
    's', 'i', 'd', 'e', 0,
    's', 'i', 'n', 'k', 0,
    'e', 'l', 'e', 'm', 0,
    'f', 'i', 'd', 's', 0,
    'M', 'e', 'a', 'n', 0,
    'd', 'u', 'm', 'p', 0,
    'p', 'a', 'g', 'e', 0,
    'p', 'r', 'o', 'p', 0,
    'e', 'd', 'g', 'e', 0,
    'c', 'o', 'l', 's', 0,
    'r', 'o', 'w', 's', 0,
    'u', 'n', 'i', 't', 0,
    'i', 'c', 'o', 'n', 0,
    'f', 'o', 'n', 't', 0,
    'i', 't', 'e', 'm', 0,
    'r', 'e', 'c', 't', 0,
    'i', 'n', 'f', 'o', 0,
    'l', 'i', 's', 't', 0,
    'l', 'e', 'f', 't', 0,
    'f', 'i', 'l', 'l', 0,
    's', 'i', 'z', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    's', 'o', 'r', 't', 0,
    'd', 'a', 't', 'a', 0,
    'r', 'o', 'l', 'e', 0,
    'x', '3', '3', 0,
    'x', '2', '3', 0,
    'x', '1', '3', 0,
    'x', '3', '2', 0,
    'x', '2', '2', 0,
    'x', '1', '2', 0,
    'x', '3', '1', 0,
    'x', '2', '1', 0,
    'x', '1', '1', 0,
    'r', 'e', 'q', 0,
    'w', 'k', 't', 0,
    'p', 't', '2', 0,
    'p', 't', '1', 0,
    'e', 'n', 'v', 0,
    'b', 'o', 'x', 0,
    'r', 'e', 'f', 0,
    'p', 't', 's', 0,
    'f', 'i', 'd', 0,
    'c', 'r', 's', 0,
    'S', 'u', 'm', 0,
    'e', 'x', 'p', 0,
    'v', 'a', 'r', 0,
    'd', 'p', 'i', 0,
    'A', 'l', 'l', 0,
    'p', 'e', 'n', 0,
    'l', 'o', 'g', 0,
    'd', 'o', 'c', 0,
    'r', 'u', 'n', 0,
    'a', 'd', 'd', 0,
    'u', 'r', 'l', 0,
    't', 'a', 'g', 0,
    'm', 's', 'g', 0,
    'm', 'a', 'p', 0,
    'k', 'e', 'y', 0,
    's', 't', 'r', 0,
    'l', 'e', 'n', 0,
    'p', 'o', 's', 0,
    'v', 'a', 'l', 0,
    'r', 'o', 'w', 0,
    'm', 'y', 0,
    'm', 'x', 0,
    'n', 'L', 0,
    'v', 'l', 0,
    's', 'w', 0,
    's', 'y', 0,
    's', 'x', 0,
    'p', 't', 0,
    'y', '2', 0,
    'x', '2', 0,
    'y', '1', 0,
    'x', '1', 0,
    'a', '2', 0,
    'a', '1', 0,
    'o', 'k', 0,
    'p', '2', 0,
    'p', '1', 0,
    'z', 0,
    'b', 0,
};

bool sipVH__analysis_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QVariant& a0,const  ::QgsProcessingDestinationParameter*a1, ::QgsProcessingContext& a2, ::QString& a3)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NDD", new  ::QVariant(a0), sipType_QVariant, NULL, const_cast< ::QgsProcessingDestinationParameter *>(a1), sipType_QgsProcessingDestinationParameter, NULL, &a2, sipType_QgsProcessingContext, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bH5)", &sipRes, sipType_QString, &a3);

    return sipRes;
}

 ::QString sipVH__analysis_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool a0)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "b", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

void sipVH__analysis_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

 ::QgsGeometryCheck* sipVH__analysis_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QgsGeometryCheckContext*a0,const  ::QVariantMap& a1)
{
     ::QgsGeometryCheck* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DN", const_cast< ::QgsGeometryCheckContext *>(a0), sipType_QgsGeometryCheckContext, NULL, new  ::QVariantMap(a1), sipType_QMap_0100QString_0100QVariant, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QgsGeometryCheck, &sipRes);

    return sipRes;
}

QList< ::QgsSingleGeometryCheckError*> sipVH__analysis_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QgsGeometry& a0)
{
    QList< ::QgsSingleGeometryCheckError*> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QgsGeometry(a0), sipType_QgsGeometry, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0101QgsSingleGeometryCheckError, &sipRes);

    return sipRes;
}

 ::QgsGeometryCheck::CheckType sipVH__analysis_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QgsGeometryCheck::CheckType sipRes =  ::QgsGeometryCheck::FeatureNodeCheck;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QgsGeometryCheck_CheckType, &sipRes);

    return sipRes;
}

 ::QStringList sipVH__analysis_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QStringList sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QStringList, &sipRes);

    return sipRes;
}

void sipVH__analysis_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QMap< ::QString, ::QgsFeaturePool*>& a0,QList< ::QgsGeometryCheckError*>& a1, ::QStringList& a2, ::QgsFeedback*a3,const  ::QgsGeometryCheck::LayerFeatureIds& a4)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NDDDN", new QMap< ::QString, ::QgsFeaturePool*>(a0), sipType_QMap_0100QString_0101QgsFeaturePool, NULL, &a1, sipType_QList_0101QgsGeometryCheckError, NULL, &a2, sipType_QStringList, NULL, a3, sipType_QgsFeedback, NULL, new  ::QgsGeometryCheck::LayerFeatureIds(a4), sipType_QgsGeometryCheck_LayerFeatureIds, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(H5H5)", sipType_QList_0101QgsGeometryCheckError, &a1, sipType_QStringList, &a2);
}

 ::QgsGeometryCheck::Flags sipVH__analysis_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QgsGeometryCheck::Flags sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QgsGeometryCheck_Flags, &sipRes);

    return sipRes;
}

 ::QList< ::QgsWkbTypes::GeometryType> sipVH__analysis_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QList< ::QgsWkbTypes::GeometryType> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QgsWkbTypes_GeometryType, &sipRes);

    return sipRes;
}

bool sipVH__analysis_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsVectorLayer*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", a0, sipType_QgsVectorLayer, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__analysis_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QgsSingleGeometryCheckError*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", const_cast< ::QgsSingleGeometryCheckError *>(a0), sipType_QgsSingleGeometryCheckError, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__analysis_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QgsSingleGeometryCheckError*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::QgsSingleGeometryCheckError *>(a0), sipType_QgsSingleGeometryCheckError, NULL);
}

 ::QIcon sipVH__analysis_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QIcon sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QIcon, &sipRes);

    return sipRes;
}

void sipVH__analysis_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QgsGeometryCheckError*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::QgsGeometryCheckError *>(a0), sipType_QgsGeometryCheckError, NULL);
}

bool sipVH__analysis_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsGeometryCheckError*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", a0, sipType_QgsGeometryCheckError, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QgsRectangle sipVH__analysis_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QgsRectangle sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QgsRectangle, &sipRes);

    return sipRes;
}

 ::QString sipVH__analysis_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

void sipVH__analysis_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsGraphBuilderInterface*a0,const QVector< ::QgsPointXY>& a1,QVector< ::QgsPointXY>& a2, ::QgsFeedback*a3)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DND", a0, sipType_QgsGraphBuilderInterface, NULL, new QVector< ::QgsPointXY>(a1), sipType_QVector_0100QgsPointXY, NULL, a3, sipType_QgsFeedback, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVector_0100QgsPointXY, &a2);
}

 ::QVariant sipVH__analysis_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, double a0,const  ::QgsFeature& a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "dN", a0, new  ::QgsFeature(a1), sipType_QgsFeature, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

 ::QSet<int> sipVH__analysis_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSet<int> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSet_1800, &sipRes);

    return sipRes;
}

void sipVH__analysis_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,const  ::QgsPointXY& a1,int a2,const  ::QgsPointXY& a3,const QVector< ::QVariant>& a4)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iNiNN", a0, new  ::QgsPointXY(a1), sipType_QgsPointXY, NULL, a2, new  ::QgsPointXY(a3), sipType_QgsPointXY, NULL, new QVector< ::QVariant>(a4), sipType_QVector_0100QVariant, NULL);
}

void sipVH__analysis_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,const  ::QgsPointXY& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iN", a0, new  ::QgsPointXY(a1), sipType_QgsPointXY, NULL);
}

int sipVH__analysis_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, double a0,double a1,double& a2, ::QgsFeedback*a3)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "ddD", a0, a1, a3, sipType_QgsFeedback, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(id)", &sipRes, &a2);

    return sipRes;
}

void sipVH__analysis_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsFeatureId a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "n", a0);
}

void sipVH__analysis_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsFeature& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", &a0, sipType_QgsFeature, NULL);
}

bool sipVH__analysis_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsFeature& a0, ::QgsFeatureSink::Flags a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DN", &a0, sipType_QgsFeature, NULL, new  ::QgsFeatureSink::Flags(a1), sipType_QgsFeatureSink_Flags, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__analysis_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsFeatureList& a0, ::QgsFeatureSink::Flags a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DN", &a0, sipType_QList_0100QgsFeature, NULL, new  ::QgsFeatureSink::Flags(a1), sipType_QgsFeatureSink_Flags, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__analysis_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QgsFeatureIterator& a0, ::QgsFeatureSink::Flags a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DN", &a0, sipType_QgsFeatureIterator, NULL, new  ::QgsFeatureSink::Flags(a1), sipType_QgsFeatureSink_Flags, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__analysis_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__analysis_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", a0, sipType_QEvent, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__analysis_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DD", a0, sipType_QObject, NULL, a1, sipType_QEvent, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH__analysis_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, NULL);
}

void sipVH__analysis_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, NULL);
}

void sipVH__analysis_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, NULL);
}

void sipVH__analysis_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, NULL);
}

float sipVH__analysis_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, float*a0,float*a1,float*a2,float*a3,float*a4,float*a5,float*a6,float*a7,float*a8)
{
    float sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(ffffffffff)", &sipRes, a0, a1, a2, a3, a4, a5, a6, a7, a8);

    return sipRes;
}

bool sipVH__analysis_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, double a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "d", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QgsGraphBuilderInterface(void **);}
static const sipTypeDef *sipSubClass_QgsGraphBuilderInterface(void **sipCppRet)
{
     ::QgsGraphBuilderInterface *sipCpp = reinterpret_cast< ::QgsGraphBuilderInterface *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 28 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraphbuilderinterface.sip"
    if ( dynamic_cast< QgsGraphBuilder * >( sipCpp ) != NULL )
      sipType = sipType_QgsGraphBuilder;
    else
      sipType = NULL;
#line 1489 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QgsNetworkStrategy(void **);}
static const sipTypeDef *sipSubClass_QgsNetworkStrategy(void **sipCppRet)
{
     ::QgsNetworkStrategy *sipCpp = reinterpret_cast< ::QgsNetworkStrategy *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 33 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsnetworkstrategy.sip"
    if ( dynamic_cast< QgsNetworkDistanceStrategy * >( sipCpp ) != NULL )
      sipType = sipType_QgsNetworkDistanceStrategy;
    else if ( dynamic_cast< QgsNetworkSpeedStrategy * >( sipCpp ) != NULL )
      sipType = sipType_QgsNetworkSpeedStrategy;
    else
      sipType = NULL;
#line 1509 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QgsGraphDirector(void **);}
static const sipTypeDef *sipSubClass_QgsGraphDirector(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 28 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/network/qgsgraphdirector.sip"
    if ( dynamic_cast< QgsVectorLayerDirector * >( sipCpp ) != NULL )
      sipType = sipType_QgsVectorLayerDirector;
    else
      sipType = NULL;
#line 1527 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QgsZonalStatistics_Statistic___or__(PyObject *,PyObject *);}
static PyObject *slot_QgsZonalStatistics_Statistic___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsZonalStatistics::Statistic a0;
         ::QgsZonalStatistics::Statistics* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QgsZonalStatistics_Statistic, &a0, sipType_QgsZonalStatistics_Statistics, &a1, &a1State))
        {
             ::QgsZonalStatistics::Statistics*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QgsZonalStatistics::Statistics((a0 | *a1));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(a1,sipType_QgsZonalStatistics_Statistics,a1State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QgsZonalStatistics_Statistics,a1State);

            return sipConvertFromNewType(sipRes,sipType_QgsZonalStatistics_Statistics,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QgsZonalStatistics_Statistic[] = {
    {(void *)slot_QgsZonalStatistics_Statistic___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometryCheck__Flag, {0}, 0}, sipNameNr_Flag, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometryCheck__CheckType, {0}, 0}, sipNameNr_CheckType, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometryCheck__ChangeType, {0}, 0}, sipNameNr_ChangeType, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometryCheck__ChangeWhat, {0}, 0}, sipNameNr_ChangeWhat, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometryCheckError__ValueType, {0}, 0}, sipNameNr_ValueType, 30, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometryCheckError__Status, {0}, 0}, sipNameNr_Status, 30, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsVectorLayerDirector__Direction, {0}, 0}, sipNameNr_Direction, 89, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsTinInterpolator__TinInterpolation, {0}, 0}, sipNameNr_TinInterpolation, 86, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsInterpolator__Result, {0}, 0}, sipNameNr_Result, 53, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsInterpolator__ValueSource, {0}, 0}, sipNameNr_ValueSource, 53, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsInterpolator__SourceType, {0}, 0}, sipNameNr_SourceType, 53, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsZonalStatistics__Statistic, {0}, 0}, sipNameNr_Statistic, 91, slots_QgsZonalStatistics_Statistic},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsGeometrySnapper__SnapMode, {0}, 0}, sipNameNr_SnapMode, 39, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsMeshCalculator__Result, {0}, 0}, sipNameNr_Result, 64, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsRasterCalcNode__Operator, {0}, 0}, sipNameNr_Operator, 71, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsRasterCalcNode__Type, {0}, 0}, sipNameNr_Type, 71, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsRasterMatrix__OneArgOperator, {0}, 0}, sipNameNr_OneArgOperator, 77, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsRasterMatrix__TwoArgOperator, {0}, 0}, sipNameNr_TwoArgOperator, 77, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsRasterCalculator__Result, {0}, 0}, sipNameNr_Result, 74, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsKernelDensityEstimation__Result, {0}, 0}, sipNameNr_Result, 59, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsKernelDensityEstimation__OutputValues, {0}, 0}, sipNameNr_OutputValues, 59, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsKernelDensityEstimation__KernelShape, {0}, 0}, sipNameNr_KernelShape, 59, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QgsAlignRaster__ResampleAlg, {0}, 0}, sipNameNr_ResampleAlg, 10, NULL},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes__analysis[] = {
    &sipTypeDef__analysis_QList_0100QgsAlignRaster_Item.mtd_base,
    &sipTypeDef__analysis_QList_0100QgsGeometry.mtd_base,
    &sipTypeDef__analysis_QList_0101QgsGeometryCheckError.mtd_base,
    &sipTypeDef__analysis_QList_0101QgsGeometryCheckFactory.mtd_base,
    &sipTypeDef__analysis_QList_0100QgsInterpolator_LayerData.mtd_base,
    &sipTypeDef__analysis_QList_0111QgsRasterCalcNode.mtd_base,
    &sipTypeDef__analysis_QList_0100QgsRelief_ReliefColor.mtd_base,
    &sipTypeDef__analysis_QList_0101QgsSingleGeometryCheckError.mtd_base,
    &sipTypeDef__analysis_QMap_0100QString_0101QgsFeaturePool.mtd_base,
    &sipTypeDef__analysis_QVector_0100QgsRasterCalculatorEntry.mtd_base,
    &sipTypeDef__analysis_QgsAlignRaster.ctd_base,
    &sipTypeDef__analysis_QgsAlignRaster_Item.ctd_base,
    &sipTypeDef__analysis_QgsAlignRaster_ProgressHandler.ctd_base,
    &sipTypeDef__analysis_QgsAlignRaster_RasterInfo.ctd_base,
    &enumTypes[22].etd_base,
    &sipTypeDef__analysis_QgsAnalysis.ctd_base,
    &sipTypeDef__analysis_QgsAspectFilter.ctd_base,
    &sipTypeDef__analysis_QgsDerivativeFilter.ctd_base,
    &sipTypeDef__analysis_QgsExifTools.ctd_base,
    &sipTypeDef__analysis_QgsExifTools_GeoTagDetails.ctd_base,
    &sipTypeDef__analysis_QgsFeaturePool.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheck.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheck_Change.ctd_base,
    &enumTypes[2].etd_base,
    &enumTypes[3].etd_base,
    &enumTypes[1].etd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef__analysis_QgsGeometryCheck_Flags.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheck_LayerFeatureIds.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckContext.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckError.ctd_base,
    &enumTypes[5].etd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef__analysis_QgsGeometryCheckErrorSingle.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckFactory.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckRegistry.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckerUtils.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckerUtils_LayerFeature.ctd_base,
    &sipTypeDef__analysis_QgsGeometryCheckerUtils_LayerFeatures.ctd_base,
    &sipTypeDef__analysis_QgsGeometrySnapper.ctd_base,
    &enumTypes[12].etd_base,
    &sipTypeDef__analysis_QgsGeometrySnapperSingleSource.ctd_base,
    &sipTypeDef__analysis_QgsGraph.ctd_base,
    &sipTypeDef__analysis_QgsGraphAnalyzer.ctd_base,
    &sipTypeDef__analysis_QgsGraphBuilder.ctd_base,
    &sipTypeDef__analysis_QgsGraphBuilderInterface.ctd_base,
    &sipTypeDef__analysis_QgsGraphDirector.ctd_base,
    &sipTypeDef__analysis_QgsGraphEdge.ctd_base,
    &sipTypeDef__analysis_QgsGraphVertex.ctd_base,
    &sipTypeDef__analysis_QgsGridFileWriter.ctd_base,
    &sipTypeDef__analysis_QgsHillshadeFilter.ctd_base,
    &sipTypeDef__analysis_QgsIDWInterpolator.ctd_base,
    &sipTypeDef__analysis_QgsInternalGeometrySnapper.ctd_base,
    &sipTypeDef__analysis_QgsInterpolator.ctd_base,
    &sipTypeDef__analysis_QgsInterpolator_LayerData.ctd_base,
    &enumTypes[8].etd_base,
    &enumTypes[10].etd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef__analysis_QgsInterpolatorVertexData.ctd_base,
    &sipTypeDef__analysis_QgsKernelDensityEstimation.ctd_base,
    &enumTypes[21].etd_base,
    &enumTypes[20].etd_base,
    &sipTypeDef__analysis_QgsKernelDensityEstimation_Parameters.ctd_base,
    &enumTypes[19].etd_base,
    &sipTypeDef__analysis_QgsMeshCalculator.ctd_base,
    &enumTypes[13].etd_base,
    &sipTypeDef__analysis_QgsNativeAlgorithms.ctd_base,
    &sipTypeDef__analysis_QgsNetworkDistanceStrategy.ctd_base,
    &sipTypeDef__analysis_QgsNetworkSpeedStrategy.ctd_base,
    &sipTypeDef__analysis_QgsNetworkStrategy.ctd_base,
    &sipTypeDef__analysis_QgsNineCellFilter.ctd_base,
    &sipTypeDef__analysis_QgsRasterCalcNode.ctd_base,
    &enumTypes[14].etd_base,
    &enumTypes[15].etd_base,
    &sipTypeDef__analysis_QgsRasterCalculator.ctd_base,
    &enumTypes[18].etd_base,
    &sipTypeDef__analysis_QgsRasterCalculatorEntry.ctd_base,
    &sipTypeDef__analysis_QgsRasterMatrix.ctd_base,
    &enumTypes[16].etd_base,
    &enumTypes[17].etd_base,
    &sipTypeDef__analysis_QgsRelief.ctd_base,
    &sipTypeDef__analysis_QgsRelief_ReliefColor.ctd_base,
    &sipTypeDef__analysis_QgsRuggednessFilter.ctd_base,
    &sipTypeDef__analysis_QgsSingleGeometryCheck.ctd_base,
    &sipTypeDef__analysis_QgsSingleGeometryCheckError.ctd_base,
    &sipTypeDef__analysis_QgsSlopeFilter.ctd_base,
    &sipTypeDef__analysis_QgsTinInterpolator.ctd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef__analysis_QgsTotalCurvatureFilter.ctd_base,
    &sipTypeDef__analysis_QgsVectorLayerDirector.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef__analysis_QgsZonalStatistics.ctd_base,
    &enumTypes[11].etd_base,
    &sipTypeDef__analysis_QgsZonalStatistics_Statistics.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"QgsAlignRaster::List", "QList<QgsAlignRaster::Item>"},
    {"QgsGeometryCheck::Changes", "QMap<QString,QMap<QgsFeatureId,QList<QgsGeometryCheck::Change> > >"},
    {"QgsGraphEdgeIds", "QList<int>"},
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes__analysis_QtCore[] = {
    {"QChildEvent"},
    {"QEvent"},
    {"QList<int>"},
    {"QMap<QString,QVariant>"},
    {"QMetaMethod"},
    {"QMetaObject"},
    {"QObject"},
    {"QPointF"},
    {"QSize"},
    {"QSizeF"},
    {"QString"},
    {"QStringList"},
    {"QTimerEvent"},
    {"QVariant"},
    {"QVector<int>"},
    {NULL}
};


/*
 * This defines the virtual error handlers that this module needs to import
 * from QtCore.
 */
sipImportedVirtErrorHandlerDef sipImportedVirtErrorHandlers__analysis_QtCore[] = {
    {"PyQt5"},
    {NULL}
};


/* This defines the types that this module needs to import from QtGui. */
sipImportedTypeDef sipImportedTypes__analysis_QtGui[] = {
    {"QColor"},
    {"QIcon"},
    {"QVector<qreal>"},
    {NULL}
};


/* This defines the types that this module needs to import from QtSql. */
sipImportedTypeDef sipImportedTypes__analysis_QtSql[] = {
    {"QVector<QVariant>"},
    {NULL}
};


/* This defines the types that this module needs to import from _core. */
sipImportedTypeDef sipImportedTypes__analysis__core[] = {
    {"QList<QgsFeature>"},
    {"QList<QgsWkbTypes::GeometryType>"},
    {"QMap<qint64,QgsGeometry>"},
    {"QSet<int>"},
    {"QVector<QgsPointXY>"},
    {"QgsCoordinateReferenceSystem"},
    {"QgsCoordinateTransformContext"},
    {"QgsDistanceArea"},
    {"QgsFeature"},
    {"QgsFeatureIterator"},
    {"QgsFeatureSink"},
    {"QgsFeatureSink::Flags"},
    {"QgsFeatureSource"},
    {"QgsFeedback"},
    {"QgsFields"},
    {"QgsGeometry"},
    {"QgsMeshLayer"},
    {"QgsPoint"},
    {"QgsPointXY"},
    {"QgsProcessingAlgorithm"},
    {"QgsProcessingContext"},
    {"QgsProcessingDestinationParameter"},
    {"QgsProcessingProvider"},
    {"QgsRasterInterface"},
    {"QgsRasterLayer"},
    {"QgsRectangle"},
    {"QgsVectorLayer"},
    {"QgsVertexId"},
    {"QgsWkbTypes::GeometryType"},
    {NULL}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes__analysis_QtCore, sipImportedVirtErrorHandlers__analysis_QtCore, NULL},
    {"PyQt5.QtGui", sipImportedTypes__analysis_QtGui, NULL, NULL},
    {"PyQt5.QtWidgets", NULL, NULL, NULL},
    {"PyQt5.QtPrintSupport", NULL, NULL, NULL},
    {"PyQt5.QtSql", sipImportedTypes__analysis_QtSql, NULL, NULL},
    {"PyQt5.QtNetwork", NULL, NULL, NULL},
    {"PyQt5.QtXml", NULL, NULL, NULL},
    {"qgis._core", sipImportedTypes__analysis__core, NULL, NULL},
    {NULL, NULL, NULL, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QgsGraphBuilderInterface, {45, 255, 0}, NULL},
    {sipSubClass_QgsNetworkStrategy, {69, 255, 0}, NULL},
    {sipSubClass_QgsGraphDirector, {6, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI__analysis = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_qgis__analysis,
    0,
    sipStrings__analysis,
    importsTable,
    NULL,
    94,
    sipExportedTypes__analysis,
    NULL,
    0,
    NULL,
    3,
    typedefsTable,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI__analysis;

sip_qt_metaobject_func sip__analysis_qt_metaobject;
sip_qt_metacall_func sip__analysis_qt_metacall;
sip_qt_metacast_func sip__analysis_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit__analysis
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        init_analysis
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "qgis._analysis",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_qgis__analysis, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_qgis__analysis), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI__analysis = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI__analysis = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI__analysis == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI__analysis,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip__analysis_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip__analysis_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip__analysis_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip__analysis_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI__analysis,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}

#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1982 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 29 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckfactory.sip"
#include "qgsgeometrycheckfactory.h"
#line 1986 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0101QgsGeometryCheckFactory(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QgsGeometryCheckFactory(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsGeometryCheckFactory*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsGeometryCheckFactory*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QgsGeometryCheckFactory(SIP_SSIZE_T);}
static void *array_QList_0101QgsGeometryCheckFactory(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsGeometryCheckFactory*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QgsGeometryCheckFactory(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QgsGeometryCheckFactory(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsGeometryCheckFactory*>(reinterpret_cast<const QList< ::QgsGeometryCheckFactory*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QgsGeometryCheckFactory(void *, int);}
static void release_QList_0101QgsGeometryCheckFactory(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsGeometryCheckFactory*> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0101QgsGeometryCheckFactory(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QgsGeometryCheckFactory(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsGeometryCheckFactory*> **sipCppPtr = reinterpret_cast<QList< ::QgsGeometryCheckFactory*> **>(sipCppPtrV);

#line 184 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsGeometryCheckFactory *> *ql = new QList<QgsGeometryCheckFactory *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QgsGeometryCheckFactory *t = reinterpret_cast<QgsGeometryCheckFactory *>(
                sipForceConvertToType(itm, sipType_QgsGeometryCheckFactory, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsGeometryCheckFactory' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 2096 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QgsGeometryCheckFactory(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QgsGeometryCheckFactory(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsGeometryCheckFactory*> *sipCpp = reinterpret_cast<QList< ::QgsGeometryCheckFactory*> *>(sipCppV);

#line 153 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QgsGeometryCheckFactory *t = sipCpp->at(i);

            // The explicit (void *) cast allows QgsGeometryCheckFactory to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QgsGeometryCheckFactory,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 2134 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0101QgsGeometryCheckFactory = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_581,     /* QList<QgsGeometryCheckFactory*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QgsGeometryCheckFactory,
    array_QList_0101QgsGeometryCheckFactory,
    copy_QList_0101QgsGeometryCheckFactory,
    release_QList_0101QgsGeometryCheckFactory,
    convertTo_QList_0101QgsGeometryCheckFactory,
    convertFrom_QList_0101QgsGeometryCheckFactory
};

#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2166 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 28 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgssinglegeometrycheck.sip"
#include "qgssinglegeometrycheck.h"
#line 2170 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0101QgsSingleGeometryCheckError(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QgsSingleGeometryCheckError(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsSingleGeometryCheckError*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsSingleGeometryCheckError*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QgsSingleGeometryCheckError(SIP_SSIZE_T);}
static void *array_QList_0101QgsSingleGeometryCheckError(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsSingleGeometryCheckError*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QgsSingleGeometryCheckError(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QgsSingleGeometryCheckError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsSingleGeometryCheckError*>(reinterpret_cast<const QList< ::QgsSingleGeometryCheckError*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QgsSingleGeometryCheckError(void *, int);}
static void release_QList_0101QgsSingleGeometryCheckError(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsSingleGeometryCheckError*> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0101QgsSingleGeometryCheckError(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QgsSingleGeometryCheckError(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsSingleGeometryCheckError*> **sipCppPtr = reinterpret_cast<QList< ::QgsSingleGeometryCheckError*> **>(sipCppPtrV);

#line 184 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsSingleGeometryCheckError *> *ql = new QList<QgsSingleGeometryCheckError *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QgsSingleGeometryCheckError *t = reinterpret_cast<QgsSingleGeometryCheckError *>(
                sipForceConvertToType(itm, sipType_QgsSingleGeometryCheckError, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsSingleGeometryCheckError' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 2280 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QgsSingleGeometryCheckError(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QgsSingleGeometryCheckError(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsSingleGeometryCheckError*> *sipCpp = reinterpret_cast<QList< ::QgsSingleGeometryCheckError*> *>(sipCppV);

#line 153 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QgsSingleGeometryCheckError *t = sipCpp->at(i);

            // The explicit (void *) cast allows QgsSingleGeometryCheckError to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QgsSingleGeometryCheckError,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 2318 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0101QgsSingleGeometryCheckError = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_308,     /* QList<QgsSingleGeometryCheckError*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QgsSingleGeometryCheckError,
    array_QList_0101QgsSingleGeometryCheckError,
    copy_QList_0101QgsSingleGeometryCheckError,
    release_QList_0101QgsSingleGeometryCheckError,
    convertTo_QList_0101QgsSingleGeometryCheckError,
    convertFrom_QList_0101QgsSingleGeometryCheckError
};

#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2350 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckerror.sip"
#include "qgsgeometrycheckerror.h"
#line 2354 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0101QgsGeometryCheckError(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QgsGeometryCheckError(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsGeometryCheckError*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsGeometryCheckError*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QgsGeometryCheckError(SIP_SSIZE_T);}
static void *array_QList_0101QgsGeometryCheckError(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsGeometryCheckError*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QgsGeometryCheckError(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QgsGeometryCheckError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsGeometryCheckError*>(reinterpret_cast<const QList< ::QgsGeometryCheckError*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QgsGeometryCheckError(void *, int);}
static void release_QList_0101QgsGeometryCheckError(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsGeometryCheckError*> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0101QgsGeometryCheckError(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QgsGeometryCheckError(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsGeometryCheckError*> **sipCppPtr = reinterpret_cast<QList< ::QgsGeometryCheckError*> **>(sipCppPtrV);

#line 184 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsGeometryCheckError *> *ql = new QList<QgsGeometryCheckError *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QgsGeometryCheckError *t = reinterpret_cast<QgsGeometryCheckError *>(
                sipForceConvertToType(itm, sipType_QgsGeometryCheckError, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsGeometryCheckError' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 2464 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QgsGeometryCheckError(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QgsGeometryCheckError(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsGeometryCheckError*> *sipCpp = reinterpret_cast<QList< ::QgsGeometryCheckError*> *>(sipCppV);

#line 153 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QgsGeometryCheckError *t = sipCpp->at(i);

            // The explicit (void *) cast allows QgsGeometryCheckError to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QgsGeometryCheckError,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 2502 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0101QgsGeometryCheckError = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_866,     /* QList<QgsGeometryCheckError*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QgsGeometryCheckError,
    array_QList_0101QgsGeometryCheckError,
    copy_QList_0101QgsGeometryCheckError,
    release_QList_0101QgsGeometryCheckError,
    convertTo_QList_0101QgsGeometryCheckError,
    convertFrom_QList_0101QgsGeometryCheckError
};

#line 773 "core/conversions.sip"
#include <QMap>
#line 2534 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 26 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsfeaturepool.sip"
#include "qgsfeaturepool.h"
#line 2538 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 2541 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QMap_0100QString_0101QgsFeaturePool(void *, SIP_SSIZE_T, void *);}
static void assign_QMap_0100QString_0101QgsFeaturePool(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QMap< ::QString, ::QgsFeaturePool*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QMap< ::QString, ::QgsFeaturePool*> *>(sipSrc);
}


extern "C" {static void *array_QMap_0100QString_0101QgsFeaturePool(SIP_SSIZE_T);}
static void *array_QMap_0100QString_0101QgsFeaturePool(SIP_SSIZE_T sipNrElem)
{
    return new QMap< ::QString, ::QgsFeaturePool*>[sipNrElem];
}


extern "C" {static void *copy_QMap_0100QString_0101QgsFeaturePool(const void *, SIP_SSIZE_T);}
static void *copy_QMap_0100QString_0101QgsFeaturePool(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMap< ::QString, ::QgsFeaturePool*>(reinterpret_cast<const QMap< ::QString, ::QgsFeaturePool*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QMap_0100QString_0101QgsFeaturePool(void *, int);}
static void release_QMap_0100QString_0101QgsFeaturePool(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QMap< ::QString, ::QgsFeaturePool*> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QMap_0100QString_0101QgsFeaturePool(PyObject *, void **, int *, PyObject *);}
static int convertTo_QMap_0100QString_0101QgsFeaturePool(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QMap< ::QString, ::QgsFeaturePool*> **sipCppPtr = reinterpret_cast<QMap< ::QString, ::QgsFeaturePool*> **>(sipCppPtrV);

#line 821 "core/conversions.sip"
    PyObject *t1obj, *t2obj;
    Py_ssize_t i = 0;

    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyDict_Check(sipPy))
            return 0;

        while (PyDict_Next(sipPy, &i, &t1obj, &t2obj))
        {
            if (!sipCanConvertToType(t1obj, sipType_QString, SIP_NOT_NONE))
                return 0;

            if (!sipCanConvertToType(t2obj, sipType_QgsFeaturePool, SIP_NOT_NONE))
                return 0;
        }

        return 1;
    }

    QMap<QString, QgsFeaturePool*> *qm = new QMap<QString, QgsFeaturePool*>;

    while (PyDict_Next(sipPy, &i, &t1obj, &t2obj))
    {
        int state1, state2;

        QString *t1 = reinterpret_cast<QString *>(sipConvertToType(t1obj, sipType_QString, sipTransferObj, SIP_NOT_NONE, &state1, sipIsErr));
        QgsFeaturePool *t2 = reinterpret_cast<QgsFeaturePool *>(sipConvertToType(t2obj, sipType_QgsFeaturePool, sipTransferObj, SIP_NOT_NONE, &state2, sipIsErr));

        if (*sipIsErr)
        {
            sipReleaseType(t1, sipType_QString, state1);
            sipReleaseType(t2, sipType_QgsFeaturePool, state2);

            delete qm;
            return 0;
        }

        qm->insert(*t1, t2);

        sipReleaseType(t1, sipType_QString, state1);
        sipReleaseType(t2, sipType_QgsFeaturePool, state2);
    }

    *sipCppPtr = qm;

    return sipGetState(sipTransferObj);
#line 2630 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QMap_0100QString_0101QgsFeaturePool(void *, PyObject *);}
static PyObject *convertFrom_QMap_0100QString_0101QgsFeaturePool(void *sipCppV, PyObject *sipTransferObj)
{
   QMap< ::QString, ::QgsFeaturePool*> *sipCpp = reinterpret_cast<QMap< ::QString, ::QgsFeaturePool*> *>(sipCppV);

#line 777 "core/conversions.sip"
    // Create the dictionary.
    PyObject *d = PyDict_New();

    if (!d)
        return NULL;

    // Set the dictionary elements.
    QMap<QString, QgsFeaturePool*>::const_iterator i = sipCpp->constBegin();

    while (i != sipCpp->constEnd())
    {
        QString *t1 = new QString(i.key());
        QgsFeaturePool *t2 = i.value();

        PyObject *t1obj = sipConvertFromNewType(t1, sipType_QString, sipTransferObj);
        PyObject *t2obj = sipConvertFromType(t2, sipType_QgsFeaturePool, sipTransferObj);

        if (t1obj == NULL || t2obj == NULL || PyDict_SetItem(d, t1obj, t2obj) < 0)
        {
            Py_DECREF(d);

            if (t1obj)
                Py_DECREF(t1obj);
            else
                delete t1;

            if (t2obj)
                Py_DECREF(t2obj);
            else
                delete t2;

            return NULL;
        }

        Py_DECREF(t1obj);
        Py_DECREF(t2obj);

        ++i;
    }

    return d;
#line 2681 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QMap_0100QString_0101QgsFeaturePool = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_896,     /* QMap<QString,QgsFeaturePool*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QMap_0100QString_0101QgsFeaturePool,
    array_QMap_0100QString_0101QgsFeaturePool,
    copy_QMap_0100QString_0101QgsFeaturePool,
    release_QMap_0100QString_0101QgsFeaturePool,
    convertTo_QMap_0100QString_0101QgsFeaturePool,
    convertFrom_QMap_0100QString_0101QgsFeaturePool
};

#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2713 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 41 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/interpolation/qgsinterpolator.sip"
#include "qgsinterpolator.h"
#line 2717 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0100QgsInterpolator_LayerData(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QgsInterpolator_LayerData(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsInterpolator::LayerData> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsInterpolator::LayerData> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QgsInterpolator_LayerData(SIP_SSIZE_T);}
static void *array_QList_0100QgsInterpolator_LayerData(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsInterpolator::LayerData>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QgsInterpolator_LayerData(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QgsInterpolator_LayerData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsInterpolator::LayerData>(reinterpret_cast<const QList< ::QgsInterpolator::LayerData> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QgsInterpolator_LayerData(void *, int);}
static void release_QList_0100QgsInterpolator_LayerData(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsInterpolator::LayerData> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0100QgsInterpolator_LayerData(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QgsInterpolator_LayerData(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsInterpolator::LayerData> **sipCppPtr = reinterpret_cast<QList< ::QgsInterpolator::LayerData> **>(sipCppPtrV);

#line 68 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsInterpolator::LayerData> *ql = new QList<QgsInterpolator::LayerData>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QgsInterpolator::LayerData *t = reinterpret_cast<QgsInterpolator::LayerData *>(
                sipForceConvertToType(itm, sipType_QgsInterpolator_LayerData, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsInterpolator::LayerData' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QgsInterpolator_LayerData, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 2829 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QgsInterpolator_LayerData(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QgsInterpolator_LayerData(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsInterpolator::LayerData> *sipCpp = reinterpret_cast<QList< ::QgsInterpolator::LayerData> *>(sipCppV);

#line 42 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QgsInterpolator::LayerData *t = new QgsInterpolator::LayerData(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QgsInterpolator_LayerData,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 2862 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0100QgsInterpolator_LayerData = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_379,     /* QList<QgsInterpolator::LayerData> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QgsInterpolator_LayerData,
    array_QList_0100QgsInterpolator_LayerData,
    copy_QList_0100QgsInterpolator_LayerData,
    release_QList_0100QgsInterpolator_LayerData,
    convertTo_QList_0100QgsInterpolator_LayerData,
    convertFrom_QList_0100QgsInterpolator_LayerData
};

#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2894 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 45 "core/auto_generated/geometry/qgsgeometry.sip"
#include "qgsgeometry.h"
#line 2898 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0100QgsGeometry(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QgsGeometry(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsGeometry> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsGeometry> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QgsGeometry(SIP_SSIZE_T);}
static void *array_QList_0100QgsGeometry(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsGeometry>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QgsGeometry(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QgsGeometry(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsGeometry>(reinterpret_cast<const QList< ::QgsGeometry> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QgsGeometry(void *, int);}
static void release_QList_0100QgsGeometry(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsGeometry> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0100QgsGeometry(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QgsGeometry(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsGeometry> **sipCppPtr = reinterpret_cast<QList< ::QgsGeometry> **>(sipCppPtrV);

#line 68 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsGeometry> *ql = new QList<QgsGeometry>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QgsGeometry *t = reinterpret_cast<QgsGeometry *>(
                sipForceConvertToType(itm, sipType_QgsGeometry, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsGeometry' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QgsGeometry, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 3010 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QgsGeometry(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QgsGeometry(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsGeometry> *sipCpp = reinterpret_cast<QList< ::QgsGeometry> *>(sipCppV);

#line 42 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QgsGeometry *t = new QgsGeometry(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QgsGeometry,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 3043 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0100QgsGeometry = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_3343,     /* QList<QgsGeometry> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QgsGeometry,
    array_QList_0100QgsGeometry,
    copy_QList_0100QgsGeometry,
    release_QList_0100QgsGeometry,
    convertTo_QList_0100QgsGeometry,
    convertFrom_QList_0100QgsGeometry
};

#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3075 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 17 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsrastercalcnode.sip"
#include "qgsrastercalcnode.h"
#line 3079 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0111QgsRasterCalcNode(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0111QgsRasterCalcNode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList<const  ::QgsRasterCalcNode*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList<const  ::QgsRasterCalcNode*> *>(sipSrc);
}


extern "C" {static void *array_QList_0111QgsRasterCalcNode(SIP_SSIZE_T);}
static void *array_QList_0111QgsRasterCalcNode(SIP_SSIZE_T sipNrElem)
{
    return new QList<const  ::QgsRasterCalcNode*>[sipNrElem];
}


extern "C" {static void *copy_QList_0111QgsRasterCalcNode(const void *, SIP_SSIZE_T);}
static void *copy_QList_0111QgsRasterCalcNode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList<const  ::QgsRasterCalcNode*>(reinterpret_cast<const QList<const  ::QgsRasterCalcNode*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0111QgsRasterCalcNode(void *, int);}
static void release_QList_0111QgsRasterCalcNode(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList<const  ::QgsRasterCalcNode*> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0111QgsRasterCalcNode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0111QgsRasterCalcNode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList<const  ::QgsRasterCalcNode*> **sipCppPtr = reinterpret_cast<QList<const  ::QgsRasterCalcNode*> **>(sipCppPtrV);

#line 184 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<const QgsRasterCalcNode *> *ql = new QList<const QgsRasterCalcNode *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        const QgsRasterCalcNode *t = reinterpret_cast<const QgsRasterCalcNode *>(
                sipForceConvertToType(itm, sipType_QgsRasterCalcNode, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'const QgsRasterCalcNode' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 3189 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0111QgsRasterCalcNode(void *, PyObject *);}
static PyObject *convertFrom_QList_0111QgsRasterCalcNode(void *sipCppV, PyObject *sipTransferObj)
{
   QList<const  ::QgsRasterCalcNode*> *sipCpp = reinterpret_cast<QList<const  ::QgsRasterCalcNode*> *>(sipCppV);

#line 153 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            const QgsRasterCalcNode *t = sipCpp->at(i);

            // The explicit (void *) cast allows const QgsRasterCalcNode to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QgsRasterCalcNode,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 3227 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0111QgsRasterCalcNode = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1656,     /* QList<QgsRasterCalcNode*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0111QgsRasterCalcNode,
    array_QList_0111QgsRasterCalcNode,
    copy_QList_0111QgsRasterCalcNode,
    release_QList_0111QgsRasterCalcNode,
    convertTo_QList_0111QgsRasterCalcNode,
    convertFrom_QList_0111QgsRasterCalcNode
};

#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3259 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 20 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsrelief.sip"
#include "qgsrelief.h"
#line 3263 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0100QgsRelief_ReliefColor(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QgsRelief_ReliefColor(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsRelief::ReliefColor> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsRelief::ReliefColor> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QgsRelief_ReliefColor(SIP_SSIZE_T);}
static void *array_QList_0100QgsRelief_ReliefColor(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsRelief::ReliefColor>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QgsRelief_ReliefColor(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QgsRelief_ReliefColor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsRelief::ReliefColor>(reinterpret_cast<const QList< ::QgsRelief::ReliefColor> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QgsRelief_ReliefColor(void *, int);}
static void release_QList_0100QgsRelief_ReliefColor(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsRelief::ReliefColor> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0100QgsRelief_ReliefColor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QgsRelief_ReliefColor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsRelief::ReliefColor> **sipCppPtr = reinterpret_cast<QList< ::QgsRelief::ReliefColor> **>(sipCppPtrV);

#line 68 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsRelief::ReliefColor> *ql = new QList<QgsRelief::ReliefColor>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QgsRelief::ReliefColor *t = reinterpret_cast<QgsRelief::ReliefColor *>(
                sipForceConvertToType(itm, sipType_QgsRelief_ReliefColor, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsRelief::ReliefColor' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QgsRelief_ReliefColor, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 3375 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QgsRelief_ReliefColor(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QgsRelief_ReliefColor(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsRelief::ReliefColor> *sipCpp = reinterpret_cast<QList< ::QgsRelief::ReliefColor> *>(sipCppV);

#line 42 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QgsRelief::ReliefColor *t = new QgsRelief::ReliefColor(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QgsRelief_ReliefColor,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 3408 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0100QgsRelief_ReliefColor = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_926,     /* QList<QgsRelief::ReliefColor> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QgsRelief_ReliefColor,
    array_QList_0100QgsRelief_ReliefColor,
    copy_QList_0100QgsRelief_ReliefColor,
    release_QList_0100QgsRelief_ReliefColor,
    convertTo_QList_0100QgsRelief_ReliefColor,
    convertFrom_QList_0100QgsRelief_ReliefColor
};

#line 28 "/usr/share/sip/PyQt5/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 3440 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 22 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsrastercalculator.sip"
#include "qgsrastercalculator.h"
#line 3444 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QVector_0100QgsRasterCalculatorEntry(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QgsRasterCalculatorEntry(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QgsRasterCalculatorEntry> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QgsRasterCalculatorEntry> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QgsRasterCalculatorEntry(SIP_SSIZE_T);}
static void *array_QVector_0100QgsRasterCalculatorEntry(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QgsRasterCalculatorEntry>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QgsRasterCalculatorEntry(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QgsRasterCalculatorEntry(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QgsRasterCalculatorEntry>(reinterpret_cast<const QVector< ::QgsRasterCalculatorEntry> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QgsRasterCalculatorEntry(void *, int);}
static void release_QVector_0100QgsRasterCalculatorEntry(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QVector< ::QgsRasterCalculatorEntry> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QVector_0100QgsRasterCalculatorEntry(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QgsRasterCalculatorEntry(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QgsRasterCalculatorEntry> **sipCppPtr = reinterpret_cast<QVector< ::QgsRasterCalculatorEntry> **>(sipCppPtrV);

#line 58 "/usr/share/sip/PyQt5/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QgsRasterCalculatorEntry> *qv = new QVector<QgsRasterCalculatorEntry>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QgsRasterCalculatorEntry *t = reinterpret_cast<QgsRasterCalculatorEntry *>(
                sipForceConvertToType(itm, sipType_QgsRasterCalculatorEntry, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsRasterCalculatorEntry' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QgsRasterCalculatorEntry, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 3556 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QgsRasterCalculatorEntry(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QgsRasterCalculatorEntry(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QgsRasterCalculatorEntry> *sipCpp = reinterpret_cast<QVector< ::QgsRasterCalculatorEntry> *>(sipCppV);

#line 32 "/usr/share/sip/PyQt5/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QgsRasterCalculatorEntry *t = new QgsRasterCalculatorEntry(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QgsRasterCalculatorEntry,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 3589 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QVector_0100QgsRasterCalculatorEntry = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_413,     /* QVector<QgsRasterCalculatorEntry> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QgsRasterCalculatorEntry,
    array_QVector_0100QgsRasterCalculatorEntry,
    copy_QVector_0100QgsRasterCalculatorEntry,
    release_QVector_0100QgsRasterCalculatorEntry,
    convertTo_QVector_0100QgsRasterCalculatorEntry,
    convertFrom_QVector_0100QgsRasterCalculatorEntry
};

#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3621 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/raster/qgsalignraster.sip"
#include "qgsalignraster.h"
#include <gdal_version.h>
#line 3626 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static void assign_QList_0100QgsAlignRaster_Item(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QgsAlignRaster_Item(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QgsAlignRaster::Item> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QgsAlignRaster::Item> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QgsAlignRaster_Item(SIP_SSIZE_T);}
static void *array_QList_0100QgsAlignRaster_Item(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QgsAlignRaster::Item>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QgsAlignRaster_Item(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QgsAlignRaster_Item(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QgsAlignRaster::Item>(reinterpret_cast<const QList< ::QgsAlignRaster::Item> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QgsAlignRaster_Item(void *, int);}
static void release_QList_0100QgsAlignRaster_Item(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QList< ::QgsAlignRaster::Item> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0100QgsAlignRaster_Item(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QgsAlignRaster_Item(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QgsAlignRaster::Item> **sipCppPtr = reinterpret_cast<QList< ::QgsAlignRaster::Item> **>(sipCppPtrV);

#line 68 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QgsAlignRaster::Item> *ql = new QList<QgsAlignRaster::Item>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QgsAlignRaster::Item *t = reinterpret_cast<QgsAlignRaster::Item *>(
                sipForceConvertToType(itm, sipType_QgsAlignRaster_Item, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QgsAlignRaster::Item' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QgsAlignRaster_Item, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 3738 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QgsAlignRaster_Item(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QgsAlignRaster_Item(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QgsAlignRaster::Item> *sipCpp = reinterpret_cast<QList< ::QgsAlignRaster::Item> *>(sipCppV);

#line 42 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QgsAlignRaster::Item *t = new QgsAlignRaster::Item(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QgsAlignRaster_Item,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 3771 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


sipMappedTypeDef sipTypeDef__analysis_QList_0100QgsAlignRaster_Item = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1161,     /* QList<QgsAlignRaster::Item> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QgsAlignRaster_Item,
    array_QList_0100QgsAlignRaster_Item,
    copy_QList_0100QgsAlignRaster_Item,
    release_QList_0100QgsAlignRaster_Item,
    convertTo_QList_0100QgsAlignRaster_Item,
    convertFrom_QList_0100QgsAlignRaster_Item
};

#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 3803 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 3807 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static PyObject *slot_QgsGeometryCheck_Change___ne__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Change___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Change));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QgsGeometryCheck::Change* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QgsGeometryCheck_Change, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = !sipCpp-> ::QgsGeometryCheck::Change::operator==(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, ne_slot, sipType_QgsGeometryCheck_Change, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Change___eq__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Change___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Change));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QgsGeometryCheck::Change* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QgsGeometryCheck_Change, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp-> ::QgsGeometryCheck::Change::operator==(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, eq_slot, sipType_QgsGeometryCheck_Change, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QgsGeometryCheck_Change(void *, int);}
static void release_QgsGeometryCheck_Change(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QgsGeometryCheck::Change *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QgsGeometryCheck_Change(void *, SIP_SSIZE_T, void *);}
static void assign_QgsGeometryCheck_Change(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QgsGeometryCheck::Change *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSrc);
}


extern "C" {static void *array_QgsGeometryCheck_Change(SIP_SSIZE_T);}
static void *array_QgsGeometryCheck_Change(SIP_SSIZE_T sipNrElem)
{
    return new  ::QgsGeometryCheck::Change[sipNrElem];
}


extern "C" {static void *copy_QgsGeometryCheck_Change(const void *, SIP_SSIZE_T);}
static void *copy_QgsGeometryCheck_Change(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QgsGeometryCheck::Change(reinterpret_cast<const  ::QgsGeometryCheck::Change *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QgsGeometryCheck_Change(sipSimpleWrapper *);}
static void dealloc_QgsGeometryCheck_Change(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsGeometryCheck_Change(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QgsGeometryCheck_Change(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QgsGeometryCheck_Change(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QgsGeometryCheck::Change *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::Change();
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
         ::QgsGeometryCheck::ChangeWhat a0;
         ::QgsGeometryCheck::ChangeType a1;
         ::QgsVertexId a2def = QgsVertexId();
         ::QgsVertexId* a2 = &a2def;

        static const char *sipKwdList[] = {
            sipName__what,
            sipName__type,
            sipName__vidx,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EE|J9", sipType_QgsGeometryCheck_ChangeWhat, &a0, sipType_QgsGeometryCheck_ChangeType, &a1, sipType_QgsVertexId, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::Change(a0,a1,*a2);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QgsGeometryCheck::Change* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QgsGeometryCheck_Change, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::Change(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QgsGeometryCheck_Change[] = {
    {(void *)slot_QgsGeometryCheck_Change___ne__, ne_slot},
    {(void *)slot_QgsGeometryCheck_Change___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


extern "C" {static PyObject *varget_QgsGeometryCheck_Change_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QgsGeometryCheck_Change_type(void *sipSelf, PyObject *, PyObject *)
{
     ::QgsGeometryCheck::ChangeType sipVal;
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSelf);

    sipVal = sipCpp->type;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QgsGeometryCheck_ChangeType);
}


extern "C" {static int varset_QgsGeometryCheck_Change_type(void *, PyObject *, PyObject *);}
static int varset_QgsGeometryCheck_Change_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QgsGeometryCheck::ChangeType sipVal;
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSelf);

    sipVal = ( ::QgsGeometryCheck::ChangeType)sipConvertToEnum(sipPy, sipType_QgsGeometryCheck_ChangeType);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QgsGeometryCheck_Change_vidx(void *, PyObject *, PyObject *);}
static PyObject *varget_QgsGeometryCheck_Change_vidx(void *sipSelf, PyObject *, PyObject *)
{
     ::QgsVertexId*sipVal;
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSelf);

    sipVal = &sipCpp->vidx;

    return sipConvertFromType(sipVal, sipType_QgsVertexId, NULL);
}


extern "C" {static int varset_QgsGeometryCheck_Change_vidx(void *, PyObject *, PyObject *);}
static int varset_QgsGeometryCheck_Change_vidx(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QgsVertexId*sipVal;
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QgsVertexId *>(sipForceConvertToType(sipPy,sipType_QgsVertexId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->vidx = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QgsGeometryCheck_Change_what(void *, PyObject *, PyObject *);}
static PyObject *varget_QgsGeometryCheck_Change_what(void *sipSelf, PyObject *, PyObject *)
{
     ::QgsGeometryCheck::ChangeWhat sipVal;
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSelf);

    sipVal = sipCpp->what;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QgsGeometryCheck_ChangeWhat);
}


extern "C" {static int varset_QgsGeometryCheck_Change_what(void *, PyObject *, PyObject *);}
static int varset_QgsGeometryCheck_Change_what(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QgsGeometryCheck::ChangeWhat sipVal;
     ::QgsGeometryCheck::Change *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Change *>(sipSelf);

    sipVal = ( ::QgsGeometryCheck::ChangeWhat)sipConvertToEnum(sipPy, sipType_QgsGeometryCheck_ChangeWhat);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->what = sipVal;

    return 0;
}

sipVariableDef variables_QgsGeometryCheck_Change[] = {
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QgsGeometryCheck_Change_type, (PyMethodDef *)varset_QgsGeometryCheck_Change_type, NULL, NULL},
    {InstanceVariable, sipName_vidx, (PyMethodDef *)varget_QgsGeometryCheck_Change_vidx, (PyMethodDef *)varset_QgsGeometryCheck_Change_vidx, NULL, NULL},
    {InstanceVariable, sipName_what, (PyMethodDef *)varget_QgsGeometryCheck_Change_what, (PyMethodDef *)varset_QgsGeometryCheck_Change_what, NULL, NULL},
};

PyDoc_STRVAR(doc_QgsGeometryCheck_Change, "QgsGeometryCheck.Change()\n"
"\n"
"QgsGeometryCheck.Change(_what: QgsGeometryCheck.ChangeWhat, _type: QgsGeometryCheck.ChangeType, _vidx: QgsVertexId = QgsVertexId())\n"
"Create a new Change\n"
"\n"
"QgsGeometryCheck.Change(QgsGeometryCheck.Change)");


static pyqt5ClassPluginDef plugin_QgsGeometryCheck_Change = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsGeometryCheck_Change = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsGeometryCheck__Change,
        {0},
        &plugin_QgsGeometryCheck_Change
    },
    {
        sipNameNr_Change,
        {21, 255, 0},
        0, 0,
        0, 0,
        3, variables_QgsGeometryCheck_Change,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsGeometryCheck_Change,
    -1,
    -1,
    0,
    slots_QgsGeometryCheck_Change,
    init_type_QgsGeometryCheck_Change,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsGeometryCheck_Change,
    assign_QgsGeometryCheck_Change,
    array_QgsGeometryCheck_Change,
    copy_QgsGeometryCheck_Change,
    release_QgsGeometryCheck_Change,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 4198 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 4202 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


extern "C" {static long slot_QgsGeometryCheck_Flags___hash__(PyObject *);}
static long slot_QgsGeometryCheck_Flags___hash__(PyObject *sipSelf)
{
     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 116 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QgsGeometryCheck::Flags::Int();
#line 4220 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QgsGeometryCheck_Flags___bool__(PyObject *);}
static int slot_QgsGeometryCheck_Flags___bool__(PyObject *sipSelf)
{
     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QgsGeometryCheck::Flags::Int() != 0);
#line 4245 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QgsGeometryCheck::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QgsGeometryCheck_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QgsGeometryCheck::Flags::Int() != a0->operator QgsGeometryCheck::Flags::Int());
#line 4275 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
            sipReleaseType(const_cast< ::QgsGeometryCheck::Flags *>(a0),sipType_QgsGeometryCheck_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, ne_slot, sipType_QgsGeometryCheck_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QgsGeometryCheck::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QgsGeometryCheck_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QgsGeometryCheck::Flags::Int() == a0->operator QgsGeometryCheck::Flags::Int());
#line 4311 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
            sipReleaseType(const_cast< ::QgsGeometryCheck::Flags *>(a0),sipType_QgsGeometryCheck_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, eq_slot, sipType_QgsGeometryCheck_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QgsGeometryCheck_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
        *sipCpp = QgsGeometryCheck::Flags(*sipCpp ^ a0);
#line 4350 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsGeometryCheck::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QgsGeometryCheck_Flags, &a0, &a0State, &a1))
        {
             ::QgsGeometryCheck::Flags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QgsGeometryCheck::Flags((*a0 ^ a1));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(a0,sipType_QgsGeometryCheck_Flags,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QgsGeometryCheck_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck_Flags,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, xor_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QgsGeometryCheck_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
        *sipCpp = QgsGeometryCheck::Flags(*sipCpp | a0);
#line 4435 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsGeometryCheck::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QgsGeometryCheck_Flags, &a0, &a0State, &a1))
        {
             ::QgsGeometryCheck::Flags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QgsGeometryCheck::Flags((*a0 | a1));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(a0,sipType_QgsGeometryCheck_Flags,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QgsGeometryCheck_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck_Flags,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, or_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QgsGeometryCheck_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp-> ::QgsGeometryCheck::Flags::operator&=(a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsGeometryCheck::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QgsGeometryCheck_Flags, &a0, &a0State, &a1))
        {
             ::QgsGeometryCheck::Flags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QgsGeometryCheck::Flags((*a0 & a1));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(a0,sipType_QgsGeometryCheck_Flags,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QgsGeometryCheck_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck_Flags,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__analysis, and_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___invert__(PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___invert__(PyObject *sipSelf)
{
     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;


    {
        {
             ::QgsGeometryCheck::Flags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QgsGeometryCheck::Flags(~(*sipCpp));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck_Flags,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QgsGeometryCheck_Flags___int__(PyObject *);}
static PyObject *slot_QgsGeometryCheck_Flags___int__(PyObject *sipSelf)
{
     ::QgsGeometryCheck::Flags *sipCpp = reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QgsGeometryCheck_Flags));

    if (!sipCpp)
        return 0;


    {
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = *sipCpp;
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QgsGeometryCheck_Flags(void *, int);}
static void release_QgsGeometryCheck_Flags(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QgsGeometryCheck_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QgsGeometryCheck_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QgsGeometryCheck::Flags *>(sipSrc);
}


extern "C" {static void *array_QgsGeometryCheck_Flags(SIP_SSIZE_T);}
static void *array_QgsGeometryCheck_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QgsGeometryCheck::Flags[sipNrElem];
}


extern "C" {static void *copy_QgsGeometryCheck_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QgsGeometryCheck_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QgsGeometryCheck::Flags(reinterpret_cast<const  ::QgsGeometryCheck::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QgsGeometryCheck_Flags(sipSimpleWrapper *);}
static void dealloc_QgsGeometryCheck_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsGeometryCheck_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QgsGeometryCheck_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QgsGeometryCheck_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QgsGeometryCheck::Flags *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::Flags();
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::Flags(a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QgsGeometryCheck::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QgsGeometryCheck_Flags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::Flags(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(const_cast< ::QgsGeometryCheck::Flags *>(a0),sipType_QgsGeometryCheck_Flags,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QgsGeometryCheck::Flags *>(a0),sipType_QgsGeometryCheck_Flags,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QgsGeometryCheck_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QgsGeometryCheck_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QgsGeometryCheck::Flags **sipCppPtr = reinterpret_cast< ::QgsGeometryCheck::Flags **>(sipCppPtrV);

#line 121 "/usr/share/sip/PyQt5/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QgsGeometryCheck::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QgsGeometryCheck_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QgsGeometryCheck_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QgsGeometryCheck_Flag)))
{
    *sipCppPtr = new QgsGeometryCheck::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QgsGeometryCheck::Flags *>(sipConvertToType(sipPy, sipType_QgsGeometryCheck_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 4806 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QgsGeometryCheck_Flags[] = {
    {(void *)slot_QgsGeometryCheck_Flags___hash__, hash_slot},
    {(void *)slot_QgsGeometryCheck_Flags___bool__, bool_slot},
    {(void *)slot_QgsGeometryCheck_Flags___ne__, ne_slot},
    {(void *)slot_QgsGeometryCheck_Flags___eq__, eq_slot},
    {(void *)slot_QgsGeometryCheck_Flags___ixor__, ixor_slot},
    {(void *)slot_QgsGeometryCheck_Flags___xor__, xor_slot},
    {(void *)slot_QgsGeometryCheck_Flags___ior__, ior_slot},
    {(void *)slot_QgsGeometryCheck_Flags___or__, or_slot},
    {(void *)slot_QgsGeometryCheck_Flags___iand__, iand_slot},
    {(void *)slot_QgsGeometryCheck_Flags___and__, and_slot},
    {(void *)slot_QgsGeometryCheck_Flags___invert__, invert_slot},
    {(void *)slot_QgsGeometryCheck_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QgsGeometryCheck_Flags, "\1QgsGeometryCheck.Flags()\n"
"QgsGeometryCheck.Flags(Union[QgsGeometryCheck.Flags, QgsGeometryCheck.Flag])\n"
"QgsGeometryCheck.Flags(QgsGeometryCheck.Flags)");


static pyqt5ClassPluginDef plugin_QgsGeometryCheck_Flags = {
    0,
    1,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsGeometryCheck_Flags = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsGeometryCheck__Flags,
        {0},
        &plugin_QgsGeometryCheck_Flags
    },
    {
        sipNameNr_Flags,
        {21, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsGeometryCheck_Flags,
    -1,
    -1,
    0,
    slots_QgsGeometryCheck_Flags,
    init_type_QgsGeometryCheck_Flags,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsGeometryCheck_Flags,
    assign_QgsGeometryCheck_Flags,
    array_QgsGeometryCheck_Flags,
    copy_QgsGeometryCheck_Flags,
    release_QgsGeometryCheck_Flags,
    0,
    convertTo_QgsGeometryCheck_Flags,
    0,
    0,
    0,
    0,
    0
};

#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 4894 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QgsGeometryCheck_LayerFeatureIds(void *, int);}
static void release_QgsGeometryCheck_LayerFeatureIds(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QgsGeometryCheck::LayerFeatureIds *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QgsGeometryCheck_LayerFeatureIds(void *, SIP_SSIZE_T, void *);}
static void assign_QgsGeometryCheck_LayerFeatureIds(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QgsGeometryCheck::LayerFeatureIds *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QgsGeometryCheck::LayerFeatureIds *>(sipSrc);
}


extern "C" {static void *array_QgsGeometryCheck_LayerFeatureIds(SIP_SSIZE_T);}
static void *array_QgsGeometryCheck_LayerFeatureIds(SIP_SSIZE_T sipNrElem)
{
    return new  ::QgsGeometryCheck::LayerFeatureIds[sipNrElem];
}


extern "C" {static void *copy_QgsGeometryCheck_LayerFeatureIds(const void *, SIP_SSIZE_T);}
static void *copy_QgsGeometryCheck_LayerFeatureIds(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QgsGeometryCheck::LayerFeatureIds(reinterpret_cast<const  ::QgsGeometryCheck::LayerFeatureIds *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QgsGeometryCheck_LayerFeatureIds(sipSimpleWrapper *);}
static void dealloc_QgsGeometryCheck_LayerFeatureIds(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsGeometryCheck_LayerFeatureIds(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QgsGeometryCheck_LayerFeatureIds(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QgsGeometryCheck_LayerFeatureIds(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QgsGeometryCheck::LayerFeatureIds *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::LayerFeatureIds();
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QgsGeometryCheck::LayerFeatureIds* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QgsGeometryCheck_LayerFeatureIds, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheck::LayerFeatureIds(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}

PyDoc_STRVAR(doc_QgsGeometryCheck_LayerFeatureIds, "\1QgsGeometryCheck.LayerFeatureIds()\n"
"QgsGeometryCheck.LayerFeatureIds(QgsGeometryCheck.LayerFeatureIds)");


static pyqt5ClassPluginDef plugin_QgsGeometryCheck_LayerFeatureIds = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsGeometryCheck_LayerFeatureIds = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsGeometryCheck__LayerFeatureIds,
        {0},
        &plugin_QgsGeometryCheck_LayerFeatureIds
    },
    {
        sipNameNr_LayerFeatureIds,
        {21, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsGeometryCheck_LayerFeatureIds,
    -1,
    -1,
    0,
    0,
    init_type_QgsGeometryCheck_LayerFeatureIds,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsGeometryCheck_LayerFeatureIds,
    assign_QgsGeometryCheck_LayerFeatureIds,
    array_QgsGeometryCheck_LayerFeatureIds,
    copy_QgsGeometryCheck_LayerFeatureIds,
    release_QgsGeometryCheck_LayerFeatureIds,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 21 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/processing/qgsnativealgorithms.sip"
#include "qgsnativealgorithms.h"
#line 5058 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 5062 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 5065 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtGui/qicon.sip"
#include <qicon.h>
#line 5068 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "core/auto_generated/processing/qgsprocessingalgorithm.sip"
#include "qgsprocessingalgorithm.h"
#line 5071 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5074 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 5077 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 2391 "core/auto_generated/processing/qgsprocessingparameters.sip"
#include "qgsprocessingparameters.h"
#line 5080 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "core/auto_generated/processing/qgsprocessingcontext.sip"
#include "qgsprocessingcontext.h"
#line 5083 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 36 "/usr/share/sip/PyQt5/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 5086 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 5089 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5092 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 247 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5095 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 235 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5098 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 38 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5101 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 30 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 5104 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5107 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5110 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 5113 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5116 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 5119 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 5122 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 5125 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


class sipQgsNativeAlgorithms : public  ::QgsNativeAlgorithms
{
public:
    sipQgsNativeAlgorithms( ::QObject*);
    virtual ~sipQgsNativeAlgorithms();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const  ::QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const  ::QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const  ::QMetaMethod&) const;
    bool sipProtect_addAlgorithm( ::QgsProcessingAlgorithm*);
    void sipProtectVirt_loadAlgorithms(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&);
    void connectNotify(const  ::QMetaMethod&);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QIcon icon() const;
     ::QString svgIconPath() const;
     ::QString id() const;
     ::QString helpId() const;
     ::QString name() const;
     ::QString longName() const;
     ::QString versionInfo() const;
    bool canBeActivated() const;
    bool isActive() const;
     ::QStringList supportedOutputRasterLayerExtensions() const;
     ::QStringList supportedOutputVectorLayerExtensions() const;
     ::QStringList supportedOutputTableExtensions() const;
    bool isSupportedOutputValue(const  ::QVariant&,const  ::QgsProcessingDestinationParameter*, ::QgsProcessingContext&, ::QString&) const;
     ::QString defaultVectorFileExtension(bool) const;
     ::QString defaultRasterFileExtension() const;
    bool supportsNonFileBasedOutput() const;
    bool load();
    void unload();
    void loadAlgorithms();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQgsNativeAlgorithms(const sipQgsNativeAlgorithms &);
    sipQgsNativeAlgorithms &operator = (const sipQgsNativeAlgorithms &);

    char sipPyMethods[26];
};

sipQgsNativeAlgorithms::sipQgsNativeAlgorithms( ::QObject*a0):  ::QgsNativeAlgorithms(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQgsNativeAlgorithms::~sipQgsNativeAlgorithms()
{
    sipInstanceDestroyed(sipPySelf);
}

const QMetaObject *sipQgsNativeAlgorithms::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip__analysis_qt_metaobject(sipPySelf,sipType_QgsNativeAlgorithms);

    return  ::QgsNativeAlgorithms::metaObject();
}

int sipQgsNativeAlgorithms::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QgsNativeAlgorithms::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip__analysis_qt_metacall(sipPySelf,sipType_QgsNativeAlgorithms,_c,_id,_a);

    return _id;
}

void *sipQgsNativeAlgorithms::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip__analysis_qt_metacast(sipPySelf, sipType_QgsNativeAlgorithms, _clname, &sipCpp) ? sipCpp :  ::QgsNativeAlgorithms::qt_metacast(_clname));
}

void sipQgsNativeAlgorithms::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::disconnectNotify(a0);
        return;
    }

    extern void sipVH__analysis_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH__analysis_2(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQgsNativeAlgorithms::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::connectNotify(a0);
        return;
    }

    extern void sipVH__analysis_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH__analysis_2(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQgsNativeAlgorithms::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::customEvent(a0);
        return;
    }

    extern void sipVH__analysis_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH__analysis_3(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQgsNativeAlgorithms::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::childEvent(a0);
        return;
    }

    extern void sipVH__analysis_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH__analysis_4(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQgsNativeAlgorithms::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::timerEvent(a0);
        return;
    }

    extern void sipVH__analysis_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH__analysis_5(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQgsNativeAlgorithms::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::eventFilter(a0,a1);

    extern bool sipVH__analysis_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH__analysis_6(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQgsNativeAlgorithms::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::event(a0);

    extern bool sipVH__analysis_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH__analysis_7(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIcon sipQgsNativeAlgorithms::icon() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_icon);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::icon();

    extern  ::QIcon sipVH__analysis_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_24(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsNativeAlgorithms::svgIconPath() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_svgIconPath);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::svgIconPath();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsNativeAlgorithms::id() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_id);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::id();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsNativeAlgorithms::helpId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_helpId);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::helpId();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsNativeAlgorithms::name() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_name);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::name();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsNativeAlgorithms::longName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_longName);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::longName();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsNativeAlgorithms::versionInfo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_versionInfo);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::versionInfo();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQgsNativeAlgorithms::canBeActivated() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_canBeActivated);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::canBeActivated();

    extern bool sipVH__analysis_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_8(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQgsNativeAlgorithms::isActive() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_isActive);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::isActive();

    extern bool sipVH__analysis_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_8(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QStringList sipQgsNativeAlgorithms::supportedOutputRasterLayerExtensions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_supportedOutputRasterLayerExtensions);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::supportedOutputRasterLayerExtensions();

    extern  ::QStringList sipVH__analysis_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_31(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QStringList sipQgsNativeAlgorithms::supportedOutputVectorLayerExtensions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_supportedOutputVectorLayerExtensions);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::supportedOutputVectorLayerExtensions();

    extern  ::QStringList sipVH__analysis_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_31(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QStringList sipQgsNativeAlgorithms::supportedOutputTableExtensions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_supportedOutputTableExtensions);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::supportedOutputTableExtensions();

    extern  ::QStringList sipVH__analysis_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_31(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQgsNativeAlgorithms::isSupportedOutputValue(const  ::QVariant& a0,const  ::QgsProcessingDestinationParameter*a1, ::QgsProcessingContext& a2, ::QString& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_isSupportedOutputValue);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::isSupportedOutputValue(a0,a1,a2,a3);

    extern bool sipVH__analysis_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&,const  ::QgsProcessingDestinationParameter*, ::QgsProcessingContext&, ::QString&);

    return sipVH__analysis_37(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QString sipQgsNativeAlgorithms::defaultVectorFileExtension(bool a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_defaultVectorFileExtension);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::defaultVectorFileExtension(a0);

    extern  ::QString sipVH__analysis_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH__analysis_36(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QString sipQgsNativeAlgorithms::defaultRasterFileExtension() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_defaultRasterFileExtension);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::defaultRasterFileExtension();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQgsNativeAlgorithms::supportsNonFileBasedOutput() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_supportsNonFileBasedOutput);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::supportsNonFileBasedOutput();

    extern bool sipVH__analysis_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_8(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQgsNativeAlgorithms::load()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_load);

    if (!sipMeth)
        return  ::QgsNativeAlgorithms::load();

    extern bool sipVH__analysis_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_8(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQgsNativeAlgorithms::unload()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_unload);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::unload();
        return;
    }

    extern void sipVH__analysis_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__analysis_35(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQgsNativeAlgorithms::loadAlgorithms()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_loadAlgorithms);

    if (!sipMeth)
    {
         ::QgsNativeAlgorithms::loadAlgorithms();
        return;
    }

    extern void sipVH__analysis_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__analysis_35(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QObject* sipQgsNativeAlgorithms::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipQgsNativeAlgorithms::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipQgsNativeAlgorithms::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQgsNativeAlgorithms::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipQgsNativeAlgorithms::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipQgsNativeAlgorithms::sipProtectVirt_connectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQgsNativeAlgorithms::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const  ::QMetaMethod& a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQgsNativeAlgorithms::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}

bool sipQgsNativeAlgorithms::sipProtect_isSignalConnected(const  ::QMetaMethod& a0) const
{
    return  ::QObject::isSignalConnected(a0);
}

bool sipQgsNativeAlgorithms::sipProtect_addAlgorithm( ::QgsProcessingAlgorithm*a0)
{
    return  ::QgsProcessingProvider::addAlgorithm(a0);
}

void sipQgsNativeAlgorithms::sipProtectVirt_loadAlgorithms(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::QgsNativeAlgorithms::loadAlgorithms() : loadAlgorithms());
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 560 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 5741 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_sender, doc_QgsNativeAlgorithms_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 591 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 5801 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_receivers, doc_QgsNativeAlgorithms_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_timerEvent, doc_QgsNativeAlgorithms_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_childEvent, doc_QgsNativeAlgorithms_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_customEvent, doc_QgsNativeAlgorithms_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QMetaMethod, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_connectNotify, doc_QgsNativeAlgorithms_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
        sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QMetaMethod, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_disconnectNotify, doc_QgsNativeAlgorithms_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_senderSignalIndex, doc_QgsNativeAlgorithms_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMetaMethod* a0;
        const sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_isSignalConnected, doc_QgsNativeAlgorithms_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_addAlgorithm, "addAlgorithm(self, algorithm: QgsProcessingAlgorithm) -> bool\n"
"Adds an ``algorithm`` to the provider. Ownership of the algorithm is transferred to the provider.");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_addAlgorithm(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_addAlgorithm(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsProcessingAlgorithm* a0;
        sipQgsNativeAlgorithms *sipCpp;

        static const char *sipKwdList[] = {
            sipName_algorithm,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp, sipType_QgsProcessingAlgorithm, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->sipProtect_addAlgorithm(a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_addAlgorithm, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_icon(PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QgsNativeAlgorithms *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QIcon((sipSelfWasArg ? sipCpp-> ::QgsNativeAlgorithms::icon() : sipCpp->icon()));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_icon, doc_QgsNativeAlgorithms_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_svgIconPath, "svgIconPath(self) -> str");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_svgIconPath(PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_svgIconPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QgsNativeAlgorithms *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QgsNativeAlgorithms::svgIconPath() : sipCpp->svgIconPath()));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_svgIconPath, doc_QgsNativeAlgorithms_svgIconPath);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_id, "id(self) -> str");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_id(PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QgsNativeAlgorithms *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QgsNativeAlgorithms::id() : sipCpp->id()));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_id, doc_QgsNativeAlgorithms_id);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_helpId, "helpId(self) -> str");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_helpId(PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_helpId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QgsNativeAlgorithms *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QgsNativeAlgorithms::helpId() : sipCpp->helpId()));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_helpId, doc_QgsNativeAlgorithms_helpId);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_name, "name(self) -> str");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_name(PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QgsNativeAlgorithms *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QgsNativeAlgorithms::name() : sipCpp->name()));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_name, doc_QgsNativeAlgorithms_name);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_supportsNonFileBasedOutput, "supportsNonFileBasedOutput(self) -> bool");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_supportsNonFileBasedOutput(PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_supportsNonFileBasedOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QgsNativeAlgorithms *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = (sipSelfWasArg ? sipCpp-> ::QgsNativeAlgorithms::supportsNonFileBasedOutput() : sipCpp->supportsNonFileBasedOutput());
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_supportsNonFileBasedOutput, doc_QgsNativeAlgorithms_supportsNonFileBasedOutput);

    return NULL;
}


PyDoc_STRVAR(doc_QgsNativeAlgorithms_loadAlgorithms, "loadAlgorithms(self)");

extern "C" {static PyObject *meth_QgsNativeAlgorithms_loadAlgorithms(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsNativeAlgorithms_loadAlgorithms(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipQgsNativeAlgorithms *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QgsNativeAlgorithms, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->sipProtectVirt_loadAlgorithms(sipSelfWasArg);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsNativeAlgorithms, sipName_loadAlgorithms, doc_QgsNativeAlgorithms_loadAlgorithms);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QgsNativeAlgorithms(void *, const sipTypeDef *);}
static void *cast_QgsNativeAlgorithms(void *sipCppV, const sipTypeDef *targetType)
{
     ::QgsNativeAlgorithms *sipCpp = reinterpret_cast< ::QgsNativeAlgorithms *>(sipCppV);

    if (targetType == sipType_QgsProcessingProvider)
        return static_cast< ::QgsProcessingProvider *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QgsNativeAlgorithms(void *, int);}
static void release_QgsNativeAlgorithms(void *sipCppV, int)
{
     ::QgsNativeAlgorithms *sipCpp = reinterpret_cast< ::QgsNativeAlgorithms *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QgsNativeAlgorithms(sipSimpleWrapper *);}
static void dealloc_QgsNativeAlgorithms(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQgsNativeAlgorithms *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsNativeAlgorithms(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QgsNativeAlgorithms(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QgsNativeAlgorithms(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQgsNativeAlgorithms *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new sipQgsNativeAlgorithms(a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QgsNativeAlgorithms[] = {{22, 7, 1}};


static PyMethodDef methods_QgsNativeAlgorithms[] = {
    {SIP_MLNAME_CAST(sipName_addAlgorithm), (PyCFunction)meth_QgsNativeAlgorithms_addAlgorithm, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QgsNativeAlgorithms_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QgsNativeAlgorithms_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QgsNativeAlgorithms_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QgsNativeAlgorithms_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_helpId), meth_QgsNativeAlgorithms_helpId, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_helpId)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QgsNativeAlgorithms_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_icon)},
    {SIP_MLNAME_CAST(sipName_id), meth_QgsNativeAlgorithms_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_id)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QgsNativeAlgorithms_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_loadAlgorithms), (PyCFunction)meth_QgsNativeAlgorithms_loadAlgorithms, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_loadAlgorithms)},
    {SIP_MLNAME_CAST(sipName_name), meth_QgsNativeAlgorithms_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_name)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QgsNativeAlgorithms_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QgsNativeAlgorithms_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QgsNativeAlgorithms_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsNonFileBasedOutput), meth_QgsNativeAlgorithms_supportsNonFileBasedOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_supportsNonFileBasedOutput)},
    {SIP_MLNAME_CAST(sipName_svgIconPath), meth_QgsNativeAlgorithms_svgIconPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsNativeAlgorithms_svgIconPath)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QgsNativeAlgorithms_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QgsNativeAlgorithms, "QgsNativeAlgorithms(parent: QObject = None)\n"
"Constructor for QgsNativeAlgorithms.\n"
"\n"
"Native c++ processing algorithm provider.\n"
"\n"
".. versionadded:: 3.0");


static pyqt5ClassPluginDef plugin_QgsNativeAlgorithms = {
    & ::QgsNativeAlgorithms::staticMetaObject,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsNativeAlgorithms = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsNativeAlgorithms,
        {0},
        &plugin_QgsNativeAlgorithms
    },
    {
        sipNameNr_QgsNativeAlgorithms,
        {0, 0, 1},
        17, methods_QgsNativeAlgorithms,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsNativeAlgorithms,
    -1,
    -1,
    supers_QgsNativeAlgorithms,
    0,
    init_type_QgsNativeAlgorithms,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsNativeAlgorithms,
    0,
    0,
    0,
    release_QgsNativeAlgorithms,
    cast_QgsNativeAlgorithms,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 29 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckfactory.sip"
#include "qgsgeometrycheckfactory.h"
#line 6616 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 6620 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 6623 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 305 "core/auto_generated/qgsvectorlayer.sip"
#include "qgsvectorlayer.h"
#line 6626 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 6629 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 6632 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 6635 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


PyDoc_STRVAR(doc_QgsGeometryCheckFactory_createGeometryCheck, "createGeometryCheck(self, context: QgsGeometryCheckContext, configuration: Dict[str, Any]) -> QgsGeometryCheck\n"
"Creates a new geometry check with ``context`` and ``configuration``.");

extern "C" {static PyObject *meth_QgsGeometryCheckFactory_createGeometryCheck(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckFactory_createGeometryCheck(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QgsGeometryCheckContext* a0;
        const  ::QVariantMap* a1;
        int a1State = 0;
        const  ::QgsGeometryCheckFactory *sipCpp;

        static const char *sipKwdList[] = {
            sipName_context,
            sipName_configuration,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1", &sipSelf, sipType_QgsGeometryCheckFactory, &sipCpp, sipType_QgsGeometryCheckContext, &a0, sipType_QMap_0100QString_0100QVariant,&a1, &a1State))
        {
             ::QgsGeometryCheck*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsGeometryCheckFactory, sipName_createGeometryCheck);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->createGeometryCheck(a0,*a1);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QMap_0100QString_0100QVariant,a1State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QMap_0100QString_0100QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckFactory, sipName_createGeometryCheck, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckFactory_id, "id(self) -> str\n"
"The unique id for this geometry check.");

extern "C" {static PyObject *meth_QgsGeometryCheckFactory_id(PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckFactory_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QgsGeometryCheckFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsGeometryCheckFactory, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsGeometryCheckFactory, sipName_id);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QString(sipCpp->id());
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckFactory, sipName_id, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckFactory_description, "description(self) -> str\n"
"A human readable description for this check.");

extern "C" {static PyObject *meth_QgsGeometryCheckFactory_description(PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckFactory_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QgsGeometryCheckFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsGeometryCheckFactory, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsGeometryCheckFactory, sipName_description);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QString(sipCpp->description());
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckFactory, sipName_description, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckFactory_isCompatible, "isCompatible(self, layer: QgsVectorLayer) -> bool\n"
"Checks if this check should be made available for ``layer``.");

extern "C" {static PyObject *meth_QgsGeometryCheckFactory_isCompatible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckFactory_isCompatible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QgsVectorLayer* a0;
        const  ::QgsGeometryCheckFactory *sipCpp;

        static const char *sipKwdList[] = {
            sipName_layer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_QgsGeometryCheckFactory, &sipCpp, sipType_QgsVectorLayer, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsGeometryCheckFactory, sipName_isCompatible);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->isCompatible(a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckFactory, sipName_isCompatible, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckFactory_flags, "flags(self) -> QgsGeometryCheck.Flags\n"
"Flags for this check.");

extern "C" {static PyObject *meth_QgsGeometryCheckFactory_flags(PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckFactory_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QgsGeometryCheckFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsGeometryCheckFactory, &sipCpp))
        {
             ::QgsGeometryCheck::Flags*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsGeometryCheckFactory, sipName_flags);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new  ::QgsGeometryCheck::Flags(sipCpp->flags());
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck_Flags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckFactory, sipName_flags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckFactory_checkType, "checkType(self) -> QgsGeometryCheck.CheckType\n"
"The type of this check.");

extern "C" {static PyObject *meth_QgsGeometryCheckFactory_checkType(PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckFactory_checkType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QgsGeometryCheckFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QgsGeometryCheckFactory, &sipCpp))
        {
             ::QgsGeometryCheck::CheckType sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsGeometryCheckFactory, sipName_checkType);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->checkType();
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QgsGeometryCheck_CheckType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckFactory, sipName_checkType, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QgsGeometryCheckFactory(void *, int);}
static void release_QgsGeometryCheckFactory(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QgsGeometryCheckFactory *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QgsGeometryCheckFactory(sipSimpleWrapper *);}
static void dealloc_QgsGeometryCheckFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsGeometryCheckFactory(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QgsGeometryCheckFactory[] = {
    {SIP_MLNAME_CAST(sipName_checkType), meth_QgsGeometryCheckFactory_checkType, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsGeometryCheckFactory_checkType)},
    {SIP_MLNAME_CAST(sipName_createGeometryCheck), (PyCFunction)meth_QgsGeometryCheckFactory_createGeometryCheck, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsGeometryCheckFactory_createGeometryCheck)},
    {SIP_MLNAME_CAST(sipName_description), meth_QgsGeometryCheckFactory_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsGeometryCheckFactory_description)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QgsGeometryCheckFactory_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsGeometryCheckFactory_flags)},
    {SIP_MLNAME_CAST(sipName_id), meth_QgsGeometryCheckFactory_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QgsGeometryCheckFactory_id)},
    {SIP_MLNAME_CAST(sipName_isCompatible), (PyCFunction)meth_QgsGeometryCheckFactory_isCompatible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsGeometryCheckFactory_isCompatible)}
};

PyDoc_STRVAR(doc_QgsGeometryCheckFactory, "\n"
"\n"
"\n"
"\n"
"A factory for geometry checks.\n"
"\n"
".. note::\n"
"\n"
"   This class is a technology preview and unstable API.\n"
"\n"
".. versionadded:: 3.4");


static pyqt5ClassPluginDef plugin_QgsGeometryCheckFactory = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsGeometryCheckFactory = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsGeometryCheckFactory,
        {0},
        &plugin_QgsGeometryCheckFactory
    },
    {
        sipNameNr_QgsGeometryCheckFactory,
        {0, 0, 1},
        6, methods_QgsGeometryCheckFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsGeometryCheckFactory,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsGeometryCheckFactory,
    0,
    0,
    0,
    release_QgsGeometryCheckFactory,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 30 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckregistry.sip"
#include "qgsgeometrycheckregistry.h"
#line 7044 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 29 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckfactory.sip"
#include "qgsgeometrycheckfactory.h"
#line 7048 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7051 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 305 "core/auto_generated/qgsvectorlayer.sip"
#include "qgsvectorlayer.h"
#line 7054 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 7057 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 7060 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 7063 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 7066 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 7069 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


PyDoc_STRVAR(doc_QgsGeometryCheckRegistry_geometryCheck, "geometryCheck(self, checkId: str, context: QgsGeometryCheckContext, geometryCheckConfig: Dict[str, Any]) -> QgsGeometryCheck\n"
"Create a new geometryCheck of type ``checkId``\n"
"Pass the ``context`` and ``geometryCheckConfiguration`` to the newly created check.\n"
"Ownership is transferred to the caller.\n"
"\n"
".. versionadded:: 3.4");

extern "C" {static PyObject *meth_QgsGeometryCheckRegistry_geometryCheck(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckRegistry_geometryCheck(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QgsGeometryCheckContext* a1;
        const  ::QVariantMap* a2;
        int a2State = 0;
         ::QgsGeometryCheckRegistry *sipCpp;

        static const char *sipKwdList[] = {
            sipName_checkId,
            sipName_context,
            sipName_geometryCheckConfig,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J8J1", &sipSelf, sipType_QgsGeometryCheckRegistry, &sipCpp, sipType_QString,&a0, &a0State, sipType_QgsGeometryCheckContext, &a1, sipType_QMap_0100QString_0100QVariant,&a2, &a2State))
        {
             ::QgsGeometryCheck*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = sipCpp->geometryCheck(*a0,a1,*a2);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariantMap *>(a2),sipType_QMap_0100QString_0100QVariant,a2State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariantMap *>(a2),sipType_QMap_0100QString_0100QVariant,a2State);

            return sipConvertFromNewType(sipRes,sipType_QgsGeometryCheck,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckRegistry, sipName_geometryCheck, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckRegistry_geometryCheckFactories, "geometryCheckFactories(self, layer: QgsVectorLayer, type: QgsGeometryCheck.CheckType, flags: Union[QgsGeometryCheck.Flags, QgsGeometryCheck.Flag] = 0) -> object\n"
"Returns all geometry check factories that are compatible with ``layer`` and have all of the ``flags`` set.\n"
"\n"
".. versionadded:: 3.4");

extern "C" {static PyObject *meth_QgsGeometryCheckRegistry_geometryCheckFactories(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckRegistry_geometryCheckFactories(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsVectorLayer* a0;
         ::QgsGeometryCheck::CheckType a1;
         ::QgsGeometryCheck::Flags a2def = 0;
         ::QgsGeometryCheck::Flags* a2 = &a2def;
        int a2State = 0;
        const  ::QgsGeometryCheckRegistry *sipCpp;

        static const char *sipKwdList[] = {
            sipName_layer,
            sipName_type,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8E|J1", &sipSelf, sipType_QgsGeometryCheckRegistry, &sipCpp, sipType_QgsVectorLayer, &a0, sipType_QgsGeometryCheck_CheckType, &a1, sipType_QgsGeometryCheck_Flags, &a2, &a2State))
        {
            QList< ::QgsGeometryCheckFactory*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new QList< ::QgsGeometryCheckFactory*>(sipCpp->geometryCheckFactories(a0,a1,*a2));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(a2,sipType_QgsGeometryCheck_Flags,a2State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QgsGeometryCheck_Flags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QgsGeometryCheckFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckRegistry, sipName_geometryCheckFactories, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_QgsGeometryCheckRegistry_registerGeometryCheck, "registerGeometryCheck(self, checkFactory: QgsGeometryCheckFactory)\n"
"Registers a new geometry check factory.\n"
"\n"
".. versionadded:: 3.4");

extern "C" {static PyObject *meth_QgsGeometryCheckRegistry_registerGeometryCheck(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsGeometryCheckRegistry_registerGeometryCheck(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QgsGeometryCheckFactory* a0;
         ::QgsGeometryCheckRegistry *sipCpp;

        static const char *sipKwdList[] = {
            sipName_checkFactory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_QgsGeometryCheckRegistry, &sipCpp, sipType_QgsGeometryCheckFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->registerGeometryCheck(a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsGeometryCheckRegistry, sipName_registerGeometryCheck, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QgsGeometryCheckRegistry(void *, int);}
static void release_QgsGeometryCheckRegistry(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QgsGeometryCheckRegistry *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QgsGeometryCheckRegistry(void *, SIP_SSIZE_T, void *);}
static void assign_QgsGeometryCheckRegistry(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QgsGeometryCheckRegistry *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QgsGeometryCheckRegistry *>(sipSrc);
}


extern "C" {static void *array_QgsGeometryCheckRegistry(SIP_SSIZE_T);}
static void *array_QgsGeometryCheckRegistry(SIP_SSIZE_T sipNrElem)
{
    return new  ::QgsGeometryCheckRegistry[sipNrElem];
}


extern "C" {static void *copy_QgsGeometryCheckRegistry(const void *, SIP_SSIZE_T);}
static void *copy_QgsGeometryCheckRegistry(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QgsGeometryCheckRegistry(reinterpret_cast<const  ::QgsGeometryCheckRegistry *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QgsGeometryCheckRegistry(sipSimpleWrapper *);}
static void dealloc_QgsGeometryCheckRegistry(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsGeometryCheckRegistry(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QgsGeometryCheckRegistry(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QgsGeometryCheckRegistry(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QgsGeometryCheckRegistry *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheckRegistry();
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QgsGeometryCheckRegistry* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QgsGeometryCheckRegistry, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new  ::QgsGeometryCheckRegistry(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QgsGeometryCheckRegistry[] = {
    {SIP_MLNAME_CAST(sipName_geometryCheck), (PyCFunction)meth_QgsGeometryCheckRegistry_geometryCheck, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsGeometryCheckRegistry_geometryCheck)},
    {SIP_MLNAME_CAST(sipName_geometryCheckFactories), (PyCFunction)meth_QgsGeometryCheckRegistry_geometryCheckFactories, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsGeometryCheckRegistry_geometryCheckFactories)},
    {SIP_MLNAME_CAST(sipName_registerGeometryCheck), (PyCFunction)meth_QgsGeometryCheckRegistry_registerGeometryCheck, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsGeometryCheckRegistry_registerGeometryCheck)}
};

PyDoc_STRVAR(doc_QgsGeometryCheckRegistry, "QgsGeometryCheckRegistry()\n"
"Constructor for QgsGeometryCheckRegistry. QgsGeometryCheckRegistry is not usually directly created, but rather accessed through\n"
":py:func:`QgsAnalysis.geometryCheckRegistry()`\n"
"\n"
"QgsGeometryCheckRegistry(QgsGeometryCheckRegistry)\n"
"\n"
"This class manages all known geometry check factories.\n"
"\n"
"QgsGeometryCheckRegistry is not usually directly created, but rather accessed through\n"
":py:func:`QgsAnalysis.geometryCheckRegistry()`\n"
"\n"
".. note::\n"
"\n"
"   This class is a technology preview and unstable API.\n"
"\n"
".. versionadded:: 3.4");


static pyqt5ClassPluginDef plugin_QgsGeometryCheckRegistry = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsGeometryCheckRegistry = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsGeometryCheckRegistry,
        {0},
        &plugin_QgsGeometryCheckRegistry
    },
    {
        sipNameNr_QgsGeometryCheckRegistry,
        {0, 0, 1},
        3, methods_QgsGeometryCheckRegistry,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsGeometryCheckRegistry,
    -1,
    -1,
    0,
    0,
    init_type_QgsGeometryCheckRegistry,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsGeometryCheckRegistry,
    assign_QgsGeometryCheckRegistry,
    array_QgsGeometryCheckRegistry,
    copy_QgsGeometryCheckRegistry,
    release_QgsGeometryCheckRegistry,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

#line 127 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgssinglegeometrycheck.sip"
#include "qgssinglegeometrycheck.h"
#line 7416 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"

#line 27 "/usr/share/sip/PyQt5/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 7420 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 7423 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 7426 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7429 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 28 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgssinglegeometrycheck.sip"
#include "qgssinglegeometrycheck.h"
#line 7432 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 45 "core/auto_generated/geometry/qgsgeometry.sip"
#include "qgsgeometry.h"
#line 7435 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 773 "core/conversions.sip"
#include <QMap>
#line 7438 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 26 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsfeaturepool.sip"
#include "qgsfeaturepool.h"
#line 7441 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 149 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7444 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 27 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheckerror.sip"
#include "qgsgeometrycheckerror.h"
#line 7447 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 36 "/usr/share/sip/PyQt5/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 7450 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 35 "core/auto_generated/qgsfeedback.sip"
#include "qgsfeedback.h"
#line 7453 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 7456 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 7459 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 109 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/auto_generated/vector/geometry_checker/qgsgeometrycheck.sip"
#include "qgsgeometrycheck.h"
#line 7462 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 1726 "core/conversions.sip"
#include <qgswkbtypes.h>
#line 7465 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 24 "core/auto_generated/geometry/qgswkbtypes.sip"
#include "qgswkbtypes.h"
#line 7468 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"
#line 305 "core/auto_generated/qgsvectorlayer.sip"
#include "qgsvectorlayer.h"
#line 7471 "/home/guangping/dev/cpp/GIT/QGIS/python/analysis/sip_analysispart0.cpp"


class sipQgsSingleGeometryCheck : public  ::QgsSingleGeometryCheck
{
public:
    sipQgsSingleGeometryCheck(const  ::QgsGeometryCheckContext*,const  ::QVariantMap&);
    sipQgsSingleGeometryCheck(const  ::QgsSingleGeometryCheck&);
    virtual ~sipQgsSingleGeometryCheck();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QList< ::QgsSingleGeometryCheckError*> processGeometry(const  ::QgsGeometry&) const;
    bool isCompatible( ::QgsVectorLayer*) const;
     ::QList< ::QgsWkbTypes::GeometryType> compatibleGeometryTypes() const;
     ::QgsGeometryCheck::Flags flags() const;
     ::QStringList resolutionMethods() const;
     ::QString description() const;
     ::QString id() const;
     ::QgsGeometryCheck::CheckType checkType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQgsSingleGeometryCheck(const sipQgsSingleGeometryCheck &);
    sipQgsSingleGeometryCheck &operator = (const sipQgsSingleGeometryCheck &);

    char sipPyMethods[8];
};

sipQgsSingleGeometryCheck::sipQgsSingleGeometryCheck(const  ::QgsGeometryCheckContext*a0,const  ::QVariantMap& a1):  ::QgsSingleGeometryCheck(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQgsSingleGeometryCheck::sipQgsSingleGeometryCheck(const  ::QgsSingleGeometryCheck& a0):  ::QgsSingleGeometryCheck(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQgsSingleGeometryCheck::~sipQgsSingleGeometryCheck()
{
    sipInstanceDestroyed(sipPySelf);
}

QList< ::QgsSingleGeometryCheckError*> sipQgsSingleGeometryCheck::processGeometry(const  ::QgsGeometry& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QgsSingleGeometryCheck,sipName_processGeometry);

    if (!sipMeth)
        return QList< ::QgsSingleGeometryCheckError*>();

    extern QList< ::QgsSingleGeometryCheckError*> sipVH__analysis_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QgsGeometry&);

    return sipVH__analysis_33(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQgsSingleGeometryCheck::isCompatible( ::QgsVectorLayer*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_isCompatible);

    if (!sipMeth)
        return  ::QgsSingleGeometryCheck::isCompatible(a0);

    extern bool sipVH__analysis_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QgsVectorLayer*);

    return sipVH__analysis_27(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QList< ::QgsWkbTypes::GeometryType> sipQgsSingleGeometryCheck::compatibleGeometryTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QgsSingleGeometryCheck,sipName_compatibleGeometryTypes);

    if (!sipMeth)
        return  ::QList< ::QgsWkbTypes::GeometryType>();

    extern  ::QList< ::QgsWkbTypes::GeometryType> sipVH__analysis_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_28(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QgsGeometryCheck::Flags sipQgsSingleGeometryCheck::flags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return  ::QgsSingleGeometryCheck::flags();

    extern  ::QgsGeometryCheck::Flags sipVH__analysis_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_29(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QStringList sipQgsSingleGeometryCheck::resolutionMethods() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QgsSingleGeometryCheck,sipName_resolutionMethods);

    if (!sipMeth)
        return  ::QStringList();

    extern  ::QStringList sipVH__analysis_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_31(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsSingleGeometryCheck::description() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QgsSingleGeometryCheck,sipName_description);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QString sipQgsSingleGeometryCheck::id() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QgsSingleGeometryCheck,sipName_id);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH__analysis_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_20(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QgsGeometryCheck::CheckType sipQgsSingleGeometryCheck::checkType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QgsSingleGeometryCheck,sipName_checkType);

    if (!sipMeth)
        return  ::QgsGeometryCheck::FeatureNodeCheck;

    extern  ::QgsGeometryCheck::CheckType sipVH__analysis_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__analysis_32(sipGILState, sipImportedVirtErrorHandlers__analysis_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QgsSingleGeometryCheck_collectErrors, "collectErrors(self, featurePools: object, errors: Iterable[QgsGeometryCheckError], messages: Iterable[str], feedback: QgsFeedback = None, ids: QgsGeometryCheck.LayerFeatureIds = QgsGeometryCheck.LayerFeatureIds())");

extern "C" {static PyObject *meth_QgsSingleGeometryCheck_collectErrors(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsSingleGeometryCheck_collectErrors(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMap< ::QString, ::QgsFeaturePool*>* a0;
        int a0State = 0;
        QList< ::QgsGeometryCheckError*>* a1;
        int a1State = 0;
         ::QStringList* a2;
        int a2State = 0;
         ::QgsFeedback* a3 = 0;
        const  ::QgsGeometryCheck::LayerFeatureIds& a4def = QgsGeometryCheck::LayerFeatureIds();
        const  ::QgsGeometryCheck::LayerFeatureIds* a4 = &a4def;
        const  ::QgsSingleGeometryCheck *sipCpp;

        static const char *sipKwdList[] = {
            sipName_featurePools,
            sipName_errors,
            sipName_messages,
            sipName_feedback,
            sipName_ids,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1J1|J8J9", &sipSelf, sipType_QgsSingleGeometryCheck, &sipCpp, sipType_QMap_0100QString_0101QgsFeaturePool,&a0, &a0State, sipType_QList_0101QgsGeometryCheckError,&a1, &a1State, sipType_QStringList,&a2, &a2State, sipType_QgsFeedback, &a3, sipType_QgsGeometryCheck_LayerFeatureIds, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp->collectErrors(*a0,*a1,*a2,a3,*a4);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(const_cast<QMap< ::QString, ::QgsFeaturePool*> *>(a0),sipType_QMap_0100QString_0101QgsFeaturePool,a0State);
            sipReleaseType(a1,sipType_QList_0101QgsGeometryCheckError,a1State);
            sipReleaseType(a2,sipType_QStringList,a2State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QMap< ::QString, ::QgsFeaturePool*> *>(a0),sipType_QMap_0100QString_0101QgsFeaturePool,a0State);
            sipReleaseType(a1,sipType_QList_0101QgsGeometryCheckError,a1State);
            sipReleaseType(a2,sipType_QStringList,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsSingleGeometryCheck, sipName_collectErrors, doc_QgsSingleGeometryCheck_collectErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QgsSingleGeometryCheck_processGeometry, "processGeometry(self, geometry: QgsGeometry) -> object\n"
"Check the ``geometry`` for errors. It may make use of ``configuration`` options.\n"
"\n"
"Returns a list of QgsSingleGeometryCheckErrors, ownership is transferred to the caller.\n"
"An empty list is returned for geometries without errors.\n"
"\n"
".. versionadded:: 3.4");

extern "C" {static PyObject *meth_QgsSingleGeometryCheck_processGeometry(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QgsSingleGeometryCheck_processGeometry(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QgsGeometry* a0;
        const  ::QgsSingleGeometryCheck *sipCpp;

        static const char *sipKwdList[] = {
            sipName_geometry,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_QgsSingleGeometryCheck, &sipCpp, sipType_QgsGeometry, &a0))
        {
            QList< ::QgsSingleGeometryCheckError*>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QgsSingleGeometryCheck, sipName_processGeometry);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipRes = new QList< ::QgsSingleGeometryCheckError*>(sipCpp->processGeometry(*a0));
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QgsSingleGeometryCheckError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QgsSingleGeometryCheck, sipName_processGeometry, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QgsSingleGeometryCheck(void *, const sipTypeDef *);}
static void *cast_QgsSingleGeometryCheck(void *sipCppV, const sipTypeDef *targetType)
{
     ::QgsSingleGeometryCheck *sipCpp = reinterpret_cast< ::QgsSingleGeometryCheck *>(sipCppV);

    if (targetType == sipType_QgsGeometryCheck)
        return static_cast< ::QgsGeometryCheck *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QgsSingleGeometryCheck(void *, int);}
static void release_QgsSingleGeometryCheck(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQgsSingleGeometryCheck *>(sipCppV);
    else
        delete reinterpret_cast< ::QgsSingleGeometryCheck *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QgsSingleGeometryCheck(sipSimpleWrapper *);}
static void dealloc_QgsSingleGeometryCheck(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQgsSingleGeometryCheck *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QgsSingleGeometryCheck(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QgsSingleGeometryCheck(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QgsSingleGeometryCheck(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQgsSingleGeometryCheck *sipCpp = 0;

    {
        const  ::QgsGeometryCheckContext* a0;
        const  ::QVariantMap* a1;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_context,
            sipName_configuration,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J1", sipType_QgsGeometryCheckContext, &a0, sipType_QMap_0100QString_0100QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new sipQgsSingleGeometryCheck(a0,*a1);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QMap_0100QString_0100QVariant,a1State);
                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariantMap *>(a1),sipType_QMap_0100QString_0100QVariant,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QgsSingleGeometryCheck* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QgsSingleGeometryCheck, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            sipCpp = new sipQgsSingleGeometryCheck(*a0);
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QgsSingleGeometryCheck[] = {{21, 255, 1}};


static PyMethodDef methods_QgsSingleGeometryCheck[] = {
    {SIP_MLNAME_CAST(sipName_collectErrors), (PyCFunction)meth_QgsSingleGeometryCheck_collectErrors, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsSingleGeometryCheck_collectErrors)},
    {SIP_MLNAME_CAST(sipName_processGeometry), (PyCFunction)meth_QgsSingleGeometryCheck_processGeometry, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QgsSingleGeometryCheck_processGeometry)}
};

PyDoc_STRVAR(doc_QgsSingleGeometryCheck, "QgsSingleGeometryCheck(context: QgsGeometryCheckContext, configuration: Dict[str, Any])\n"
"Creates a new single geometry check.\n"
"\n"
"QgsSingleGeometryCheck(QgsSingleGeometryCheck)\n"
"\n"
"\n"
"Base class for geometry checks for a single geometry without any context of the layer or other layers in the project.\n"
"Classic examples are validity checks like self-intersection.\n"
"\n"
"Subclasses need to implement the processGeometry method.\n"
"\n"
".. versionadded:: 3.4");


static pyqt5ClassPluginDef plugin_QgsSingleGeometryCheck = {
    0,
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef__analysis_QgsSingleGeometryCheck = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QgsSingleGeometryCheck,
        {0},
        &plugin_QgsSingleGeometryCheck
    },
    {
        sipNameNr_QgsSingleGeometryCheck,
        {0, 0, 1},
        2, methods_QgsSingleGeometryCheck,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QgsSingleGeometryCheck,
    -1,
    -1,
    supers_QgsSingleGeometryCheck,
    0,
    init_type_QgsSingleGeometryCheck,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QgsSingleGeometryCheck,
    0,
    0,
    0,
    release_QgsSingleGeometryCheck,
    cast_QgsSingleGeometryCheck,
    0,
    0,
    0,
    0,
    0,
    0
};
