#include "qgsexpression.h"

QHash<QString, QgsExpression::Help> QgsExpression::sFunctionHelpTexts;

void QgsExpression::initFunctionHelp()
{
  if( !sFunctionHelpTexts.isEmpty() )
    return;

  sFunctionHelpTexts.insert( "$area",
    Help( "$area", tr( "function" ), tr( "Returns the area of the current feature. The area calculated by this function respects both the current project's ellipsoid setting and area unit settings. For example, if an ellipsoid has been set for the project then the calculated area will be ellipsoidal, and if no ellipsoid is set then the calculated area will be planimetric." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$area" ), tr( "Returns the area of the current feature. The area calculated by this function respects both the current project's ellipsoid setting and area unit settings. For example, if an ellipsoid has been set for the project then the calculated area will be ellipsoidal, and if no ellipsoid is set then the calculated area will be planimetric." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$area" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$atlasfeature",
    Help( "$atlasfeature", tr( "function" ), tr( "In atlas generation, returns the current feature that is iterated over on the coverage layer. This can be used with the 'attribute' function to return attribute values from the current atlas feature." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$atlasfeature" ), tr( "In atlas generation, returns the current feature that is iterated over on the coverage layer. This can be used with the 'attribute' function to return attribute values from the current atlas feature." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "attribute( $atlasfeature, 'name' )" ), tr( "value stored in 'name' attribute for the current atlas feature" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$atlasfeatureid",
    Help( "$atlasfeatureid", tr( "function" ), tr( "Returns the feature id of the current row while using atlas. This enables you to use features of atlas in rules and for example show or hide features based on their id." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$atlasfeatureid" ), tr( "Returns the feature id of the current row while using atlas. This enables you to use features of atlas in rules and for example show or hide features based on their id." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$atlasfeatureid = $id" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$atlasgeometry",
    Help( "$atlasgeometry", tr( "function" ), tr( "Returns the geometry of the current feature iterated in atlas. Can be used for rule based display of geometry when using atlas. For example to only show geometries of other layers when their geometry intersects the iterated geometry of features using atlas." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$atlasgeometry" ), tr( "Returns the geometry of the current feature iterated in atlas. Can be used for rule based display of geometry when using atlas. For example to only show geometries of other layers when their geometry intersects the iterated geometry of features using atlas." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "intersects( $atlasgeometry, $geometry )" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$currentfeature",
    Help( "$currentfeature", tr( "function" ), tr( "Returns the current feature being evaluated. This can be used with the 'attribute' function to evaluate attribute values from the current feature." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$currentfeature" ), tr( "Returns the current feature being evaluated. This can be used with the 'attribute' function to evaluate attribute values from the current feature." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "attribute( $currentfeature, 'name' )" ), tr( "value stored in 'name' attribute for the current feature" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$feature",
    Help( "$feature", tr( "function" ), tr( "In atlas generation, returns the current feature number that is iterated over on the coverage layer." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$feature" ), tr( "In atlas generation, returns the current feature number that is iterated over on the coverage layer." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$feature" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$geometry",
    Help( "$geometry", tr( "function" ), tr( "Returns the geometry of the current feature. Can be used for processing with other functions." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$geometry" ), tr( "Returns the geometry of the current feature. Can be used for processing with other functions." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geomToWKT( $geometry )" ), tr( "POINT(6 50)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$id",
    Help( "$id", tr( "function" ), tr( "Returns the feature id of the current row." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$id" ), tr( "Returns the feature id of the current row." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$id" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$length",
    Help( "$length", tr( "function" ), tr( "Returns the length of a linestring. If you need the length of a border of a polygon, use $perimeter instead. The length calculated by this function respects both the current project's ellipsoid setting and distance unit settings. For example, if an ellipsoid has been set for the project then the calculated length will be ellipsoidal, and if no ellipsoid is set then the calculated length will be planimetric." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$length" ), tr( "Returns the length of a linestring. If you need the length of a border of a polygon, use $perimeter instead. The length calculated by this function respects both the current project's ellipsoid setting and distance unit settings. For example, if an ellipsoid has been set for the project then the calculated length will be ellipsoidal, and if no ellipsoid is set then the calculated length will be planimetric." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$length" ), tr( "42.4711" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$map",
    Help( "$map", tr( "function" ), tr( "Returns the id of the current map item if the map is being drawn in a composition, or \"canvas\" if the map is being drawn within the main QGIS window." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$map" ), tr( "Returns the id of the current map item if the map is being drawn in a composition, or \"canvas\" if the map is being drawn within the main QGIS window." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$map" ), tr( "\"overview_map\"" ), tr( "" ) )
            << HelpExample( tr( "$map" ), tr( "\"canvas\"" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$numfeatures",
    Help( "$numfeatures", tr( "function" ), tr( "In atlas generation, returns the total number of features within the coverage layer." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$numfeatures" ), tr( "In atlas generation, returns the total number of features within the coverage layer." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$numfeatures" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$numpages",
    Help( "$numpages", tr( "function" ), tr( "Returns the total number of pages in the composition." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$numpages" ), tr( "Returns the total number of pages in the composition." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$numpages" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$page",
    Help( "$page", tr( "function" ), tr( "Returns the current page number within a composition." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$page" ), tr( "Returns the current page number within a composition." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$page" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$perimeter",
    Help( "$perimeter", tr( "function" ), tr( "Returns the perimeter length of the current feature. The perimeter calculated by this function respects both the current project's ellipsoid setting and distance unit settings. For example, if an ellipsoid has been set for the project then the calculated perimeter will be ellipsoidal, and if no ellipsoid is set then the calculated perimeter will be planimetric." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$perimeter" ), tr( "Returns the perimeter length of the current feature. The perimeter calculated by this function respects both the current project's ellipsoid setting and distance unit settings. For example, if an ellipsoid has been set for the project then the calculated perimeter will be ellipsoidal, and if no ellipsoid is set then the calculated perimeter will be planimetric." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$perimeter" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$rownum",
    Help( "$rownum", tr( "function" ), tr( "Returns the number of the current row." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$rownum" ), tr( "Returns the number of the current row." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$rownum" ), tr( "4711" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$scale",
    Help( "$scale", tr( "function" ), tr( "Returns the current scale denominator of the map canvas.<br><br>Note: This function is only available in some contexts and will be 0 otherwise." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$scale" ), tr( "Returns the current scale denominator of the map canvas.<br><br>Note: This function is only available in some contexts and will be 0 otherwise." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$scale" ), tr( "10000" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$x",
    Help( "$x", tr( "function" ), tr( "Returns the x coordinate of the current feature." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$x" ), tr( "Returns the x coordinate of the current feature." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$x" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$x_at",
    Help( "$x_at", tr( "function" ), tr( "Retrieves a x coordinate of the current feature's geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$x_at" ), tr( "Retrieves a x coordinate of the current feature's geometry." ),
          QList<HelpArg>()
              << HelpArg( "i", tr( "index of point of a line (indices start at 0; negative values apply from the last index, starting at -1)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$x_at(1)" ), tr( "5" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$y",
    Help( "$y", tr( "function" ), tr( "Returns the y coordinate of the current feature." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$y" ), tr( "Returns the y coordinate of the current feature." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$y" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "$y_at",
    Help( "$y_at", tr( "function" ), tr( "Retrieves a y coordinate of the current feature's geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "$y_at" ), tr( "Retrieves a y coordinate of the current feature's geometry." ),
          QList<HelpArg>()
              << HelpArg( "i", tr( "index of point of a line (indices start at 0; negative values apply from the last index, starting at -1)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "$y_at(1)" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "AND",
    Help( "AND", tr( "operator" ), tr( "Returns 1 when condition a and b are true." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "AND" ), tr( "Returns 1 when condition a and b are true." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "TRUE AND TRUE" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "TRUE AND FALSE" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "4 = 2+2 AND 1 = 1" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 = 2+2 AND 1 = 2" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "Aggregates",
    Help( "Aggregates", tr( "group" ), tr( "Contains functions which aggregate values over layers and fields." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Aggregates" ), tr( "Contains functions which aggregate values over layers and fields." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Arrays",
    Help( "Arrays", tr( "group" ), tr( "This group contains expression functions for the creation and manipulation of arrays (also known as list data structures). The order of values within the array matters, in contrary to the 'map' data structure, where the order of key-value pairs is irrelevant and values are identified by their keys." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Arrays" ), tr( "This group contains expression functions for the creation and manipulation of arrays (also known as list data structures). The order of values within the array matters, in contrary to the 'map' data structure, where the order of key-value pairs is irrelevant and values are identified by their keys." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "CASE",
    Help( "CASE", tr( "expression" ), tr( "<pre><br>CASE<br>WHEN <i>condition</i> THEN <i>result</i><br>[ …n ]<br>[ ELSE <i>result</i> ]<br>END<br></pre>[ ] marks optional components<br><h4>Arguments</h4><br><i>  WHEN condition</i> - The condition expression to evaluate. <br><br><i>  THEN result</i> - If <i>condition</i> evaluates to True then <i>result</i> is evaluated and returned. <br><br><i>  ELSE result</i> - If none of the above conditions evaluated to True then <i>result</i> is evaluated and returned.<br><br><h4>Example</h4><pre>CASE<br>WHEN <i>\"column\" IS NULL</i> THEN <i>'None'</i><br>END</pre>" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "CASE" ), tr( "<pre><br>CASE<br>WHEN <i>condition</i> THEN <i>result</i><br>[ …n ]<br>[ ELSE <i>result</i> ]<br>END<br></pre>[ ] marks optional components<br><h4>Arguments</h4><br><i>  WHEN condition</i> - The condition expression to evaluate. <br><br><i>  THEN result</i> - If <i>condition</i> evaluates to True then <i>result</i> is evaluated and returned. <br><br><i>  ELSE result</i> - If none of the above conditions evaluated to True then <i>result</i> is evaluated and returned.<br><br><h4>Example</h4><pre>CASE<br>WHEN <i>\"column\" IS NULL</i> THEN <i>'None'</i><br>END</pre>" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Color",
    Help( "Color", tr( "group" ), tr( "This group contains functions for manipulating colors" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Color" ), tr( "This group contains functions for manipulating colors" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Conditionals",
    Help( "Conditionals", tr( "group" ), tr( "This group contains functions to handle conditional checks in expressions." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Conditionals" ), tr( "This group contains functions to handle conditional checks in expressions." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Conditions",
    Help( "Conditions", tr( "group" ), tr( "This group contains functions that operate on condition." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Conditions" ), tr( "This group contains functions that operate on condition." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Conversions",
    Help( "Conversions", tr( "group" ), tr( "This group contains functions to convert on data type to another e.g string to integer, integer to string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Conversions" ), tr( "This group contains functions to convert on data type to another e.g string to integer, integer to string." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Custom",
    Help( "Custom", tr( "group" ), tr( "This group contains custom user-created Python functions." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Custom" ), tr( "This group contains custom user-created Python functions." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Date and Time",
    Help( "Date and Time", tr( "group" ), tr( "This group contains functions for handling date and time data." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Date and Time" ), tr( "This group contains functions for handling date and time data." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Field",
    Help( "Field", tr( "group" ), tr( "Double-click to add field name to expression string.<br>Right-Click on field name to open context menu sample value loading options." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Field" ), tr( "Double-click to add field name to expression string.<br>Right-Click on field name to open context menu sample value loading options." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>(),
      tr( "Loading field values from WFS layers isn't supported, before the layer is actually inserted, ie. when building queries." )
       )
      )
    );

  sFunctionHelpTexts.insert( "Fields and Values",
    Help( "Fields and Values", tr( "group" ), tr( "Contains a list of fields from the layer.  Sample values can also be accessed via right-click.<br>Select the field name from the list then right-click to access context menu with options to load sample values from the selected field." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Fields and Values" ), tr( "Contains a list of fields from the layer.  Sample values can also be accessed via right-click.<br>Select the field name from the list then right-click to access context menu with options to load sample values from the selected field." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>(),
      tr( "Loading field values from WFS layers isn't supported, before the layer is actually inserted, ie. when building queries." )
       )
      )
    );

  sFunctionHelpTexts.insert( "Fuzzy Matching",
    Help( "Fuzzy Matching", tr( "group" ), tr( "This group contains functions for fuzzy comparisons between values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Fuzzy Matching" ), tr( "This group contains functions for fuzzy comparisons between values." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "General",
    Help( "General", tr( "group" ), tr( "This group contains general assorted functions." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "General" ), tr( "This group contains general assorted functions." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "GeometryGroup",
    Help( "GeometryGroup", tr( "group" ), tr( "This group contains functions that operate on geometry objects e.g length, area." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "GeometryGroup" ), tr( "This group contains functions that operate on geometry objects e.g length, area." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "ILIKE",
    Help( "ILIKE", tr( "operator" ), tr( "Returns 1 if the first parameter matches case-insensitive the supplied pattern. LIKE can be used instead of ILIKE to make the match case-sensitive. Works with numbers also." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "ILIKE" ), tr( "Returns 1 if the first parameter matches case-insensitive the supplied pattern. LIKE can be used instead of ILIKE to make the match case-sensitive. Works with numbers also." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'A' ILIKE 'A'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'A' ILIKE 'a'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'A' ILIKE 'B'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABC' ILIKE 'b'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABC' ILIKE 'B'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABC' ILIKE '_b_'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABC' ILIKE '_B_'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' ILIKE '_b_'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' ILIKE '_B_'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' ILIKE '_b%'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' ILIKE '_B%'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' ILIKE '%b%'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' ILIKE '%B%'" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "IN",
    Help( "IN", tr( "operator" ), tr( "Returns 1 if value is found within a list of values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "IN" ), tr( "Returns 1 if value is found within a list of values." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'A' IN ('A','B')" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'A' IN ('C','B')" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "IS",
    Help( "IS", tr( "operator" ), tr( "Returns 1 if a is the same as b." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "IS" ), tr( "Returns 1 if a is the same as b." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'A' IS 'A'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'A' IS 'a'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "4 IS 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 IS 2+2" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 IS 2" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "$geometry IS NULL" ), tr( "0, if your geometry is not NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "IS NOT",
    Help( "IS NOT", tr( "operator" ), tr( "Returns 1 if a is not the same as b." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "IS NOT" ), tr( "Returns 1 if a is not the same as b." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'a' IS NOT 'b'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'a' IS NOT 'a'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "4 IS NOT 2+2" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "LIKE",
    Help( "LIKE", tr( "operator" ), tr( "Returns 1 if the first parameter matches the supplied pattern. Works with numbers also." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "LIKE" ), tr( "Returns 1 if the first parameter matches the supplied pattern. Works with numbers also." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'A' LIKE 'A'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'A' LIKE 'a'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'A' LIKE 'B'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABC' LIKE 'B'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABC' LIKE '_B_'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' LIKE '_B_'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' LIKE '_B%'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'ABCD' LIKE '%B%'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'1%' LIKE '1\\%'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'1_' LIKE '1\\%'" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "Map Layers",
    Help( "Map Layers", tr( "group" ), tr( "Contains a list of map layers available in the current project." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Map Layers" ), tr( "Contains a list of map layers available in the current project." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Maps",
    Help( "Maps", tr( "group" ), tr( "This group contains expression functions for the creation and manipulation of 'map' data structures (also known as dictionary objects, key-value pairs, or associative arrays). One can assign values to given keys. The order of the key-value pairs in the map object is not relevant." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Maps" ), tr( "This group contains expression functions for the creation and manipulation of 'map' data structures (also known as dictionary objects, key-value pairs, or associative arrays). One can assign values to given keys. The order of the key-value pairs in the map object is not relevant." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Math",
    Help( "Math", tr( "group" ), tr( "This group contains math functions e.g square root, sin and cos" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Math" ), tr( "This group contains math functions e.g square root, sin and cos" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "NOT",
    Help( "NOT", tr( "operator" ), tr( "Negates a condition." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "NOT" ), tr( "Negates a condition." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "NOT 1" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "NOT 0" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "NULL",
    Help( "NULL", tr( "value" ), tr( "Equates to a null value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "NULL" ), tr( "Equates to a null value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "NULL" ), tr( "a null value" ), tr( "" ) ),
      tr( "To test for NULL use an <pre>IS NULL</pre> or <pre>IS NOT NULL</pre> expression." )
       )
      )
    );

  sFunctionHelpTexts.insert( "OR",
    Help( "OR", tr( "operator" ), tr( "Returns 1 when condition a or b is true." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "OR" ), tr( "Returns 1 when condition a or b is true." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "4 = 2+2 OR 1 = 1" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 = 2+2 OR 1 = 2" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 = 2   OR 1 = 2" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "Operators",
    Help( "Operators", tr( "group" ), tr( "This group contains operators e.g + - *" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Operators" ), tr( "This group contains operators e.g + - *" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Recent (Selection)",
    Help( "Recent (Selection)", tr( "group" ), tr( "This group contains recently used expressions." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Recent (Selection)" ), tr( "This group contains recently used expressions." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Record",
    Help( "Record", tr( "group" ), tr( "This group contains functions that operate on record identifiers." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Record" ), tr( "This group contains functions that operate on record identifiers." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Relations",
    Help( "Relations", tr( "group" ), tr( "Contains a list of relations available in the current project." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Relations" ), tr( "Contains a list of relations available in the current project." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "String",
    Help( "String", tr( "group" ), tr( "This group contains functions that operate on strings e.g replace, convert to upper case." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "String" ), tr( "This group contains functions that operate on strings e.g replace, convert to upper case." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "Variables",
    Help( "Variables", tr( "group" ), tr( "This group contains dynamic variables which can be inserted into your expressions." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Variables" ), tr( "This group contains dynamic variables which can be inserted into your expressions." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
       )
      )
    );

  sFunctionHelpTexts.insert( "abs",
    Help( "abs", tr( "function" ), tr( "Returns the absolute value of a number." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "abs" ), tr( "Returns the absolute value of a number." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "a number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "abs(-2)" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "acos",
    Help( "acos", tr( "function" ), tr( "Returns the inverse cosine of a value in radians." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "acos" ), tr( "Returns the inverse cosine of a value in radians." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "cosine of an angle in radians" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "acos(0.5)" ), tr( "1.0471975511966" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "age",
    Help( "age", tr( "function" ), tr( "Returns the difference between two dates or datetimes.<br>The difference is returned as a <code>Interval</code> and needs to be used with one of the following functions in order to extract useful information:<br /><ul><li><code>year</code><li><code>month</code><li><code>week</code><li><code>day</code><li><code>hour</code><li><code>minute</code><li><code>second</code></ul>" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "age" ), tr( "Returns the difference between two dates or datetimes.<br>The difference is returned as a <code>Interval</code> and needs to be used with one of the following functions in order to extract useful information:<br /><ul><li><code>year</code><li><code>month</code><li><code>week</code><li><code>day</code><li><code>hour</code><li><code>minute</code><li><code>second</code></ul>" ),
          QList<HelpArg>()
              << HelpArg( "datetime1", tr( "a string, date or datetime representing the later date" ), false, false, false, "" )
              << HelpArg( "datetime2", tr( "a string, date or datetime representing the earlier date" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "age('2012-05-12','2012-05-2')" ), tr( "interval" ), tr( "use <code>day</code> to extract number of days" ) )
            << HelpExample( tr( "day(age('2012-05-12','2012-05-2'))" ), tr( "10" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "aggregate",
    Help( "aggregate", tr( "function" ), tr( "Returns an aggregate value calculated using features from another layer." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "aggregate" ), tr( "Returns an aggregate value calculated using features from another layer." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "a string, representing either a layer name or layer ID" ), false, false, false, "" )
              << HelpArg( "aggregate", tr( "a string corresponding to the aggregate to calculate. Valid options are:<br /><ul><li>count</li><li>count_distinct</li><li>count_missing</li><li>min</li><li>max</li><li>sum</li><li>mean</li><li>median</li><li>stdev</li><li>stdevsample</li><li>range</li><li>minority</li><li>majority</li><li>q1: first quartile</li><li>q3: third quartile</li><li>iqr: inter quartile range</li><li>min_length: minimum string length</li><li>max_length: maximum string length</li><li>concatenate: join strings with a concatenator</li><li>collect: create an aggregated multipart geometry</li></ul>" ), false, false, false, "" )
              << HelpArg( "expression", tr( "sub expression or field name to aggregate" ), false, false, false, "" )
              << HelpArg( "filter", tr( "optional filter expression to limit the features used for calculating the aggregate. Fields and geometry are from the features on the joined layer. The source feature can be accessed with the variable @parent." ), false, false, true, "" )
              << HelpArg( "concatenator", tr( "optional string to use to join values for 'concatenate' aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "aggregate(layer:='rail_stations',aggregate:='sum',expression:=\"passengers\")" ), tr( "sum of all values from the passengers field in the rail_stations layer" ), tr( "" ) )
            << HelpExample( tr( "aggregate('rail_stations','sum', \"passengers\"/7)" ), tr( "calculates a daily average of \"passengers\" by dividing the \"passengers\" field by 7 before summing the values" ), tr( "" ) )
            << HelpExample( tr( "aggregate(layer:='rail_stations',aggregate:='sum',expression:=\"passengers\",filter:=\"class\">3)" ), tr( "sums up all values from the \"passengers\" field from features where the \"class\" attribute is greater than 3 only" ), tr( "" ) )
            << HelpExample( tr( "aggregate(layer:='rail_stations',aggregate:='concatenate', expression:=\"name\", concatenator:=',')" ), tr( "comma separated list of the name field for all features in the rail_stations layer" ), tr( "" ) )
            << HelpExample( tr( "aggregate(layer:='countries', aggregate:='max', expression:=\"code\", filter:=intersects( $geometry, geometry(@parent) ) )" ), tr( "The country code of an intersecting country on the layer 'countries'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "angle_at_vertex",
    Help( "angle_at_vertex", tr( "function" ), tr( "Returns the bisector angle (average angle) to the geometry for a specified vertex on a linestring geometry. Angles are in degrees clockwise from north." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "angle_at_vertex" ), tr( "Returns the bisector angle (average angle) to the geometry for a specified vertex on a linestring geometry. Angles are in degrees clockwise from north." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a linestring geometry" ), false, false, false, "" )
              << HelpArg( "vertex", tr( "vertex index, starting from 0; if the value is negative, the selected vertex index will be its total count minus the absolute value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "angle_at_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1)" ), tr( "45.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "area",
    Help( "area", tr( "function" ), tr( "Returns the area of a geometry polygon object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned area will match the units for the SRS. This differs from the calculations performed by the $area function, which will perform ellipsoidal calculations based on the project's ellipsoid and area unit settings." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "area" ), tr( "Returns the area of a geometry polygon object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned area will match the units for the SRS. This differs from the calculations performed by the $area function, which will perform ellipsoidal calculations based on the project's ellipsoid and area unit settings." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "polygon geometry object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "area(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'))" ), tr( "8.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array",
    Help( "array", tr( "function" ), tr( "Returns an array containing all the values passed as parameter." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array" ), tr( "Returns an array containing all the values passed as parameter." ),
          QList<HelpArg>()
              << HelpArg( "value1", tr( "" ), false, true, false, "" )
              << HelpArg( "value2", tr( "" ), false, true, false, "" )
              << HelpArg( "value", tr( "a value" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "array(2,10)" ), tr( "[ 2, 10 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_agg",
    Help( "array_agg", tr( "function" ), tr( "Returns an array of aggregated values from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_agg" ), tr( "Returns an array of aggregated values from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_agg(\"name\",group_by:=\"state\")" ), tr( "list of name values, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_all",
    Help( "array_all", tr( "function" ), tr( "Returns true if an array contains the all values of a given array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_all" ), tr( "Returns true if an array contains the all values of a given array." ),
          QList<HelpArg>()
              << HelpArg( "array_a", tr( "an array" ), false, false, false, "" )
              << HelpArg( "array_b", tr( "the array of values to search" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_all(array(1,2,3),array(2,3))" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "array_all(array(1,2,3),array(1,2,4))" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_append",
    Help( "array_append", tr( "function" ), tr( "Returns an array with the given value added at the end." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_append" ), tr( "Returns an array with the given value added at the end." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to add" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_append(array(1,2,3),4)" ), tr( "[ 1, 2, 3, 4 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_cat",
    Help( "array_cat", tr( "function" ), tr( "Returns an array containing all the given arrays concatenated." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_cat" ), tr( "Returns an array containing all the given arrays concatenated." ),
          QList<HelpArg>()
              << HelpArg( "array1", tr( "" ), false, true, false, "" )
              << HelpArg( "array2", tr( "" ), false, true, false, "" )
              << HelpArg( "array", tr( "an array" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "array_cat(array(1,2),array(2,3))" ), tr( "[ 1, 2, 2, 3 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_contains",
    Help( "array_contains", tr( "function" ), tr( "Returns true if an array contains the given value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_contains" ), tr( "Returns true if an array contains the given value." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to search" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_contains(array(1,2,3),2)" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_distinct",
    Help( "array_distinct", tr( "function" ), tr( "Returns an array containing distinct values of the given array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_distinct" ), tr( "Returns an array containing distinct values of the given array." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_distinct(array(1,2,3,2,1))" ), tr( "[ 1, 2, 3 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_filter",
    Help( "array_filter", tr( "function" ), tr( "Returns an array with only the items for which the expression evaluates to true." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_filter" ), tr( "Returns an array with only the items for which the expression evaluates to true." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "expression", tr( "an expression to evaluate on each item. The variable `@element` will be replaced by the current value." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_filter(array(1,2,3),@element &lt; 3)" ), tr( "[ 1, 2 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_find",
    Help( "array_find", tr( "function" ), tr( "Returns the index (0 for the first one) of a value within an array. Returns -1 if the value is not found." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_find" ), tr( "Returns the index (0 for the first one) of a value within an array. Returns -1 if the value is not found." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to search" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_find(array(1,2,3),2)" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_first",
    Help( "array_first", tr( "function" ), tr( "Returns the first value of an array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_first" ), tr( "Returns the first value of an array." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_first(array('a','b','c'))" ), tr( "'a'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_foreach",
    Help( "array_foreach", tr( "function" ), tr( "Returns an array with the given expression evaluated on each item." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_foreach" ), tr( "Returns an array with the given expression evaluated on each item." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "expression", tr( "an expression to evaluate on each item. The variable `@element` will be replaced by the current value." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_foreach(array('a','b','c'),upper(@element))" ), tr( "[ 'A', 'B', 'C' ]" ), tr( "" ) )
            << HelpExample( tr( "array_foreach(array(1,2,3),@element + 10)" ), tr( "[ 11, 12, 13 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_get",
    Help( "array_get", tr( "function" ), tr( "Returns the Nth value (0 for the first one) of an array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_get" ), tr( "Returns the Nth value (0 for the first one) of an array." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "index", tr( "the index to get (0 based)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_get(array('a','b','c'),1)" ), tr( "'b'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_insert",
    Help( "array_insert", tr( "function" ), tr( "Returns an array with the given value added at the given position." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_insert" ), tr( "Returns an array with the given value added at the given position." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "pos", tr( "the position where to add (0 based)" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to add" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_insert(array(1,2,3),1,100)" ), tr( "[ 1, 100, 2, 3 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_intersect",
    Help( "array_intersect", tr( "function" ), tr( "Returns true if at least one element of array1 exists in array2." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_intersect" ), tr( "Returns true if at least one element of array1 exists in array2." ),
          QList<HelpArg>()
              << HelpArg( "array1", tr( "an array" ), false, false, false, "" )
              << HelpArg( "array2", tr( "another array" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_intersect(array(1,2,3,4),array(4,0,2,5))" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_last",
    Help( "array_last", tr( "function" ), tr( "Returns the last value of an array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_last" ), tr( "Returns the last value of an array." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_last(array('a','b','c'))" ), tr( "'c'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_length",
    Help( "array_length", tr( "function" ), tr( "Returns the number of elements of an array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_length" ), tr( "Returns the number of elements of an array." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_length(array(1,2,3))" ), tr( "3" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_prepend",
    Help( "array_prepend", tr( "function" ), tr( "Returns an array with the given value added at the beginning." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_prepend" ), tr( "Returns an array with the given value added at the beginning." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to add" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_prepend(array(1,2,3),0)" ), tr( "[ 0, 1, 2, 3 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_remove_all",
    Help( "array_remove_all", tr( "function" ), tr( "Returns an array with all the entries of the given value removed." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_remove_all" ), tr( "Returns an array with all the entries of the given value removed." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "value", tr( "the values to remove" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_remove_all(array('a','b','c','b'),'b')" ), tr( "[ 'a', 'c' ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_remove_at",
    Help( "array_remove_at", tr( "function" ), tr( "Returns an array with the given index removed." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_remove_at" ), tr( "Returns an array with the given index removed." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "pos", tr( "the position to remove (0 based)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_remove_at(array(1,2,3),1)" ), tr( "[ 1, 3 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_reverse",
    Help( "array_reverse", tr( "function" ), tr( "Returns the given array with array values in reversed order." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_reverse" ), tr( "Returns the given array with array values in reversed order." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_reverse(array(2,4,0,10))" ), tr( "[ 10, 0, 4, 2 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_slice",
    Help( "array_slice", tr( "function" ), tr( "Returns a portion of the array. The slice is defined by the start_pos and end_pos arguments." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_slice" ), tr( "Returns a portion of the array. The slice is defined by the start_pos and end_pos arguments." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "start_pos", tr( "the index of the start position of the slice (0 based). The start_pos index is included in the slice. If you use a negative start_pos, the index is counted from the end of the list (-1 based)." ), false, false, false, "" )
              << HelpArg( "end_pos", tr( "the index of the end position of the slice (0 based). The end_pos index is included in the slice. If you use a negative end_pos, the index is counted from the end of the list (-1 based)." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_slice(array(1,2,3,4,5),0,3)" ), tr( "[ 1, 2, 3, 4 ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array(1,2,3,4,5),0,-1)" ), tr( "[ 1, 2, 3, 4, 5 ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array(1,2,3,4,5),-5,-1)" ), tr( "[ 1, 2, 3, 4, 5 ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array(1,2,3,4,5),0,0)" ), tr( "[ 1 ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array(1,2,3,4,5),-2,-1)" ), tr( "[ 4, 5 ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array(1,2,3,4,5),-1,-1)" ), tr( "[ 5 ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),1,2)" ), tr( "[ 'Valmiera', 'Chugiak' ]" ), tr( "" ) )
            << HelpExample( tr( "array_slice(array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),-2,-1)" ), tr( "[ 'Chugiak', 'Brighton' ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_sort",
    Help( "array_sort", tr( "function" ), tr( "Returns the provided array with its elements sorted." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_sort" ), tr( "Returns the provided array with its elements sorted." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "an array" ), false, false, false, "" )
              << HelpArg( "ascending", tr( "set this parameter to false to sort the array in descending order" ), false, false, true, "true" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_sort(array(3,2,1))" ), tr( "[ 1, 2, 3 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "array_to_string",
    Help( "array_to_string", tr( "function" ), tr( "Concatenates array elements into a string separated by a delimiter and using optional string for empty values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "array_to_string" ), tr( "Concatenates array elements into a string separated by a delimiter and using optional string for empty values." ),
          QList<HelpArg>()
              << HelpArg( "array", tr( "the input array" ), false, false, false, "" )
              << HelpArg( "delimiter", tr( "the string delimiter used to separate concatenated array elements" ), false, false, true, "','" )
              << HelpArg( "empty_value", tr( "the optional string to use as replacement for empty (zero length) matches" ), false, false, true, "''" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array_to_string(array('1','2','3'))" ), tr( "'1,2,3'" ), tr( "" ) )
            << HelpExample( tr( "array_to_string(array(1,2,3),'-')" ), tr( "'1-2-3'" ), tr( "" ) )
            << HelpExample( tr( "array_to_string(array('1','','3'),',','0')" ), tr( "'1,0,3'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "asin",
    Help( "asin", tr( "function" ), tr( "Returns the inverse sine of a value in radians." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "asin" ), tr( "Returns the inverse sine of a value in radians." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "sine of an angle in radians" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "asin(1.0)" ), tr( "1.5707963267949" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "atan",
    Help( "atan", tr( "function" ), tr( "Returns the inverse tangent of a value in radians." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "atan" ), tr( "Returns the inverse tangent of a value in radians." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "tan of an angle in radians" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "atan(0.5)" ), tr( "0.463647609000806" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "atan2",
    Help( "atan2", tr( "function" ), tr( "Returns the inverse tangent of dy/dx by using the signs of the two arguments to determine the quadrant of the result." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "atan2" ), tr( "Returns the inverse tangent of dy/dx by using the signs of the two arguments to determine the quadrant of the result." ),
          QList<HelpArg>()
              << HelpArg( "dy", tr( "y coordinate difference" ), false, false, false, "" )
              << HelpArg( "dx", tr( "x coordinate difference" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "atan2(1.0, 1.732)" ), tr( "0.523611477769969" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "attribute",
    Help( "attribute", tr( "function" ), tr( "Returns an attribute from a feature." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Variant 1" ), tr( "Returns the value of an attribute from the current feature." ),
          QList<HelpArg>()
              << HelpArg( "attribute_name", tr( "name of attribute to be returned" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "attribute( 'name' )" ), tr( "value stored in 'name' attribute for the current feature" ), tr( "" ) )
       )
        << HelpVariant( tr( "Variant 2" ), tr( "Allows the target feature and attribute name to be specified." ),
          QList<HelpArg>()
              << HelpArg( "feature", tr( "a feature" ), false, false, false, "" )
              << HelpArg( "attribute_name", tr( "name of attribute to be returned" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "attribute( @atlas_feature, 'name' )" ), tr( "value stored in 'name' attribute for the current atlas feature" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "azimuth",
    Help( "azimuth", tr( "function" ), tr( "Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on point_a to point_b." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "azimuth" ), tr( "Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on point_a to point_b." ),
          QList<HelpArg>()
              << HelpArg( "point_a", tr( "point geometry" ), false, false, false, "" )
              << HelpArg( "point_b", tr( "point geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "degrees( azimuth( make_point(25, 45), make_point(75, 100) ) )" ), tr( "42.273689" ), tr( "" ) )
            << HelpExample( tr( "degrees( azimuth( make_point(75, 100), make_point(25,45) ) )" ), tr( "222.273689" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "base_file_name",
    Help( "base_file_name", tr( "function" ), tr( "Returns the base name of the file without the directory or file suffix." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "base_file_name" ), tr( "Returns the base name of the file without the directory or file suffix." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "base_file_name('/home/qgis/data/country_boundaries.shp')" ), tr( "'country_boundaries'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "boundary",
    Help( "boundary", tr( "function" ), tr( "Returns the closure of the combinatorial boundary of the geometry (ie the topological boundary of the geometry). For instance, a polygon geometry will have a boundary consisting of the linestrings for each ring in the polygon. Some geometry types do not have a defined boundary, e.g., points or geometry collections, and will return null." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "boundary" ), tr( "Returns the closure of the combinatorial boundary of the geometry (ie the topological boundary of the geometry). For instance, a polygon geometry will have a boundary consisting of the linestrings for each ring in the polygon. Some geometry types do not have a defined boundary, e.g., points or geometry collections, and will return null." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(boundary(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')))" ), tr( "'LineString(1 1,0 0,-1 1,1 1)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "bounds",
    Help( "bounds", tr( "function" ), tr( "Returns a geometry which represents the bounding box of an input geometry. Calculations are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "bounds" ), tr( "Returns a geometry which represents the bounding box of an input geometry. Calculations are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "bounds($geometry)" ), tr( "bounding box of $geometry" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "bounds_height",
    Help( "bounds_height", tr( "function" ), tr( "Returns the height of the bounding box of a geometry. Calculations are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "bounds_height" ), tr( "Returns the height of the bounding box of a geometry. Calculations are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "bounds_height($geometry)" ), tr( "height of bounding box of $geometry" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "bounds_width",
    Help( "bounds_width", tr( "function" ), tr( "Returns the width of the bounding box of a geometry. Calculations are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "bounds_width" ), tr( "Returns the width of the bounding box of a geometry. Calculations are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "bounds_width($geometry)" ), tr( "width of bounding box of $geometry" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "buffer",
    Help( "buffer", tr( "function" ), tr( "Returns a geometry that represents all points whose distance from this geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "buffer" ), tr( "Returns a geometry that represents all points whose distance from this geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "distance", tr( "buffer distance in layer units" ), false, false, false, "" )
              << HelpArg( "segments", tr( "number of segments to use to represent a quarter circle when a round join style is used. A larger number results in a smoother buffer with more nodes." ), false, false, true, "8" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "buffer($geometry, 10.5)" ), tr( "polygon of $geometry buffered by 10.5 units" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "buffer_by_m",
    Help( "buffer_by_m", tr( "function" ), tr( "Creates a buffer along a line geometry where the buffer diameter varies according to the m-values at the line vertices." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "buffer_by_m" ), tr( "Creates a buffer along a line geometry where the buffer diameter varies according to the m-values at the line vertices." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "input geometry. Must be a (multi)line geometry with m values." ), false, false, false, "" )
              << HelpArg( "segments", tr( "number of segments to approximate quarter-circle curves in the buffer." ), false, false, true, "8" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "buffer_by_m(geometry:=geom_from_wkt('LINESTRINGM(1 2 0.5, 4 2 0.2)'),segments:=8)" ), tr( "A variable width buffer starting with a diameter of 0.5 and ending with a diameter of 0.2 along the linestring geometry." ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "ceil",
    Help( "ceil", tr( "function" ), tr( "Rounds a number upwards." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "ceil" ), tr( "Rounds a number upwards." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "a number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "ceil(4.9)" ), tr( "5" ), tr( "" ) )
            << HelpExample( tr( "ceil(-4.9)" ), tr( "-4" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "centroid",
    Help( "centroid", tr( "function" ), tr( "Returns the geometric center of a geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "centroid" ), tr( "Returns the geometric center of a geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "centroid($geometry)" ), tr( "a point geometry" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "char",
    Help( "char", tr( "function" ), tr( "Returns the character associated with a unicode code." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "char" ), tr( "Returns the character associated with a unicode code." ),
          QList<HelpArg>()
              << HelpArg( "code", tr( "a unicode code number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "char(81)" ), tr( "'Q'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "clamp",
    Help( "clamp", tr( "function" ), tr( "Restricts an input value to a specified range." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "clamp" ), tr( "Restricts an input value to a specified range." ),
          QList<HelpArg>()
              << HelpArg( "minimum", tr( "the smallest value <i>input</i> is allowed to take." ), false, false, false, "" )
              << HelpArg( "input", tr( "a value which will be restricted to the range specified by <i>minimum</i> and <i>maximum</i>" ), false, false, false, "" )
              << HelpArg( "maximum", tr( "the largest value <i>input</i> is allowed to take" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "clamp(1,5,10)" ), tr( "5" ), tr( "<i>input</i> is between 1 and 10 so is returned unchanged" ) )
            << HelpExample( tr( "clamp(1,0,10)" ), tr( "1" ), tr( "<i>input</i> is less than minimum value of 1, so function returns 1" ) )
            << HelpExample( tr( "clamp(1,11,10)" ), tr( "10" ), tr( "<i>input</i> is greater than maximum value of 10, so function returns 10" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "closest_point",
    Help( "closest_point", tr( "function" ), tr( "Returns the point on geometry1 that is closest to geometry2." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "closest_point" ), tr( "Returns the point on geometry1 that is closest to geometry2." ),
          QList<HelpArg>()
              << HelpArg( "geometry1", tr( "geometry to find closest point on" ), false, false, false, "" )
              << HelpArg( "geometry2", tr( "geometry to find closest point to" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(closest_point(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)')))" ), tr( "Point(73.0769 115.384)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "coalesce",
    Help( "coalesce", tr( "function" ), tr( "Returns the first non-NULL value from the expression list.<br>This function can take any number of arguments." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "coalesce" ), tr( "Returns the first non-NULL value from the expression list.<br>This function can take any number of arguments." ),
          QList<HelpArg>()
              << HelpArg( "expression1", tr( "" ), false, true, false, "" )
              << HelpArg( "expression2", tr( "" ), false, true, false, "" )
              << HelpArg( "expression", tr( "any valid expression or value, regardless of type." ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "coalesce(NULL, 2)" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "coalesce(NULL, 2, 3)" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "coalesce(7, NULL, 3*2)" ), tr( "7" ), tr( "" ) )
            << HelpExample( tr( "coalesce(\"fieldA\", \"fallbackField\", 'ERROR')" ), tr( "value of fieldA if it is non-NULL else the value of \"fallbackField\" or the string 'ERROR' if both are NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "collect",
    Help( "collect", tr( "function" ), tr( "Returns the multipart geometry of aggregated geometries from an expression" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "collect" ), tr( "Returns the multipart geometry of aggregated geometries from an expression" ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "geometry expression to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "collect( $geometry )" ), tr( "multipart geometry of aggregated geometries" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_cmyk",
    Help( "color_cmyk", tr( "function" ), tr( "Returns a string representation of a color based on its cyan, magenta, yellow and black components" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_cmyk" ), tr( "Returns a string representation of a color based on its cyan, magenta, yellow and black components" ),
          QList<HelpArg>()
              << HelpArg( "cyan", tr( "cyan component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "magenta", tr( "magenta component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "yellow", tr( "yellow component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "black", tr( "black component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_cmyk(100,50,0,10)" ), tr( "0,115,230" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_cmyka",
    Help( "color_cmyka", tr( "function" ), tr( "Returns a string representation of a color based on its cyan, magenta, yellow, black and alpha (transparency) components" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_cmyka" ), tr( "Returns a string representation of a color based on its cyan, magenta, yellow, black and alpha (transparency) components" ),
          QList<HelpArg>()
              << HelpArg( "cyan", tr( "cyan component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "magenta", tr( "magenta component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "yellow", tr( "yellow component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "black", tr( "black component of the color, as a percentage integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "alpha", tr( "alpha component as an integer value from 0 (completely transparent) to 255 (opaque)." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_cmyk(100,50,0,10,200)" ), tr( "0,115,230,200" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_grayscale_average",
    Help( "color_grayscale_average", tr( "function" ), tr( "Applies a grayscale filter and returns a string representation from a provided color." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_grayscale_average" ), tr( "Applies a grayscale filter and returns a string representation from a provided color." ),
          QList<HelpArg>()
              << HelpArg( "color", tr( "a color string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_grayscale_average('255,100,50')" ), tr( "127,127,127,255" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_hsl",
    Help( "color_hsl", tr( "function" ), tr( "Returns a string representation of a color based on its hue, saturation, and lightness attributes." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_hsl" ), tr( "Returns a string representation of a color based on its hue, saturation, and lightness attributes." ),
          QList<HelpArg>()
              << HelpArg( "hue", tr( "hue of the color, as an integer value from 0 to 360" ), false, false, false, "" )
              << HelpArg( "saturation", tr( "saturation percentage of the color as an integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "lightness", tr( "lightness percentage of the color as an integer value from 0 to 100" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_hsl(100,50,70)" ), tr( "166,217,140" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_hsla",
    Help( "color_hsla", tr( "function" ), tr( "Returns a string representation of a color based on its hue, saturation, lightness and alpha (transparency) attributes" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_hsla" ), tr( "Returns a string representation of a color based on its hue, saturation, lightness and alpha (transparency) attributes" ),
          QList<HelpArg>()
              << HelpArg( "hue", tr( "hue of the color, as an integer value from 0 to 360" ), false, false, false, "" )
              << HelpArg( "saturation", tr( "saturation percentage of the color as an integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "lightness", tr( "lightness percentage of the color as an integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "alpha", tr( "alpha component as an integer value from 0 (completely transparent) to 255 (opaque)." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_hsla(100,50,70,200)" ), tr( "166,217,140,200" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_hsv",
    Help( "color_hsv", tr( "function" ), tr( "Returns a string representation of a color based on its hue, saturation, and value attributes." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_hsv" ), tr( "Returns a string representation of a color based on its hue, saturation, and value attributes." ),
          QList<HelpArg>()
              << HelpArg( "hue", tr( "hue of the color, as an integer value from 0 to 360" ), false, false, false, "" )
              << HelpArg( "saturation", tr( "saturation percentage of the color as an integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "value", tr( "value percentage of the color as an integer from 0 to 100" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_hsv(40,100,100)" ), tr( "255,170,0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_hsva",
    Help( "color_hsva", tr( "function" ), tr( "Returns a string representation of a color based on its hue, saturation, value and alpha (transparency) attributes." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_hsva" ), tr( "Returns a string representation of a color based on its hue, saturation, value and alpha (transparency) attributes." ),
          QList<HelpArg>()
              << HelpArg( "hue", tr( "hue of the color, as an integer value from 0 to 360" ), false, false, false, "" )
              << HelpArg( "saturation", tr( "saturation percentage of the color as an integer value from 0 to 100" ), false, false, false, "" )
              << HelpArg( "value", tr( "value percentage of the color as an integer from 0 to 100" ), false, false, false, "" )
              << HelpArg( "alpha", tr( "alpha component as an integer value from 0 (completely transparent) to 255 (opaque)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_hsva(40,100,100,200)" ), tr( "255,170,0,200" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_mix_rgb",
    Help( "color_mix_rgb", tr( "function" ), tr( "Returns a string representing a color mixing the red, green, blue, and alpha values of two provided colors based on a given ratio." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_mix_rgb" ), tr( "Returns a string representing a color mixing the red, green, blue, and alpha values of two provided colors based on a given ratio." ),
          QList<HelpArg>()
              << HelpArg( "color1", tr( "a color string" ), false, false, false, "" )
              << HelpArg( "color2", tr( "a color string" ), false, false, false, "" )
              << HelpArg( "ratio", tr( "a ratio" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_mix_rgb('0,0,0','255,255,255',0.5)" ), tr( "127,127,127,255" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_part",
    Help( "color_part", tr( "function" ), tr( "Returns a specific component from a color string, e.g., the red component or alpha component." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_part" ), tr( "Returns a specific component from a color string, e.g., the red component or alpha component." ),
          QList<HelpArg>()
              << HelpArg( "color", tr( "a color string" ), false, false, false, "" )
              << HelpArg( "component", tr( "a string corresponding to the color component to return. Valid options are:<br /><ul><li>red: RGB red component (0-255)</li><li>green: RGB green component (0-255)</li><li>blue: RGB blue component (0-255)</li><li>alpha: alpha (transparency) value (0-255)</li><li>hue: HSV hue (0-360)</li><li>saturation: HSV saturation (0-100)</li><li>value: HSV value (0-100)</li><li>hsl_hue: HSL hue (0-360)</li><li>hsl_saturation: HSL saturation (0-100)</li><li>lightness: HSL lightness (0-100)</li><li>cyan: CMYK cyan component (0-100)</li><li>magenta: CMYK magenta component (0-100)</li><li>yellow: CMYK yellow component (0-100)</li> <li>black: CMYK black component (0-100)</li></ul>" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_part('200,10,30','green')" ), tr( "10" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_rgb",
    Help( "color_rgb", tr( "function" ), tr( "Returns a string representation of a color based on its red, green, and blue components." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_rgb" ), tr( "Returns a string representation of a color based on its red, green, and blue components." ),
          QList<HelpArg>()
              << HelpArg( "red", tr( "red component as an integer value from 0 to 255" ), false, false, false, "" )
              << HelpArg( "green", tr( "green component as an integer value from 0 to 255" ), false, false, false, "" )
              << HelpArg( "blue", tr( "blue component as an integer value from 0 to 255" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_rgb(255,127,0)" ), tr( "255,127,0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "color_rgba",
    Help( "color_rgba", tr( "function" ), tr( "Returns a string representation of a color based on its red, green, blue, and alpha (transparency) components." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "color_rgba" ), tr( "Returns a string representation of a color based on its red, green, blue, and alpha (transparency) components." ),
          QList<HelpArg>()
              << HelpArg( "red", tr( "red component as an integer value from 0 to 255" ), false, false, false, "" )
              << HelpArg( "green", tr( "green component as an integer value from 0 to 255" ), false, false, false, "" )
              << HelpArg( "blue", tr( "blue component as an integer value from 0 to 255" ), false, false, false, "" )
              << HelpArg( "alpha", tr( "alpha component as an integer value from 0 (completely transparent) to 255 (opaque)." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "color_rgba(255,127,0,200)" ), tr( "255,127,0,200" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "combine",
    Help( "combine", tr( "function" ), tr( "Returns the combination of two geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "combine" ), tr( "Returns the combination of two geometries." ),
          QList<HelpArg>()
              << HelpArg( "geometry1", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry2", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 2 1)' ) ) )" ), tr( "MULTILINESTRING((4 4, 2 1), (3 3, 4 4), (4 4, 5 5))" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 6 6, 2 1)' ) ) )" ), tr( "LINESTRING(3 3, 4 4, 6 6, 2 1)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "concat",
    Help( "concat", tr( "function" ), tr( "Concatenates several strings to one. NULL values are converted to empty strings. Other values (like numbers) are converted to strings." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "concat" ), tr( "Concatenates several strings to one. NULL values are converted to empty strings. Other values (like numbers) are converted to strings." ),
          QList<HelpArg>()
              << HelpArg( "string1", tr( "" ), false, true, false, "" )
              << HelpArg( "string2", tr( "" ), false, true, false, "" )
              << HelpArg( "string", tr( "a string value" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "concat('sun', 'set')" ), tr( "'sunset'" ), tr( "" ) )
            << HelpExample( tr( "concat('a','b','c','d','e')" ), tr( "'abcde'" ), tr( "" ) )
            << HelpExample( tr( "concat('Anno ', 1984)" ), tr( "'Anno 1984'" ), tr( "" ) )
            << HelpExample( tr( "concat('The Wall', NULL)" ), tr( "'The Wall'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "concatenate",
    Help( "concatenate", tr( "function" ), tr( "Returns the all aggregated strings from a field or expression joined by a delimiter." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "concatenate" ), tr( "Returns the all aggregated strings from a field or expression joined by a delimiter." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" )
              << HelpArg( "concatenator", tr( "optional string to use to join values" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "concatenate(\"town_name\",group_by:=\"state\",concatenator:=',')" ), tr( "comma separated list of town_names, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "contains",
    Help( "contains", tr( "function" ), tr( "Tests whether a geometry contains another. Returns true if and only if no points of geometry b lie in the exterior of geometry a, and at least one point of the interior of b lies in the interior of a." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "contains" ), tr( "Tests whether a geometry contains another. Returns true if and only if no points of geometry b lie in the exterior of geometry a, and at least one point of the interior of b lies in the interior of a." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'POINT(0.5 0.5 )' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "convex_hull",
    Help( "convex_hull", tr( "function" ), tr( "Returns the convex hull of a geometry. It represents the minimum convex geometry that encloses all geometries within the set." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "convex_hull" ), tr( "Returns the convex hull of a geometry. It represents the minimum convex geometry that encloses all geometries within the set." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( convex_hull( geom_from_wkt( 'LINESTRING(3 3, 4 4, 4 10)' ) ) )" ), tr( "POLYGON((3 3,4 10,4 4,3 3))" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "cos",
    Help( "cos", tr( "function" ), tr( "Returns cosine of an angle." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "cos" ), tr( "Returns cosine of an angle." ),
          QList<HelpArg>()
              << HelpArg( "angle", tr( "angle in radians" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "cos(1.571)" ), tr( "0.000796326710733263" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "count",
    Help( "count", tr( "function" ), tr( "Returns the count of matching features." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "count" ), tr( "Returns the count of matching features." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "count(\"stations\",group_by:=\"state\")" ), tr( "count of stations, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "count_distinct",
    Help( "count_distinct", tr( "function" ), tr( "Returns the count of distinct values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "count_distinct" ), tr( "Returns the count of distinct values." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "count_distinct(\"stations\",group_by:=\"state\")" ), tr( "count of distinct stations values, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "count_missing",
    Help( "count_missing", tr( "function" ), tr( "Returns the count of missing (null) values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "count_missing" ), tr( "Returns the count of missing (null) values." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "count_missing(\"stations\",group_by:=\"state\")" ), tr( "count of missing (null) station values, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "create_ramp",
    Help( "create_ramp", tr( "function" ), tr( "Returns a gradient ramp from a map of color strings and steps." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "create_ramp" ), tr( "Returns a gradient ramp from a map of color strings and steps." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map of color strings and steps" ), false, false, false, "" )
              << HelpArg( "discrete", tr( "declare whether the color ramp is discrete" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "ramp_color(create_array(map(0,'0,0,0',1,'255,0,0')),1)" ), tr( "'255,0,0,255'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "crosses",
    Help( "crosses", tr( "function" ), tr( "Tests whether a geometry crosses another. Returns true if the supplied geometries have some, but not all, interior points in common." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "crosses" ), tr( "Tests whether a geometry crosses another. Returns true if the supplied geometries have some, but not all, interior points in common." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "crosses( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "crosses( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "current_value",
    Help( "current_value", tr( "function" ), tr( "Returns the current, unsaved value of a field in the form or table row currently being edited. This will differ from the feature's actual attribute values for features which are currently being edited or have not yet been added to a layer." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "current_value" ), tr( "Returns the current, unsaved value of a field in the form or table row currently being edited. This will differ from the feature's actual attribute values for features which are currently being edited or have not yet been added to a layer." ),
          QList<HelpArg>()
              << HelpArg( "field_name", tr( "a field name in the current form or table row" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "current_value( 'FIELD_NAME' )" ), tr( "The current value of field 'FIELD_NAME'." ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "darker",
    Help( "darker", tr( "function" ), tr( "Returns a darker (or lighter) color string" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "darker" ), tr( "Returns a darker (or lighter) color string" ),
          QList<HelpArg>()
              << HelpArg( "color", tr( "a color string" ), false, false, false, "" )
              << HelpArg( "factor", tr( "a integer number corresponding to the darkening factor:<ul><li>if the factor is greater than 100, this functions returns a darker color (for e.g., setting factor to 300 returns a color that has one-third the brightness);</li><li>if the factor is less than 100, the return color is lighter, but using the lighter() function for this purpose is recommended;</li><li>if the factor is 0 or negative, the return value is unspecified.</li></ul>" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "darker('200,10,30',300)" ), tr( "'66,3,10,255'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "day",
    Help( "day", tr( "function" ), tr( "Extract the day from a date, or the number of days from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Date variant" ), tr( "Extract the day from a date or datetime." ),
          QList<HelpArg>()
              << HelpArg( "date", tr( "a date or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "day('2012-05-12')" ), tr( "12" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in days of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of days from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "day(tointerval('3 days'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "day(age('2012-01-01','2010-01-01'))" ), tr( "730" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "day_of_week",
    Help( "day_of_week", tr( "function" ), tr( "Returns the day of the week for a specified date or datetime. The returned value ranges from 0 to 6, where 0 corresponds to a Sunday and 6 to a Saturday." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "day_of_week" ), tr( "Returns the day of the week for a specified date or datetime. The returned value ranges from 0 to 6, where 0 corresponds to a Sunday and 6 to a Saturday." ),
          QList<HelpArg>()
              << HelpArg( "date", tr( "date or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "day_of_week(todate('2015-09-21'))" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "decode_uri",
    Help( "decode_uri", tr( "function" ), tr( "Takes a layer and decodes the uri of the underlying data provider. It depends on the dataprovider, which data is available." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "decode_uri" ), tr( "Takes a layer and decodes the uri of the underlying data provider. It depends on the dataprovider, which data is available." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "The layer for which the uri should be decoded." ), false, false, false, "" )
              << HelpArg( "part", tr( "The part of the uri to return. If unspecified, a map with all uri parts will be returned." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "decode_uri(@layer)" ), tr( "{'layerId': '0', 'layerName': '', 'path': '/home/qgis/shapefile.shp'}" ), tr( "" ) )
            << HelpExample( tr( "decode_uri(@layer)" ), tr( "{'layerId': NULL, 'layerName': 'layer', 'path': '/home/qgis/geopackage.gpkg'}" ), tr( "" ) )
            << HelpExample( tr( "decode_uri(@layer, 'path')" ), tr( "'C:\\my_data\\qgis\\shape.shp'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "degrees",
    Help( "degrees", tr( "function" ), tr( "Converts from radians to degrees." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "degrees" ), tr( "Converts from radians to degrees." ),
          QList<HelpArg>()
              << HelpArg( "radians", tr( "numeric value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "degrees(3.14159)" ), tr( "180" ), tr( "" ) )
            << HelpExample( tr( "degrees(1)" ), tr( "57.2958" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "difference",
    Help( "difference", tr( "function" ), tr( "Returns a geometry that represents that part of geometry_a that does not intersect with geometry_b." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "difference" ), tr( "Returns a geometry that represents that part of geometry_a that does not intersect with geometry_b." ),
          QList<HelpArg>()
              << HelpArg( "geometry_a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry_b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) )" ), tr( "LINESTRING(4 4, 5 5)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "disjoint",
    Help( "disjoint", tr( "function" ), tr( "Tests whether geometries do not spatially intersect. Returns true if the geometries do not share any space together." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "disjoint" ), tr( "Tests whether geometries do not spatially intersect. Returns true if the geometries do not share any space together." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "disjoint( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "disjoint( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'POINT(4 4)' ))" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "distance",
    Help( "distance", tr( "function" ), tr( "Returns the minimum distance (based on spatial ref) between two geometries in projected units." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "distance" ), tr( "Returns the minimum distance (based on spatial ref) between two geometries in projected units." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "distance( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(4 8)' ) )" ), tr( "4" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "distance_to_vertex",
    Help( "distance_to_vertex", tr( "function" ), tr( "Returns the distance along the geometry to a specified vertex." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "distance_to_vertex" ), tr( "Returns the distance along the geometry to a specified vertex." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a linestring geometry" ), false, false, false, "" )
              << HelpArg( "vertex", tr( "vertex index, starting from 0; if the value is negative, the selected vertex index will be its total count minus the absolute value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "distance_to_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1)" ), tr( "10.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "end_point",
    Help( "end_point", tr( "function" ), tr( "Returns the last node from a geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "end_point" ), tr( "Returns the last node from a geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(end_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)')))" ), tr( "'Point (0 2)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "env",
    Help( "env", tr( "function" ), tr( "Gets an environment variable and returns its content as a string. If the variable is not found, `NULL` will be returned. This is handy to inject system specific configuration like drive letters or path prefixes. Definition of environment variables depends on the operating system, please check with your system administrator or the operating system documentation how this can be set." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "env" ), tr( "Gets an environment variable and returns its content as a string. If the variable is not found, `NULL` will be returned. This is handy to inject system specific configuration like drive letters or path prefixes. Definition of environment variables depends on the operating system, please check with your system administrator or the operating system documentation how this can be set." ),
          QList<HelpArg>()
              << HelpArg( "name", tr( "The name of the environment variable which should be retrieved." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "env( 'LANG' )" ), tr( "'en_US.UTF-8'" ), tr( "" ) )
            << HelpExample( tr( "env( 'MY_OWN_PREFIX_VAR' )" ), tr( "'Z:'" ), tr( "" ) )
            << HelpExample( tr( "env( 'I_DO_NOT_EXIST' )" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "epoch",
    Help( "epoch", tr( "function" ), tr( "Return the interval in milliseconds between the unix epoch and a given date value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "epoch" ), tr( "Return the interval in milliseconds between the unix epoch and a given date value." ),
          QList<HelpArg>()
              << HelpArg( "date", tr( "a date or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "epoch(to_date('2017-01-01'))" ), tr( "1483203600000" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "eval",
    Help( "eval", tr( "function" ), tr( "Evaluates an expression which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "eval" ), tr( "Evaluates an expression which is passed in a string. Useful to expand dynamic parameters passed as context variables or fields." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "an expression string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "eval('\'nice\'')" ), tr( "'nice'" ), tr( "" ) )
            << HelpExample( tr( "eval(@expression_var)" ), tr( "[whatever the result of evaluating @expression_var might be…]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "exp",
    Help( "exp", tr( "function" ), tr( "Returns exponential of an value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "exp" ), tr( "Returns exponential of an value." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "number to return exponent of" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "exp(1.0)" ), tr( "2.71828182845905" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "extend",
    Help( "extend", tr( "function" ), tr( "Extends the start and end of a linestring geometry by a specified amount. Lines are extended using the bearing of the first and last segment in the line. Distances are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "extend" ), tr( "Extends the start and end of a linestring geometry by a specified amount. Lines are extended using the bearing of the first and last segment in the line. Distances are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a (multi)linestring geometry" ), false, false, false, "" )
              << HelpArg( "start_distance", tr( "distance to extend the start of the line" ), false, false, false, "" )
              << HelpArg( "end_distance", tr( "distance to extend the end of the line." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(extend(geom_from_wkt('LineString(0 0, 1 0, 1 1)'),1,2))" ), tr( "LineString (-1 0, 1 0, 1 3)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "exterior_ring",
    Help( "exterior_ring", tr( "function" ), tr( "Returns a line string representing the exterior ring of a polygon geometry. If the geometry is not a polygon then the result will be null." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "exterior_ring" ), tr( "Returns a line string representing the exterior ring of a polygon geometry. If the geometry is not a polygon then the result will be null." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a polygon geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(exterior_ring(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2, 0.1, 0.1 0.1))')))" ), tr( "'LineString (-1 -1, 4 0, 4 2, 0 2, -1 -1)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "extrude",
    Help( "extrude", tr( "function" ), tr( "Returns an extruded version of the input (Multi-)Curve or (Multi-)Linestring geometry with an extension specified by x and y." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "extrude" ), tr( "Returns an extruded version of the input (Multi-)Curve or (Multi-)Linestring geometry with an extension specified by x and y." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a polygon geometry" ), false, false, false, "" )
              << HelpArg( "x", tr( "x extension, numeric value" ), false, false, false, "" )
              << HelpArg( "y", tr( "y extension, numeric value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "extrude(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), 1, 2)" ), tr( "Polygon ((1 2, 3 2, 4 3, 5 5, 4 4, 2 4, 1 2))" ), tr( "" ) )
            << HelpExample( tr( "extrude(geom_from_wkt('MultiLineString((1 2, 3 2), (4 3, 8 3)'), 1, 2)" ), tr( "MultiPolygon (((1 2, 3 2, 4 4, 2 4, 1 2)),((4 3, 8 3, 9 5, 5 5, 4 3)))" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "file_exists",
    Help( "file_exists", tr( "function" ), tr( "Returns true if a file path exists." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "file_exists" ), tr( "Returns true if a file path exists." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "file_exists('/home/qgis/data/country_boundaries.shp')" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "file_name",
    Help( "file_name", tr( "function" ), tr( "Returns the name of a file (including the file extension), excluding the directory." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "file_name" ), tr( "Returns the name of a file (including the file extension), excluding the directory." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "file_name('/home/qgis/data/country_boundaries.shp')" ), tr( "'country_boundaries.shp'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "file_path",
    Help( "file_path", tr( "function" ), tr( "Returns the directory component of a file path. This does not include the file name." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "file_path" ), tr( "Returns the directory component of a file path. This does not include the file name." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "file_path('/home/qgis/data/country_boundaries.shp')" ), tr( "'/home/qgis/data'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "file_size",
    Help( "file_size", tr( "function" ), tr( "Returns the size (in bytes) of a file." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "file_size" ), tr( "Returns the size (in bytes) of a file." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "file_size('/home/qgis/data/country_boundaries.geojson')" ), tr( "5674" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "file_suffix",
    Help( "file_suffix", tr( "function" ), tr( "Returns the file suffix (extension) from a file path." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "file_suffix" ), tr( "Returns the file suffix (extension) from a file path." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "file_suffix('/home/qgis/data/country_boundaries.shp')" ), tr( "'shp'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "flip_coordinates",
    Help( "flip_coordinates", tr( "function" ), tr( "Returns a copy of the geometry with the x and y coordinates swapped. Useful for repairing geometries which have had their latitude and longitude values reversed." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "flip_coordinates" ), tr( "Returns a copy of the geometry with the x and y coordinates swapped. Useful for repairing geometries which have had their latitude and longitude values reversed." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(flip_coordinates(make_point(1, 2)))" ), tr( "Point (2 1)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "floor",
    Help( "floor", tr( "function" ), tr( "Rounds a number downwards." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "floor" ), tr( "Rounds a number downwards." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "a number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "floor(4.9)" ), tr( "4" ), tr( "" ) )
            << HelpExample( tr( "floor(-4.9)" ), tr( "-5" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "force_rhr",
    Help( "force_rhr", tr( "function" ), tr( "Forces a geometry to respect the Right-Hand-Rule, in which the area that is bounded by a polygon is to the right of the boundary. In particular, the exterior ring is oriented in a clockwise direction and the interior rings in a counter-clockwise direction." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "force_rhr" ), tr( "Forces a geometry to respect the Right-Hand-Rule, in which the area that is bounded by a polygon is to the right of the boundary. In particular, the exterior ring is oriented in a clockwise direction and the interior rings in a counter-clockwise direction." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry. Any non-polygon geometries are returned unchanged." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(force_rhr(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))')))" ), tr( "Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "format",
    Help( "format", tr( "function" ), tr( "Format a string using supplied arguments." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "format" ), tr( "Format a string using supplied arguments." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "A string with place holders for the arguments. Use %1, %2, etc for placeholders. Placeholders can be repeated." ), false, false, false, "" )
              << HelpArg( "arg1", tr( "" ), false, true, false, "" )
              << HelpArg( "arg2", tr( "" ), false, true, false, "" )
              << HelpArg( "arg", tr( "any type. Any number of arguments." ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "format('This %1 a %2','is', 'test')" ), tr( "'This is a test''" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "format_date",
    Help( "format_date", tr( "function" ), tr( "Format a date type or string into a custom string format. Uses Qt date/time format strings.  See <a href='http://qt-project.org/doc/qt-4.8/qdatetime.html#toString'>QDateTime::toString</a>." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "format_date" ), tr( "Format a date type or string into a custom string format. Uses Qt date/time format strings.  See <a href='http://qt-project.org/doc/qt-4.8/qdatetime.html#toString'>QDateTime::toString</a>." ),
          QList<HelpArg>()
              << HelpArg( "datetime", tr( "date, time or datetime value" ), false, false, false, "" )
              << HelpArg( "format", tr( "String template used to format the string. <table><thead><tr><th>Expression</th><th>Output</th></tr></thead><tr valign=\"top\"><td>d</td><td>the day as number without a leading zero (1 to 31)</td></tr><tr valign=\"top\"><td>dd</td><td>the day as number with a leading zero (01 to 31)</td></tr><tr valign=\"top\"><td>ddd</td><td>the abbreviated localized day name (e.g. 'Mon' to 'Sun')</td></tr><tr valign=\"top\"><td>dddd</td><td>the long localized day name (e.g. 'Monday' to 'Sunday')</td></tr><tr valign=\"top\"><td>M</td><td>the month as number without a leading zero (1-12)</td></tr><tr valign=\"top\"><td>MM</td><td>the month as number with a leading zero (01-12)</td></tr><tr valign=\"top\"><td>MMM</td><td>the abbreviated localized month name (e.g. 'Jan' to 'Dec')</td></tr><tr valign=\"top\"><td>MMMM</td><td>the long localized month name (e.g. 'January' to 'December')</td></tr><tr valign=\"top\"><td>yy</td><td>the year as two digit number (00-99)</td></tr><tr valign=\"top\"><td>yyyy</td><td>the year as four digit number</td></tr></table><p>These expressions may be used for the time part of the format string:</p><table><thead><tr><th>Expression</th><th>Output</th></tr></thead><tr valign=\"top\"><td>h</td><td>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</td></tr><tr valign=\"top\"><td>hh</td><td>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</td></tr><tr valign=\"top\"><td>H</td><td>the hour without a leading zero (0 to 23, even with AM/PM display)</td></tr><tr valign=\"top\"><td>HH</td><td>the hour with a leading zero (00 to 23, even with AM/PM display)</td></tr><tr valign=\"top\"><td>m</td><td>the minute without a leading zero (0 to 59)</td></tr><tr valign=\"top\"><td>mm</td><td>the minute with a leading zero (00 to 59)</td></tr><tr valign=\"top\"><td>s</td><td>the second without a leading zero (0 to 59)</td></tr><tr valign=\"top\"><td>ss</td><td>the second with a leading zero (00 to 59)</td></tr><tr valign=\"top\"><td>z</td><td>the milliseconds without leading zeroes (0 to 999)</td></tr><tr valign=\"top\"><td>zzz</td><td>the milliseconds with leading zeroes (000 to 999)</td></tr><tr valign=\"top\"><td>AP or A</td><td>interpret as an AM/PM time. <i>AP</i> must be either \"AM\" or \"PM\".</td></tr><tr valign=\"top\"><td>ap or a</td><td>Interpret as an AM/PM time. <i>ap</i> must be either \"am\" or \"pm\".</td></tr></table>" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "format_date('2012-05-15','dd.MM.yyyy')" ), tr( "'15.05.2012'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "format_number",
    Help( "format_number", tr( "function" ), tr( "Returns a number formatted with the locale separator for thousands. Also truncates the number to the number of supplied places." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "format_number" ), tr( "Returns a number formatted with the locale separator for thousands. Also truncates the number to the number of supplied places." ),
          QList<HelpArg>()
              << HelpArg( "number", tr( "number to be formatted" ), false, false, false, "" )
              << HelpArg( "places", tr( "integer representing the number of decimal places to truncate the string to." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "format_number(10000000.332,2)" ), tr( "'10,000,000.33'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "from_json",
    Help( "from_json", tr( "function" ), tr( "Loads a JSON formatted string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "from_json" ), tr( "Loads a JSON formatted string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "JSON string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "from_json('{\"qgis\":\"rocks\"}')" ), tr( "{ \"qgis\" : \"rocks\" }" ), tr( "" ) )
            << HelpExample( tr( "from_json('[1,2,3]')" ), tr( "[1,2,3]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "generate_series",
    Help( "generate_series", tr( "function" ), tr( "Creates an array containing a sequence of numbers." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "generate_series" ), tr( "Creates an array containing a sequence of numbers." ),
          QList<HelpArg>()
              << HelpArg( "start", tr( "first value of the sequence" ), false, false, false, "" )
              << HelpArg( "stop", tr( "value that ends the sequence once reached" ), false, false, false, "" )
              << HelpArg( "step", tr( "value used as the increment between values" ), false, false, true, "1" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "generate_series(1,5)" ), tr( "[ 1, 2, 3, 4, 5 ]" ), tr( "" ) )
            << HelpExample( tr( "generate_series(5,1,-1)" ), tr( "[ 5, 4, 3, 2, 1 ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "geom_from_gml",
    Help( "geom_from_gml", tr( "function" ), tr( "Returns a geometry from a GML representation of geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "geom_from_gml" ), tr( "Returns a geometry from a GML representation of geometry." ),
          QList<HelpArg>()
              << HelpArg( "gml", tr( "GML representation of a geometry as a string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_from_gml( '<gml:LineString srsName=\"EPSG:4326\"><gml:coordinates>4,4 5,5 6,6</gml:coordinates></gml:LineString>')" ), tr( "a geometry object" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "geom_from_wkt",
    Help( "geom_from_wkt", tr( "function" ), tr( "Returns a geometry created from a Well-Known Text (WKT) representation." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "geom_from_wkt" ), tr( "Returns a geometry created from a Well-Known Text (WKT) representation." ),
          QList<HelpArg>()
              << HelpArg( "text", tr( "Well-Known Text (WKT) representation of a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_from_wkt( 'POINT(4 5)' )" ), tr( "a geometry object" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "geom_to_wkt",
    Help( "geom_to_wkt", tr( "function" ), tr( "Returns the Well-Known Text (WKT) representation of the geometry without SRID metadata." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "geom_to_wkt" ), tr( "Returns the Well-Known Text (WKT) representation of the geometry without SRID metadata." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( $geometry )" ), tr( "POINT(6 50)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "geometry",
    Help( "geometry", tr( "function" ), tr( "Returns a feature's geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "geometry" ), tr( "Returns a feature's geometry." ),
          QList<HelpArg>()
              << HelpArg( "feature", tr( "a feature object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( geometry( get_feature( layer, attributeField, value ) ) )" ), tr( "'POINT(6 50)'" ), tr( "" ) )
            << HelpExample( tr( "intersects( $geometry, geometry( get_feature( layer, attributeField, value ) ) )" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "geometry_n",
    Help( "geometry_n", tr( "function" ), tr( "Returns a specific geometry from a geometry collection, or null if the input geometry is not a collection." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "geometry_n" ), tr( "Returns a specific geometry from a geometry collection, or null if the input geometry is not a collection." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry collection" ), false, false, false, "" )
              << HelpArg( "index", tr( "index of geometry to return, where 1 is the first geometry in the collection" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(geometry_n(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))'),3))" ), tr( "'Point (1 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "get_feature",
    Help( "get_feature", tr( "function" ), tr( "Returns the first feature of a layer matching a given attribute value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "get_feature" ), tr( "Returns the first feature of a layer matching a given attribute value." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "layer name or ID" ), false, false, false, "" )
              << HelpArg( "attribute", tr( "attribute name" ), false, false, false, "" )
              << HelpArg( "value", tr( "attribute value to match" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "get_feature('streets','name','main st')" ), tr( "first feature found in \"streets\" layer with \"main st\" value in the \"name\" field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "get_feature_by_id",
    Help( "get_feature_by_id", tr( "function" ), tr( "Returns the feature with an id on a layer." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "get_feature_by_id" ), tr( "Returns the feature with an id on a layer." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "layer, layer name or layer id" ), false, false, false, "" )
              << HelpArg( "feature_id", tr( "the id of the feature which should be returned" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "get_feature('streets', 1)" ), tr( "the feature with the id 1 on the layer \"streets\"" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "hamming_distance",
    Help( "hamming_distance", tr( "function" ), tr( "Returns the Hamming distance between two strings. This equates to the number of characters at corresponding positions within the input strings where the characters are different. The input strings must be the same length, and the comparison is case-sensitive." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "hamming_distance" ), tr( "Returns the Hamming distance between two strings. This equates to the number of characters at corresponding positions within the input strings where the characters are different. The input strings must be the same length, and the comparison is case-sensitive." ),
          QList<HelpArg>()
              << HelpArg( "string1", tr( "a string" ), false, false, false, "" )
              << HelpArg( "string2", tr( "a string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "hamming_distance('abc','xec')" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "hamming_distance('abc','ABc')" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "hamming_distance(upper('abc'),upper('ABC'))" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "hausdorff_distance",
    Help( "hausdorff_distance", tr( "function" ), tr( "Returns the Hausdorff distance between two geometries. This is basically a measure of how similar or dissimilar 2 geometries are, with a lower distance indicating more similar geometries.<br>The function can be executed with an optional densify fraction argument. If not specified, an approximation to the standard Hausdorff distance is used. This approximation is exact or close enough for a large subset of useful cases. Examples of these are:<br><br><li>computing distance between Linestrings that are roughly parallel to each other, and roughly equal in length. This occurs in matching linear networks.</li><li>Testing similarity of geometries.</li><br><br>If the default approximate provided by this method is insufficient, specify the optional densify fraction argument. Specifying this argument performs a segment densification before computing the discrete Hausdorff distance. The parameter sets the fraction by which to densify each segment. Each segment will be split into a number of equal-length subsegments, whose fraction of the total length is closest to the given fraction. Decreasing the densify fraction parameter will make the distance returned approach the true Hausdorff distance for the geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "hausdorff_distance" ), tr( "Returns the Hausdorff distance between two geometries. This is basically a measure of how similar or dissimilar 2 geometries are, with a lower distance indicating more similar geometries.<br>The function can be executed with an optional densify fraction argument. If not specified, an approximation to the standard Hausdorff distance is used. This approximation is exact or close enough for a large subset of useful cases. Examples of these are:<br><br><li>computing distance between Linestrings that are roughly parallel to each other, and roughly equal in length. This occurs in matching linear networks.</li><li>Testing similarity of geometries.</li><br><br>If the default approximate provided by this method is insufficient, specify the optional densify fraction argument. Specifying this argument performs a segment densification before computing the discrete Hausdorff distance. The parameter sets the fraction by which to densify each segment. Each segment will be split into a number of equal-length subsegments, whose fraction of the total length is closest to the given fraction. Decreasing the densify fraction parameter will make the distance returned approach the true Hausdorff distance for the geometries." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "densify_fraction", tr( "densify fraction amount" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "hausdorff_distance( geometry1:= geom_from_wkt('LINESTRING (0 0, 2 1)'),geometry2:=geom_from_wkt('LINESTRING (0 0, 2 0)'))" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)'))" ), tr( "14.142135623" ), tr( "" ) )
            << HelpExample( tr( "hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)'),0.5)" ), tr( "70.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "hour",
    Help( "hour", tr( "function" ), tr( "Extract the hour part from a datetime or time, or the number of hours from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Time variant" ), tr( "Extract the hour part from a time or datetime." ),
          QList<HelpArg>()
              << HelpArg( "datetime", tr( "a time or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "hour('2012-07-22T13:24:57')" ), tr( "13" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in hours of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of hours from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "hour(tointerval('3 hours'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "hour(age('2012-07-22T13:00:00','2012-07-22T10:00:00'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "hour(age('2012-01-01','2010-01-01'))" ), tr( "17520" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "hstore_to_map",
    Help( "hstore_to_map", tr( "function" ), tr( "Creates a map from a hstore-formatted string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "hstore_to_map" ), tr( "Creates a map from a hstore-formatted string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the input string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "hstore_to_map('qgis=>rocks')" ), tr( "{ \"qgis\" : \"rocks\" }" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "if",
    Help( "if", tr( "function" ), tr( "Tests a condition and returns a different result depending on the conditional check." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "if" ), tr( "Tests a condition and returns a different result depending on the conditional check." ),
          QList<HelpArg>()
              << HelpArg( "condition", tr( "the condition which should be checked" ), false, false, false, "" )
              << HelpArg( "result_when_true", tr( "the result which will be returned when the condition is true or another value that does not convert to false." ), false, false, false, "" )
              << HelpArg( "result_when_false", tr( "the result which will be returned when the condition is false or another value that converts to false like 0 or ''. NULL will also be converted to false." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "if( 1+1=2, 'Yes', 'No' )" ), tr( "'Yes'" ), tr( "" ) )
            << HelpExample( tr( "if( 1+1=3, 'Yes', 'No' )" ), tr( "'No'" ), tr( "" ) )
            << HelpExample( tr( "if( 5 > 3, 1, 0)" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "if( '', 'It is true (not empty)', 'It is false (empty)' )" ), tr( "'It is false (empty)'" ), tr( "" ) )
            << HelpExample( tr( "if( ' ', 'It is true (not empty)', 'It is false (empty)' )" ), tr( "'It is true (not empty)'" ), tr( "" ) )
            << HelpExample( tr( "if( 0, 'One', 'Zero' )" ), tr( "'Zero'" ), tr( "" ) )
            << HelpExample( tr( "if( 10, 'One', 'Zero' )" ), tr( "'One'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "inclination",
    Help( "inclination", tr( "function" ), tr( "Returns the inclination measured from the zenith (0) to the nadir (180) on point_a to point_b." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "inclination" ), tr( "Returns the inclination measured from the zenith (0) to the nadir (180) on point_a to point_b." ),
          QList<HelpArg>()
              << HelpArg( "point_a", tr( "point geometry" ), false, false, false, "" )
              << HelpArg( "point_b", tr( "point geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) )" ), tr( "0.0" ), tr( "" ) )
            << HelpExample( tr( "inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) )" ), tr( "90.0" ), tr( "" ) )
            << HelpExample( tr( "inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) )" ), tr( "90.0" ), tr( "" ) )
            << HelpExample( tr( "inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) )" ), tr( "180.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "interior_ring_n",
    Help( "interior_ring_n", tr( "function" ), tr( "Returns a specific interior ring from a polygon geometry, or null if the geometry is not a polygon." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "interior_ring_n" ), tr( "Returns a specific interior ring from a polygon geometry, or null if the geometry is not a polygon." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "polygon geometry" ), false, false, false, "" )
              << HelpArg( "index", tr( "index of interior to return, where 1 is the first interior ring" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(interior_ring_n(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1),(-1 -1, 4 0, 4 2, 0 2, -1 -1))'),1))" ), tr( "'LineString (-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "intersection",
    Help( "intersection", tr( "function" ), tr( "Returns a geometry that represents the shared portion of two geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "intersection" ), tr( "Returns a geometry that represents the shared portion of two geometries." ),
          QList<HelpArg>()
              << HelpArg( "geometry1", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry2", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) )" ), tr( "LINESTRING(3 3, 4 4)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "intersects",
    Help( "intersects", tr( "function" ), tr( "Tests whether a geometry intersects another. Returns true if the geometries spatially intersect (share any portion of space) and false if they do not." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "intersects" ), tr( "Tests whether a geometry intersects another. Returns true if the geometries spatially intersect (share any portion of space) and false if they do not." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "intersects( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "intersects( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'POINT(5 5)' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "intersects_bbox",
    Help( "intersects_bbox", tr( "function" ), tr( "Tests whether a geometry's bounding box overlaps another geometry's bounding box. Returns true if the geometries spatially intersect the bounding box defined and false if they do not." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "intersects_bbox" ), tr( "Tests whether a geometry's bounding box overlaps another geometry's bounding box. Returns true if the geometries spatially intersect the bounding box defined and false if they do not." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "intersects_bbox( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "intersects_bbox( geom_from_wkt( 'POINT(6 5)' ), geom_from_wkt( 'POLYGON((3 3, 4 4, 5 5, 3 3))' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "iqr",
    Help( "iqr", tr( "function" ), tr( "Returns the calculated inter quartile range from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "iqr" ), tr( "Returns the calculated inter quartile range from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "iqr(\"population\",group_by:=\"state\")" ), tr( "inter quartile range of population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "is_closed",
    Help( "is_closed", tr( "function" ), tr( "Returns true if a line string is closed (start and end points are coincident), or false if a line string is not closed. If the geometry is not a line string then the result will be null." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "is_closed" ), tr( "Returns true if a line string is closed (start and end points are coincident), or false if a line string is not closed. If the geometry is not a line string then the result will be null." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a line string geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))" ), tr( "false" ), tr( "" ) )
            << HelpExample( tr( "is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)'))" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "is_directory",
    Help( "is_directory", tr( "function" ), tr( "Returns true if a path corresponds to a directory." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "is_directory" ), tr( "Returns true if a path corresponds to a directory." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "is_directory('/home/qgis/data/country_boundaries.shp')" ), tr( "false" ), tr( "" ) )
            << HelpExample( tr( "is_directory('/home/qgis/data/')" ), tr( "true" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "is_file",
    Help( "is_file", tr( "function" ), tr( "Returns true if a path corresponds to a file." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "is_file" ), tr( "Returns true if a path corresponds to a file." ),
          QList<HelpArg>()
              << HelpArg( "path", tr( "a file path" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "is_file('/home/qgis/data/country_boundaries.shp')" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "is_file('/home/qgis/data/')" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "is_layer_visible",
    Help( "is_layer_visible", tr( "function" ), tr( "Returns true if a specified layer is visible." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "is_layer_visible" ), tr( "Returns true if a specified layer is visible." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "a string, representing either a layer name or layer ID" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "is_layer_visible('baseraster')" ), tr( "True" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "is_selected",
    Help( "is_selected", tr( "function" ), tr( "Returns if a feature is selected. If called with no parameters checks the current feature." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "is_selected" ), tr( "Returns if a feature is selected. If called with no parameters checks the current feature." ),
          QList<HelpArg>()
              << HelpArg( "feature", tr( "The feature which should be checked for selection." ), false, false, true, "current feature" )
              << HelpArg( "layer", tr( "The layer (or its id or name) on which the selection will be checked." ), false, false, true, "current layer" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "is_selected()" ), tr( "True if the current feature is selected." ), tr( "" ) )
            << HelpExample( tr( "is_selected(get_feature('streets', 'name', \"street_name\"), 'streets')" ), tr( "True if the current building's street is selected." ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "item_variables",
    Help( "item_variables", tr( "function" ), tr( "Returns a map of variables from a composer item inside this composition." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "item_variables" ), tr( "Returns a map of variables from a composer item inside this composition." ),
          QList<HelpArg>()
              << HelpArg( "id", tr( "composer item ID" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_get(item_variables('main_map'), 'map_scale')" ), tr( "2000" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "json_to_map",
    Help( "json_to_map", tr( "function" ), tr( "Creates a map from a json-formatted string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "json_to_map" ), tr( "Creates a map from a json-formatted string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the input string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "json_to_map('{\"qgis\":\"rocks\"}')" ), tr( "{ \"qgis\" : \"rocks\" }" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "layer_property",
    Help( "layer_property", tr( "function" ), tr( "Returns a matching layer property or metadata value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "layer_property" ), tr( "Returns a matching layer property or metadata value." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "a string, representing either a layer name or layer ID" ), false, false, false, "" )
              << HelpArg( "property", tr( "a string corresponding to the property to return. Valid options are:<br /><ul><li>name: layer name</li><li>id: layer ID</li><li>title: metadata title string</li><li>abstract: metadata abstract string</li><li>keywords: metadata keywords</li><li>data_url: metadata URL</li><li>attribution: metadata attribution string</li><li>attribution_url: metadata attribution URL</li><li>source: layer source</li><li>min_scale: minimum display scale for layer</li><li>max_scale: maximum display scale for layer</li><li>crs: layer CRS</li><li>crs_definition: layer CRS full definition</li><li>crs_description: layer CRS description</li><li>extent: layer extent (as a geometry object)</li><li>type: layer type, e.g., Vector or Raster</li><li>storage_type: storage format (vector layers only)</li><li>geometry_type: geometry type, e.g., Point (vector layers only)</li><li>feature_count: approximate feature count for layer (vector layers only)</li><li>path: File path to the layer data source. Only available for file based layers.</li></ul>" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "layer_property('streets','title')" ), tr( "'Basemap Streets'" ), tr( "" ) )
            << HelpExample( tr( "layer_property('airports','feature_count')" ), tr( "120" ), tr( "" ) )
            << HelpExample( tr( "layer_property('landsat','crs')" ), tr( "'EPSG:4326'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "left",
    Help( "left", tr( "function" ), tr( "Returns a substring that contains the <i>n</i> leftmost characters of the string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "left" ), tr( "Returns a substring that contains the <i>n</i> leftmost characters of the string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "a string" ), false, false, false, "" )
              << HelpArg( "length", tr( "integer. The number of characters from the left of the string to return." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "left('Hello World',5)" ), tr( "'Hello'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "length",
    Help( "length", tr( "function" ), tr( "Returns the number of characters in a string or the length of a geometry linestring." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "String variant" ), tr( "Returns the number of characters in a string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string to count length of" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "length('hello')" ), tr( "5" ), tr( "" ) )
       )
        << HelpVariant( tr( "Geometry variant" ), tr( "Calculate the length of a geometry line object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned length will match the units for the SRS. This differs from the calculations performed by the $length function, which will perform ellipsoidal calculations based on the project's ellipsoid and distance unit settings." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "line geometry object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "length(geom_from_wkt('LINESTRING(0 0, 4 0)'))" ), tr( "4.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "levenshtein",
    Help( "levenshtein", tr( "function" ), tr( "Returns the Levenshtein edit distance between two strings. This equates to the minimum number of character edits (insertions, deletions or substitutions) required to change one string to another.<br />The Levenshtein distance is a measure of the similarity between two strings. Smaller distances mean the strings are more similar, and larger distances indicate more different strings. The distance is case sensitive." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "levenshtein" ), tr( "Returns the Levenshtein edit distance between two strings. This equates to the minimum number of character edits (insertions, deletions or substitutions) required to change one string to another.<br />The Levenshtein distance is a measure of the similarity between two strings. Smaller distances mean the strings are more similar, and larger distances indicate more different strings. The distance is case sensitive." ),
          QList<HelpArg>()
              << HelpArg( "string1", tr( "a string" ), false, false, false, "" )
              << HelpArg( "string2", tr( "a string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "levenshtein('kittens','mitten')" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "levenshtein('Kitten','kitten')" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "levenshtein(upper('Kitten'),upper('kitten'))" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "lighter",
    Help( "lighter", tr( "function" ), tr( "Returns a lighter (or darker) color string" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "lighter" ), tr( "Returns a lighter (or darker) color string" ),
          QList<HelpArg>()
              << HelpArg( "color", tr( "a color string" ), false, false, false, "" )
              << HelpArg( "factor", tr( "a integer number corresponding to the lightening factor:<ul><li>if the factor is greater than 100, this functions returns a lighter color (for e.g., setting factor to 150 returns a color that is 50% brighter);</li><li>if the factor is less than 100, the return color is darker, but using the darker() function for this purpose is recommended;</li><li>if the factor is 0 or negative, the return value is unspecified.</li></ul>" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "lighter('200,10,30',200)" ), tr( "'255,158,168,255'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "line_interpolate_angle",
    Help( "line_interpolate_angle", tr( "function" ), tr( "Returns the angle parallel to the geometry at a specified distance along a linestring geometry. Angles are in degrees clockwise from north." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "line_interpolate_angle" ), tr( "Returns the angle parallel to the geometry at a specified distance along a linestring geometry. Angles are in degrees clockwise from north." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a linestring geometry" ), false, false, false, "" )
              << HelpArg( "distance", tr( "distance along line to interpolate angle at" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "line_interpolate_angle(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5)" ), tr( "90.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "line_interpolate_point",
    Help( "line_interpolate_point", tr( "function" ), tr( "Returns the point interpolated by a specified distance along a linestring geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "line_interpolate_point" ), tr( "Returns the point interpolated by a specified distance along a linestring geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a linestring geometry" ), false, false, false, "" )
              << HelpArg( "distance", tr( "distance along line to interpolate" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(line_interpolate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5))" ), tr( "'Point (5 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "line_locate_point",
    Help( "line_locate_point", tr( "function" ), tr( "Returns the distance along a linestring corresponding to the closest position the linestring comes to a specified point geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "line_locate_point" ), tr( "Returns the distance along a linestring corresponding to the closest position the linestring comes to a specified point geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a linestring geometry" ), false, false, false, "" )
              << HelpArg( "point", tr( "point geometry to locate closest position on linestring to" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "line_locate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),point:=geom_from_wkt('Point(5 0)'))" ), tr( "5.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "line_merge",
    Help( "line_merge", tr( "function" ), tr( "Returns a LineString or MultiLineString geometry, where any connected LineStrings from the input geometry have been merged into a single linestring. This function will return null if passed a geometry which is not a LineString/MultiLineString." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "line_merge" ), tr( "Returns a LineString or MultiLineString geometry, where any connected LineStrings from the input geometry have been merged into a single linestring. This function will return null if passed a geometry which is not a LineString/MultiLineString." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a LineString/MultiLineString geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(1 1, 2 2))')))" ), tr( "'LineString(0 0,1 1,2 2)'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(11 1, 21 2))')))" ), tr( "'MultiLineString((0 0, 1 1),(11 1, 21 2)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "line_substring",
    Help( "line_substring", tr( "function" ), tr( "Returns the portion of a line (or curve) geometry which falls between the specified start and end distances (measured from the beginning of the line). Z and M values are linearly interpolated from existing values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "line_substring" ), tr( "Returns the portion of a line (or curve) geometry which falls between the specified start and end distances (measured from the beginning of the line). Z and M values are linearly interpolated from existing values." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a linestring or curve geometry" ), false, false, false, "" )
              << HelpArg( "start_distance", tr( "distance to start of substring" ), false, false, false, "" )
              << HelpArg( "end_distance", tr( "distance to end of substring" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(line_substring(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),start_distance:=2,end_distance=6))" ), tr( "'LineString (2 0,6 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "ln",
    Help( "ln", tr( "function" ), tr( "Returns the natural logarithm of a value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "ln" ), tr( "Returns the natural logarithm of a value." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "numeric value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "ln(1)" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "ln(2.7182818284590452354)" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "log",
    Help( "log", tr( "function" ), tr( "Returns the value of the logarithm of the passed value and base." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "log" ), tr( "Returns the value of the logarithm of the passed value and base." ),
          QList<HelpArg>()
              << HelpArg( "base", tr( "any positive number" ), false, false, false, "" )
              << HelpArg( "value", tr( "any positive number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "log(2, 32)" ), tr( "5" ), tr( "" ) )
            << HelpExample( tr( "log(0.5, 32)" ), tr( "-5" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "log10",
    Help( "log10", tr( "function" ), tr( "Returns the value of the base 10 logarithm of the passed expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "log10" ), tr( "Returns the value of the base 10 logarithm of the passed expression." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "any positive number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "log10(1)" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "log10(100)" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "longest_common_substring",
    Help( "longest_common_substring", tr( "function" ), tr( "Returns the longest common substring between two strings. This substring is the longest string that is a substring of the two input strings. For example, the longest common substring of \"ABABC\" and \"BABCA\" is \"ABC\". The substring is case sensitive." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "longest_common_substring" ), tr( "Returns the longest common substring between two strings. This substring is the longest string that is a substring of the two input strings. For example, the longest common substring of \"ABABC\" and \"BABCA\" is \"ABC\". The substring is case sensitive." ),
          QList<HelpArg>()
              << HelpArg( "string1", tr( "a string" ), false, false, false, "" )
              << HelpArg( "string2", tr( "a string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "longest_common_substring('ABABC','BABCA')" ), tr( "'ABC'" ), tr( "" ) )
            << HelpExample( tr( "longest_common_substring('abcDeF','abcdef')" ), tr( "'abc'" ), tr( "" ) )
            << HelpExample( tr( "longest_common_substring(upper('abcDeF'),upper('abcdex'))" ), tr( "'ABCDE'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "lower",
    Help( "lower", tr( "function" ), tr( "Converts a string to lower case letters." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "lower" ), tr( "Converts a string to lower case letters." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the string to convert to lower case" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "lower('HELLO World')" ), tr( "'hello world'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "lpad",
    Help( "lpad", tr( "function" ), tr( "Returns a string padded on the left to the specified width, using a fill character. If the target width is smaller than the string's length, the string is truncated." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "lpad" ), tr( "Returns a string padded on the left to the specified width, using a fill character. If the target width is smaller than the string's length, the string is truncated." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string to pad" ), false, false, false, "" )
              << HelpArg( "width", tr( "length of new string" ), false, false, false, "" )
              << HelpArg( "fill", tr( "character to pad the remaining space with" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "lpad('Hello', 10, 'x')" ), tr( "'xxxxxHello'" ), tr( "" ) )
            << HelpExample( tr( "lpad('Hello', 3, 'x')" ), tr( "'Hel'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "m",
    Help( "m", tr( "function" ), tr( "Returns the m value of a point geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "m" ), tr( "Returns the m value of a point geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a point geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "m( geom_from_wkt( 'POINTM(2 5 4)' ) )" ), tr( "4" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "majority",
    Help( "majority", tr( "function" ), tr( "Returns the aggregate majority of values (most commonly occurring value) from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "majority" ), tr( "Returns the aggregate majority of values (most commonly occurring value) from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "majority(\"class\",group_by:=\"state\")" ), tr( "most commonly occurring class value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_circle",
    Help( "make_circle", tr( "function" ), tr( "Creates a circular polygon." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_circle" ), tr( "Creates a circular polygon." ),
          QList<HelpArg>()
              << HelpArg( "center", tr( "center point of the circle" ), false, false, false, "" )
              << HelpArg( "radius", tr( "radius of the circle" ), false, false, false, "" )
              << HelpArg( "segment", tr( "optional argument for polygon segmentation. By default this value is 36" ), false, false, true, "36" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_circle(make_point(10,10), 5, 4))" ), tr( "'Polygon ((10 15, 15 10, 10 5, 5 10, 10 15))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_circle(make_point(10,10,5), 5, 4))" ), tr( "'PolygonZ ((10 15 5, 15 10 5, 10 5 5, 5 10 5, 10 15 5))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_circle(make_point(10,10,5,30), 5, 4))" ), tr( "'PolygonZM ((10 15 5 30, 15 10 5 30, 10 5 5 30, 5 10 5 30, 10 15 5 30))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_ellipse",
    Help( "make_ellipse", tr( "function" ), tr( "Creates an elliptical polygon." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_ellipse" ), tr( "Creates an elliptical polygon." ),
          QList<HelpArg>()
              << HelpArg( "center", tr( "center point of the ellipse" ), false, false, false, "" )
              << HelpArg( "semi_major_axis", tr( "semi-major axis of the ellipse" ), false, false, false, "" )
              << HelpArg( "semi_minor_axis", tr( "semi-minor axis of the ellipse" ), false, false, false, "" )
              << HelpArg( "azimuth", tr( "orientation of the ellipse" ), false, false, false, "" )
              << HelpArg( "segment", tr( "optional argument for polygon segmentation. By default this value is 36" ), false, false, true, "36" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_ellipse(make_point(10,10), 5, 2, 90, 4))" ), tr( "'Polygon ((15 10, 10 8, 5 10, 10 12, 15 10))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_ellipse(make_point(10,10,5), 5, 2, 90, 4))" ), tr( "'PolygonZ ((15 10 5, 10 8 5, 5 10 5, 10 12 5, 15 10 5))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_ellipse(make_point(10,10,5,30), 5, 2, 90, 4))" ), tr( "'PolygonZM ((15 10 5 30, 10 8 5 30, 5 10 5 30, 10 12 5 30, 15 10 5 30))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_line",
    Help( "make_line", tr( "function" ), tr( "Creates a line geometry from a series of point geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_line" ), tr( "Creates a line geometry from a series of point geometries." ),
          QList<HelpArg>()
              << HelpArg( "point1", tr( "" ), false, true, false, "" )
              << HelpArg( "point2", tr( "" ), false, true, false, "" )
              << HelpArg( "point", tr( "a point geometry" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_line(make_point(2,4),make_point(3,5)))" ), tr( "'LineString (2 4, 3 5)'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_line(make_point(2,4),make_point(3,5),make_point(9,7)))" ), tr( "'LineString (2 4, 3 5, 9 7)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_point",
    Help( "make_point", tr( "function" ), tr( "Creates a point geometry from an x and y (and optional z and m) value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_point" ), tr( "Creates a point geometry from an x and y (and optional z and m) value." ),
          QList<HelpArg>()
              << HelpArg( "x", tr( "x coordinate of point" ), false, false, false, "" )
              << HelpArg( "y", tr( "y coordinate of point" ), false, false, false, "" )
              << HelpArg( "z", tr( "optional z coordinate of point" ), false, false, true, "" )
              << HelpArg( "m", tr( "optional m value of point" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_point(2,4))" ), tr( "'Point (2 4)'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_point(2,4,6))" ), tr( "'PointZ (2 4 6)'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_point(2,4,6,8))" ), tr( "'PointZM (2 4 6 8)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_point_m",
    Help( "make_point_m", tr( "function" ), tr( "Creates a point geometry from an x, y coordinate and m value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_point_m" ), tr( "Creates a point geometry from an x, y coordinate and m value." ),
          QList<HelpArg>()
              << HelpArg( "x", tr( "x coordinate of point" ), false, false, false, "" )
              << HelpArg( "y", tr( "y coordinate of point" ), false, false, false, "" )
              << HelpArg( "m", tr( "m value of point" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_point_m(2,4,6))" ), tr( "'PointM (2 4 6)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_polygon",
    Help( "make_polygon", tr( "function" ), tr( "Creates a polygon geometry from an outer ring and optional series of inner ring geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_polygon" ), tr( "Creates a polygon geometry from an outer ring and optional series of inner ring geometries." ),
          QList<HelpArg>()
              << HelpArg( "outerRing", tr( "closed line geometry for polygon's outer ring" ), false, false, false, "" )
              << HelpArg( "innerRing1", tr( "" ), false, true, true, "" )
              << HelpArg( "innerRing2", tr( "" ), false, true, true, "" )
              << HelpArg( "innerRing", tr( "optional closed line geometry for inner ring" ), true, false, true, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )')))" ), tr( "'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )'),geom_from_wkt('LINESTRING( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1 )'),geom_from_wkt('LINESTRING( 0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8 )')))" ), tr( "'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0),(0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1),(0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_rectangle_3points",
    Help( "make_rectangle_3points", tr( "function" ), tr( "Creates a rectangle from 3 points." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_rectangle_3points" ), tr( "Creates a rectangle from 3 points." ),
          QList<HelpArg>()
              << HelpArg( "point1", tr( "First point." ), false, false, false, "" )
              << HelpArg( "point2", tr( "Second point." ), false, false, false, "" )
              << HelpArg( "point3", tr( "Third point." ), false, false, false, "" )
              << HelpArg( "option", tr( "An optional argument to construct the rectangle. By default this value is 0. Value can be 0 (distance) or 1 (projected). Option distance: Second distance is equal to the distance between 2nd and 3rd point. Option projected: Second distance is equal to the distance of the perpendicular projection of the 3rd point on the segment or its extension." ), false, false, true, "0" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_rectangle(make_point(0, 0), make_point(0,5), make_point(5, 5), 0)))" ), tr( "'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_rectangle(make_point(0, 0), make_point(0,5), make_point(5, 3), 1)))" ), tr( "'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_regular_polygon",
    Help( "make_regular_polygon", tr( "function" ), tr( "Creates a regular polygon." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_regular_polygon" ), tr( "Creates a regular polygon." ),
          QList<HelpArg>()
              << HelpArg( "center", tr( "center of the regular polygon" ), false, false, false, "" )
              << HelpArg( "radius", tr( "second point. The first if the regular polygon is inscribed. The midpoint of the first side if the regular polygon is circumscribed." ), false, false, false, "" )
              << HelpArg( "number_sides", tr( "Number of sides/edges of the regular polygon" ), false, false, false, "" )
              << HelpArg( "circle", tr( "Optional argument to construct the regular polygon. By default this value is 0. Value can be 0 (inscribed) or 1 (circumscribed)" ), false, false, true, "0" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_regular_polygon(make_point(0,0), make_point(0,5), 5))" ), tr( "'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_regular_polygon(make_point(0,0), project(make_point(0,0), 4.0451, radians(36)), 5))" ), tr( "'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_square",
    Help( "make_square", tr( "function" ), tr( "Creates a square from a diagonal." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_square" ), tr( "Creates a square from a diagonal." ),
          QList<HelpArg>()
              << HelpArg( "point1", tr( "First point of the regular polygon" ), false, false, false, "" )
              << HelpArg( "point2", tr( "Second point" ), false, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_square( make_point(0,0), make_point(5,5)))" ), tr( "'Polygon ((0 0, -0 5, 5 5, 5 0, 0 0))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(make_square( make_point(5,0), make_point(5,5)))" ), tr( "'Polygon ((5 0, 2.5 2.5, 5 5, 7.5 2.5, 5 0))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "make_triangle",
    Help( "make_triangle", tr( "function" ), tr( "Creates a triangle polygon." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "make_triangle" ), tr( "Creates a triangle polygon." ),
          QList<HelpArg>()
              << HelpArg( "point 1", tr( "first point of the triangle" ), false, false, false, "" )
              << HelpArg( "point 2", tr( "second point of the triangle" ), false, false, false, "" )
              << HelpArg( "point 3", tr( "third point of the triangle" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10)))" ), tr( "'Triangle ((0 0, 5 5, 0 10, 0 0))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(boundary(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10))))" ), tr( "'LineString (0 0, 5 5, 0 10, 0 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map",
    Help( "map", tr( "function" ), tr( "Returns a map containing all the keys and values passed as pair of parameters." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map" ), tr( "Returns a map containing all the keys and values passed as pair of parameters." ),
          QList<HelpArg>()
              << HelpArg( "key1", tr( "" ), false, true, false, "" )
              << HelpArg( "value1", tr( "" ), false, true, false, "" )
              << HelpArg( "key2", tr( "" ), false, true, false, "" )
              << HelpArg( "value2", tr( "" ), false, true, false, "" )
              << HelpArg( "key", tr( "a key (string)" ), true, false, false, "" )
              << HelpArg( "value", tr( "a value" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "map('1','one','2', 'two')" ), tr( "{ '1': 'one', '2': 'two' }" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_akeys",
    Help( "map_akeys", tr( "function" ), tr( "Returns all the keys of a map as an array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_akeys" ), tr( "Returns all the keys of a map as an array." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_akeys(map('1','one','2','two'))" ), tr( "[ '1', '2' ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_avals",
    Help( "map_avals", tr( "function" ), tr( "Returns all the values of a map as an array." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_avals" ), tr( "Returns all the values of a map as an array." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_avals(map('1','one','2','two'))" ), tr( "[ 'one', 'two' ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_concat",
    Help( "map_concat", tr( "function" ), tr( "Returns a map containing all the entries of the given maps. If two maps contain the same key, the value of the second map is taken." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_concat" ), tr( "Returns a map containing all the entries of the given maps. If two maps contain the same key, the value of the second map is taken." ),
          QList<HelpArg>()
              << HelpArg( "map1", tr( "" ), false, true, false, "" )
              << HelpArg( "map2", tr( "" ), false, true, false, "" )
              << HelpArg( "map", tr( "a map" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "map_concat(map('1','one', '2','overridden'),map('2','two', '3','three'))" ), tr( "{ '1': 'one, '2': 'two', '3': 'three' }" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_delete",
    Help( "map_delete", tr( "function" ), tr( "Returns a map with the given key and its corresponding value deleted." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_delete" ), tr( "Returns a map with the given key and its corresponding value deleted." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map" ), false, false, false, "" )
              << HelpArg( "key", tr( "the key to delete" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_delete(map('1','one','2','two'),'2')" ), tr( "{ '1': 'one' }" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_exist",
    Help( "map_exist", tr( "function" ), tr( "Returns true if the given key exists in the map." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_exist" ), tr( "Returns true if the given key exists in the map." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map" ), false, false, false, "" )
              << HelpArg( "key", tr( "the key to lookup" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_exist(map('1','one','2','two'),'3')" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_get",
    Help( "map_get", tr( "function" ), tr( "Returns the value of a map, given it's key." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_get" ), tr( "Returns the value of a map, given it's key." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map" ), false, false, false, "" )
              << HelpArg( "key", tr( "the key to lookup" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_get(map('1','one','2','two'),'2')" ), tr( "'two'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_insert",
    Help( "map_insert", tr( "function" ), tr( "Returns a map with an added key/value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_insert" ), tr( "Returns a map with an added key/value." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "a map" ), false, false, false, "" )
              << HelpArg( "key", tr( "the key to add" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to add" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_insert(map('1','one'),'3','three')" ), tr( "{ '1': 'one', '3': 'three' }" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_to_hstore",
    Help( "map_to_hstore", tr( "function" ), tr( "Merge map elements into a hstore-formatted string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_to_hstore" ), tr( "Merge map elements into a hstore-formatted string." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "the input map" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_to_hstore(map('qgis','rocks'))" ), tr( "\"qgis\"=>\"rocks\"}" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "map_to_json",
    Help( "map_to_json", tr( "function" ), tr( "Merge map elements into a json-formatted string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "map_to_json" ), tr( "Merge map elements into a json-formatted string." ),
          QList<HelpArg>()
              << HelpArg( "map", tr( "the input map" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "map_to_json(map('qgis','rocks'))" ), tr( "{\"qgis\":\"rocks\"}" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "max",
    Help( "max", tr( "function" ), tr( "Returns the largest value in a set of values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "max" ), tr( "Returns the largest value in a set of values." ),
          QList<HelpArg>()
              << HelpArg( "value1", tr( "" ), false, true, false, "" )
              << HelpArg( "value2", tr( "" ), false, true, false, "" )
              << HelpArg( "value", tr( "a number" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "max(2,10.2,5.5)" ), tr( "10.2" ), tr( "" ) )
            << HelpExample( tr( "max(20.5,NULL,6.2)" ), tr( "20.5" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "max_length",
    Help( "max_length", tr( "function" ), tr( "Returns the maximum length of strings from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "max_length" ), tr( "Returns the maximum length of strings from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "max_length(\"town_name\",group_by:=\"state\")" ), tr( "maximum length of town_name, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "maximum",
    Help( "maximum", tr( "function" ), tr( "Returns the aggregate maximum value from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "maximum" ), tr( "Returns the aggregate maximum value from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "maximum(\"population\",group_by:=\"state\")" ), tr( "maximum population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "mean",
    Help( "mean", tr( "function" ), tr( "Returns the aggregate mean value from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "mean" ), tr( "Returns the aggregate mean value from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "mean(\"population\",group_by:=\"state\")" ), tr( "mean population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "median",
    Help( "median", tr( "function" ), tr( "Returns the aggregate median value from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "median" ), tr( "Returns the aggregate median value from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "median(\"population\",group_by:=\"state\")" ), tr( "median population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "min",
    Help( "min", tr( "function" ), tr( "Returns the smallest value in a set of values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "min" ), tr( "Returns the smallest value in a set of values." ),
          QList<HelpArg>()
              << HelpArg( "value1", tr( "" ), false, true, false, "" )
              << HelpArg( "value2", tr( "" ), false, true, false, "" )
              << HelpArg( "value", tr( "a number" ), true, false, false, "" ),
          /* variableLenArguments */ true,
          QList<HelpExample>()
            << HelpExample( tr( "min(20.5,10,6.2)" ), tr( "6.2" ), tr( "" ) )
            << HelpExample( tr( "min(2,-10.3,NULL)" ), tr( "-10.3" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "min_length",
    Help( "min_length", tr( "function" ), tr( "Returns the minimum length of strings from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "min_length" ), tr( "Returns the minimum length of strings from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "min_length(\"town_name\",group_by:=\"state\")" ), tr( "minimum length of town_name, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "minimal_circle",
    Help( "minimal_circle", tr( "function" ), tr( "Returns the minimal enclosing circle of a geometry. It represents the minimum circle that encloses all geometries within the set." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "minimal_circle" ), tr( "Returns the minimal enclosing circle of a geometry. It represents the minimum circle that encloses all geometries within the set." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "segment", tr( "optional argument for polygon segmentation. By default this value is 36" ), false, false, true, "36" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( minimal_circle( geom_from_wkt( 'LINESTRING(0 5, 0 -5, 2 1)' ), 4 ) )" ), tr( "Polygon ((0 5, 5 -0, -0 -5, -5 0, 0 5))" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt( minimal_circle( geom_from_wkt( 'MULTIPOINT(1 2, 3 4, 3 2)' ), 4 ) )" ), tr( "Polygon ((3 4, 3 2, 1 2, 1 4, 3 4))" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "minimum",
    Help( "minimum", tr( "function" ), tr( "Returns the aggregate minimum value from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "minimum" ), tr( "Returns the aggregate minimum value from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "minimum(\"population\",group_by:=\"state\")" ), tr( "minimum population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "minority",
    Help( "minority", tr( "function" ), tr( "Returns the aggregate minority of values (least occurring value) from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "minority" ), tr( "Returns the aggregate minority of values (least occurring value) from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "minority(\"class\",group_by:=\"state\")" ), tr( "least occurring class value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "minute",
    Help( "minute", tr( "function" ), tr( "Extract the minutes part from a datetime or time, or the number of minutes from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Time variant" ), tr( "Extract the minutes part from a time or datetime." ),
          QList<HelpArg>()
              << HelpArg( "datetime", tr( "a time or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "minute('2012-07-22T13:24:57')" ), tr( "24" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in minutes of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of minutes from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "minute(tointerval('3 minutes'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "minute(age('2012-07-22T00:20:00','2012-07-22T00:00:00'))" ), tr( "20" ), tr( "" ) )
            << HelpExample( tr( "minute(age('2012-01-01','2010-01-01'))" ), tr( "1051200" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "month",
    Help( "month", tr( "function" ), tr( "Extract the month part from a date, or the number of months from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Date variant" ), tr( "Extract the month part from a date or datetime." ),
          QList<HelpArg>()
              << HelpArg( "date", tr( "a date or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "month('2012-05-12')" ), tr( "05" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in months of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of months from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "month(to_interval('3 months'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "month(age('2012-01-01','2010-01-01'))" ), tr( "4.03333" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "nodes_to_points",
    Help( "nodes_to_points", tr( "function" ), tr( "Returns a multipoint geometry consisting of every node in the input geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "nodes_to_points" ), tr( "Returns a multipoint geometry consisting of every node in the input geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry object" ), false, false, false, "" )
              << HelpArg( "ignore_closing_nodes", tr( "optional argument specifying whether to include duplicate nodes which close lines or polygons rings. Defaults to false, set to true to avoid including these duplicate nodes in the output collection." ), false, false, true, "false" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(nodes_to_points(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')))" ), tr( "'MultiPoint ((0 0),(1 1),(2 2))'" ), tr( "" ) )
            << HelpExample( tr( "geom_to_wkt(nodes_to_points(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'),true))" ), tr( "'MultiPoint ((-1 -1),(4 0),(4 2),(0 2))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "now",
    Help( "now", tr( "function" ), tr( "Returns the current date and time. The function is static and will return consistent results while evaluating. The time returned is the time when the expression is prepared." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "now" ), tr( "Returns the current date and time. The function is static and will return consistent results while evaluating. The time returned is the time when the expression is prepared." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "now()" ), tr( "2012-07-22T13:24:57" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "nullif",
    Help( "nullif", tr( "function" ), tr( "Returns a null value if value1 equals value2; otherwise it returns value1. This can be used to conditionally substitute values with NULL." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "nullif" ), tr( "Returns a null value if value1 equals value2; otherwise it returns value1. This can be used to conditionally substitute values with NULL." ),
          QList<HelpArg>()
              << HelpArg( "value1", tr( "The value that should either be used or substituted with NULL." ), false, false, false, "" )
              << HelpArg( "value2", tr( "The control value that will trigger the NULL substitution." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "nullif('(none)', '(none)')" ), tr( "NULL" ), tr( "" ) )
            << HelpExample( tr( "nullif('text', '(none)')" ), tr( "'text'" ), tr( "" ) )
            << HelpExample( tr( "nullif(\"name\", '')" ), tr( "NULL, if name is an empty string (or already NULL), the name in any other case." ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "num_geometries",
    Help( "num_geometries", tr( "function" ), tr( "Returns the number of geometries in a geometry collection, or null if the input geometry is not a collection." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "num_geometries" ), tr( "Returns the number of geometries in a geometry collection, or null if the input geometry is not a collection." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry collection" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "num_geometries(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))'))" ), tr( "4" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "num_interior_rings",
    Help( "num_interior_rings", tr( "function" ), tr( "Returns the number of interior rings in a polygon or geometry collection, or null if the input geometry is not a polygon or collection." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "num_interior_rings" ), tr( "Returns the number of interior rings in a polygon or geometry collection, or null if the input geometry is not a polygon or collection." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "input geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "num_interior_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))'))" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "num_points",
    Help( "num_points", tr( "function" ), tr( "Returns the number of vertices in a geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "num_points" ), tr( "Returns the number of vertices in a geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "num_points($geometry)" ), tr( "number of vertices in $geometry" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "num_rings",
    Help( "num_rings", tr( "function" ), tr( "Returns the number of rings (including exterior rings) in a polygon or geometry collection, or null if the input geometry is not a polygon or collection." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "num_rings" ), tr( "Returns the number of rings (including exterior rings) in a polygon or geometry collection, or null if the input geometry is not a polygon or collection." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "input geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "num_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))'))" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "num_selected",
    Help( "num_selected", tr( "function" ), tr( "Returns the number of selected features on a given layer. By default works on the layer on which the expression is evaluated." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "num_selected" ), tr( "Returns the number of selected features on a given layer. By default works on the layer on which the expression is evaluated." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "The layer (or its id or name) on which the selection will be checked." ), false, false, true, "current layer" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "num_selected()" ), tr( "The number of selected features on the current layer." ), tr( "" ) )
            << HelpExample( tr( "num_selected('streets')" ), tr( "The number of selected features on the layer streets" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "offset_curve",
    Help( "offset_curve", tr( "function" ), tr( "Returns a geometry formed by offsetting a linestring geometry to the side. Distances are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "offset_curve" ), tr( "Returns a geometry formed by offsetting a linestring geometry to the side. Distances are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a (multi)linestring geometry" ), false, false, false, "" )
              << HelpArg( "distance", tr( "offset distance. Positive values will be buffered to the left of lines, negative values to the right" ), false, false, false, "" )
              << HelpArg( "segments", tr( "number of segments to use to represent a quarter circle when a round join style is used. A larger number results in a smoother line with more nodes." ), false, false, true, "8" )
              << HelpArg( "join", tr( "join style for corners, where 1 = round, 2 = miter and 3 = bevel" ), false, false, true, "1" )
              << HelpArg( "miter_limit", tr( "limit on the miter ratio used for very sharp corners (when using miter joins only)" ), false, false, true, "2.0" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "offset_curve($geometry, 10.5)" ), tr( "line offset to the left by 10.5 units" ), tr( "" ) )
            << HelpExample( tr( "offset_curve($geometry, -10.5)" ), tr( "line offset to the right by 10.5 units" ), tr( "" ) )
            << HelpExample( tr( "offset_curve($geometry, 10.5, segments=16, join=1)" ), tr( "line offset to the left by 10.5 units, using more segments to result in a smoother curve" ), tr( "" ) )
            << HelpExample( tr( "offset_curve($geometry, 10.5, join=3)" ), tr( "line offset to the left by 10.5 units, using a beveled join" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "*",
    Help( "*", tr( "operator" ), tr( "Multiplication of two values" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "*" ), tr( "Multiplication of two values" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 * 4" ), tr( "20" ), tr( "" ) )
            << HelpExample( tr( "5 * NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "||",
    Help( "||", tr( "operator" ), tr( "Joins two values together into a string.<br><br>If one of the values is NULL the result will be NULL. See the CONCAT function for a different behavior." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "||" ), tr( "Joins two values together into a string.<br><br>If one of the values is NULL the result will be NULL. See the CONCAT function for a different behavior." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'Here' || ' and ' || 'there'" ), tr( "'Here and there'" ), tr( "" ) )
            << HelpExample( tr( "'Nothing' || NULL" ), tr( "NULL" ), tr( "" ) )
            << HelpExample( tr( "'Dia: ' || \"Diameter\"" ), tr( "'Dia: 25'" ), tr( "" ) )
            << HelpExample( tr( "1 || 2" ), tr( "'12'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "/",
    Help( "/", tr( "operator" ), tr( "Division of two values" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "/" ), tr( "Division of two values" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 / 4" ), tr( "1.25" ), tr( "" ) )
            << HelpExample( tr( "5 / NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "=",
    Help( "=", tr( "operator" ), tr( "Compares two values and evaluates to 1 if they are equal." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "=" ), tr( "Compares two values and evaluates to 1 if they are equal." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 = 4" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "4 = 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "5 = NULL" ), tr( "NULL" ), tr( "" ) )
            << HelpExample( tr( "NULL = NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "^",
    Help( "^", tr( "operator" ), tr( "Power of two values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "^" ), tr( "Power of two values." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 ^ 4" ), tr( "625" ), tr( "" ) )
            << HelpExample( tr( "5 ^ NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( ">=",
    Help( ">=", tr( "operator" ), tr( "Compares two values and evaluates to 1 if the left value is greater or equal than the right value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( ">=" ), tr( "Compares two values and evaluates to 1 if the left value is greater or equal than the right value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 &gt;= 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "5 &gt;= 5" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 &gt;= 5" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( ">",
    Help( ">", tr( "operator" ), tr( "Compares two values and evaluates to 1 if the left value is greater than the right value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( ">" ), tr( "Compares two values and evaluates to 1 if the left value is greater than the right value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 &gt; 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "5 &gt; 5" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "4 &gt; 5" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "[]",
    Help( "[]", tr( "operator" ), tr( "Index operator. Returns an element from an array or map value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "[]" ), tr( "Index operator. Returns an element from an array or map value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "array(1,2,3)[0]" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "array(1,2,3)[2]" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "array(1,2,3)[-1]" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "map('a',1,'b',2)['a']" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "map('a',1,'b',2)['b']" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "<=",
    Help( "<=", tr( "operator" ), tr( "Compares two values and evaluates to 1 if the left value is less or equal than the right value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "<=" ), tr( "Compares two values and evaluates to 1 if the left value is less or equal than the right value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 &lt;= 4" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "5 &lt;= 5" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 &lt;= 5" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "<",
    Help( "<", tr( "operator" ), tr( "Compares two values and evaluates to 1 if the left value is less than the right value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "<" ), tr( "Compares two values and evaluates to 1 if the left value is less than the right value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 &lt; 4" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "5 &lt; 5" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "4 &lt; 5" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "-",
    Help( "-", tr( "operator" ), tr( "Subtraction of two values. If one of the values is NULL the result will be NULL." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "-" ), tr( "Subtraction of two values. If one of the values is NULL the result will be NULL." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 - 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "5 - NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "%",
    Help( "%", tr( "operator" ), tr( "Remainder of division" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "%" ), tr( "Remainder of division" ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 % 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "5 % NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "<>",
    Help( "<>", tr( "operator" ), tr( "Compares two values and evaluates to 1 if they are not equal." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "<>" ), tr( "Compares two values and evaluates to 1 if they are not equal." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 &lt;&gt; 4" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "4 &lt;&gt; 4" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "5 &lt;&gt; NULL" ), tr( "NULL" ), tr( "" ) )
            << HelpExample( tr( "NULL &lt;&gt; NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "+",
    Help( "+", tr( "operator" ), tr( "Addition of two values. If one of the values is NULL the result will be NULL." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "+" ), tr( "Addition of two values. If one of the values is NULL the result will be NULL." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "5 + 4" ), tr( "9" ), tr( "" ) )
            << HelpExample( tr( "5 + NULL" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "~",
    Help( "~", tr( "operator" ), tr( "Performs a regular expression match on a string value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "~" ), tr( "Performs a regular expression match on a string value." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "'hello' ~ 'll'" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "'hello' ~ '^ll'" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "'hello' ~ 'llo$'" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "order_parts",
    Help( "order_parts", tr( "function" ), tr( "Orders the parts of a MultiGeometry by a given criteria" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "order_parts" ), tr( "Orders the parts of a MultiGeometry by a given criteria" ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a multi-type geometry" ), false, false, false, "" )
              << HelpArg( "orderby", tr( "an expression string defining the order criteria" ), false, false, false, "" )
              << HelpArg( "ascending", tr( "boolean, True for ascending, False for descending" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "order_parts(geom_from_wkt('MultiPolygon (((1 1, 5 1, 5 5, 1 5, 1 1)),((1 1, 9 1, 9 9, 1 9, 1 1)))'), 'area($geometry)', False)" ), tr( "MultiPolygon (((1 1, 9 1, 9 9, 1 9, 1 1)),((1 1, 5 1, 5 5, 1 5, 1 1)))" ), tr( "" ) )
            << HelpExample( tr( "order_parts(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), '1', True)" ), tr( "LineString(1 2, 3 2, 4 3)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "oriented_bbox",
    Help( "oriented_bbox", tr( "function" ), tr( "Returns a geometry which represents the minimal oriented bounding box of an input geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "oriented_bbox" ), tr( "Returns a geometry which represents the minimal oriented bounding box of an input geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( oriented_bbox( geom_from_wkt( 'MULTIPOINT(1 2, 3 4, 3 2)' ) ) )" ), tr( "Polygon ((1 4, 1 2, 3 2, 3 4, 1 4))" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "overlaps",
    Help( "overlaps", tr( "function" ), tr( "Tests whether a geometry overlaps another. Returns true if the geometries share space, are of the same dimension, but are not completely contained by each other." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "overlaps" ), tr( "Tests whether a geometry overlaps another. Returns true if the geometries share space, are of the same dimension, but are not completely contained by each other." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "overlaps( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 5, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "overlaps( geom_from_wkt( 'LINESTRING(0 0, 1 1)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "parameter",
    Help( "parameter", tr( "function" ), tr( "Returns the value of a processing algorithm input parameter." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "parameter" ), tr( "Returns the value of a processing algorithm input parameter." ),
          QList<HelpArg>()
              << HelpArg( "name", tr( "name of the corresponding input parameter" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "parameter('BUFFER_SIZE')" ), tr( "5.6" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "perimeter",
    Help( "perimeter", tr( "function" ), tr( "Returns the perimeter of a geometry polygon object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned perimeter will match the units for the SRS. This differs from the calculations performed by the $perimeter function, which will perform ellipsoidal calculations based on the project's ellipsoid and distance unit settings." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "perimeter" ), tr( "Returns the perimeter of a geometry polygon object. Calculations are always planimetric in the Spatial Reference System (SRS) of this geometry, and the units of the returned perimeter will match the units for the SRS. This differs from the calculations performed by the $perimeter function, which will perform ellipsoidal calculations based on the project's ellipsoid and distance unit settings." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "polygon geometry object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "perimeter(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'))" ), tr( "12.0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "pi",
    Help( "pi", tr( "function" ), tr( "Returns value of pi for calculations." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "pi" ), tr( "Returns value of pi for calculations." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "pi()" ), tr( "3.14159265358979" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "point_n",
    Help( "point_n", tr( "function" ), tr( "Returns a specific node from a geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "point_n" ), tr( "Returns a specific node from a geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry object" ), false, false, false, "" )
              << HelpArg( "index", tr( "index of node to return, where 1 is the first node; if the value is negative, the selected vertex index will be its total count minus the absolute value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(point_n(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'),2))" ), tr( "'Point (4 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "point_on_surface",
    Help( "point_on_surface", tr( "function" ), tr( "Returns a point guaranteed to lie on the surface of a geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "point_on_surface" ), tr( "Returns a point guaranteed to lie on the surface of a geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "point_on_surface($geometry)" ), tr( "a point geometry" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "pole_of_inaccessibility",
    Help( "pole_of_inaccessibility", tr( "function" ), tr( "Calculates the approximate pole of inaccessibility for a surface, which is the most distant internal point from the boundary of the surface. This function uses the 'polylabel' algorithm (Vladimir Agafonkin, 2016), which is an iterative approach guaranteed to find the true pole of inaccessibility within a specified tolerance. More precise tolerances require more iterations and will take longer to calculate." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "pole_of_inaccessibility" ), tr( "Calculates the approximate pole of inaccessibility for a surface, which is the most distant internal point from the boundary of the surface. This function uses the 'polylabel' algorithm (Vladimir Agafonkin, 2016), which is an iterative approach guaranteed to find the true pole of inaccessibility within a specified tolerance. More precise tolerances require more iterations and will take longer to calculate." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "tolerance", tr( "maximum distance between the returned point and the true pole location" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(pole_of_inaccessibility( geom_from_wkt('POLYGON((0 1,0 9,3 10,3 3, 10 3, 10 1, 0 1))'), 0.1))" ), tr( "Point(1.55, 1.55)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "project",
    Help( "project", tr( "function" ), tr( "Returns a point projected from a start point using a distance and bearing (azimuth) in radians." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "project" ), tr( "Returns a point projected from a start point using a distance and bearing (azimuth) in radians." ),
          QList<HelpArg>()
              << HelpArg( "point", tr( "start point" ), false, false, false, "" )
              << HelpArg( "distance", tr( "distance to project" ), false, false, false, "" )
              << HelpArg( "bearing", tr( "bearing in radians clockwise, where 0 corresponds to north" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "project(make_point(1, 2), 3, radians(270))" ), tr( "Point(-2, 2)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "project_color",
    Help( "project_color", tr( "function" ), tr( "Returns a color from the project's color scheme." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "project_color" ), tr( "Returns a color from the project's color scheme." ),
          QList<HelpArg>()
              << HelpArg( "name", tr( "a color name" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "project_color('Logo color')" ), tr( "20,140,50" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "q1",
    Help( "q1", tr( "function" ), tr( "Returns the calculated first quartile from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "q1" ), tr( "Returns the calculated first quartile from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "q1(\"population\",group_by:=\"state\")" ), tr( "first quartile of population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "q3",
    Help( "q3", tr( "function" ), tr( "Returns the calculated third quartile from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "q3" ), tr( "Returns the calculated third quartile from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "q3(\"population\",group_by:=\"state\")" ), tr( "third quartile of population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "radians",
    Help( "radians", tr( "function" ), tr( "Converts from degrees to radians." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "radians" ), tr( "Converts from degrees to radians." ),
          QList<HelpArg>()
              << HelpArg( "degrees", tr( "numeric value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "radians(180)" ), tr( "3.14159" ), tr( "" ) )
            << HelpExample( tr( "radians(57.2958)" ), tr( "1" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "ramp_color",
    Help( "ramp_color", tr( "function" ), tr( "Returns a string representing a color from a color ramp." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Saved ramp variant" ), tr( "Returns a string representing a color from a saved ramp" ),
          QList<HelpArg>()
              << HelpArg( "ramp_name", tr( "the name of the color ramp as a string, for example 'Spectral'" ), false, false, false, "" )
              << HelpArg( "value", tr( "the position on the ramp to select the color from as a real number between 0 and 1" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "ramp_color('Spectral',0.3)" ), tr( "'253,190,115,255'" ), tr( "" ) ),
      tr( "The color ramps available vary between QGIS installations. This function may not give the expected results if you move your QGIS project between installations." )
       )
        << HelpVariant( tr( "Expression-created ramp variant" ), tr( "Returns a string representing a color from an expression-created ramp" ),
          QList<HelpArg>()
              << HelpArg( "ramp", tr( "the color ramp" ), false, false, false, "" )
              << HelpArg( "value", tr( "the position on the ramp to select the color from as a real number between 0 and 1" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1)" ), tr( "'255,0,0,255'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "rand",
    Help( "rand", tr( "function" ), tr( "Returns a random integer within the range specified by the minimum and maximum argument (inclusive)." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "rand" ), tr( "Returns a random integer within the range specified by the minimum and maximum argument (inclusive)." ),
          QList<HelpArg>()
              << HelpArg( "min", tr( "an integer representing the smallest possible random number desired" ), false, false, false, "" )
              << HelpArg( "max", tr( "an integer representing the largest possible random number desired" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "rand(1, 10)" ), tr( "8" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "randf",
    Help( "randf", tr( "function" ), tr( "Returns a random float within the range specified by the minimum and maximum argument (inclusive)." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "randf" ), tr( "Returns a random float within the range specified by the minimum and maximum argument (inclusive)." ),
          QList<HelpArg>()
              << HelpArg( "min", tr( "an float representing the smallest possible random number desired" ), false, false, true, "0.0" )
              << HelpArg( "max", tr( "an float representing the largest possible random number desired" ), false, false, true, "1.0" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "randf(1, 10)" ), tr( "4.59258286403147" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "range",
    Help( "range", tr( "function" ), tr( "Returns the aggregate range of values (maximum - minimum) from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "range" ), tr( "Returns the aggregate range of values (maximum - minimum) from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "range(\"population\",group_by:=\"state\")" ), tr( "range of population values, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "raster_statistic",
    Help( "raster_statistic", tr( "function" ), tr( "Returns statistics from a raster layer." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "raster_statistic" ), tr( "Returns statistics from a raster layer." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "a string, representing either a raster layer name or layer ID" ), false, false, false, "" )
              << HelpArg( "band", tr( "integer representing the band number from the raster layer, starting at 1" ), false, false, false, "" )
              << HelpArg( "property", tr( "a string corresponding to the property to return. Valid options are:<br /><ul><li>min: minimum value</li><li>max: maximum value</li><li>avg: average (mean) value</li><li>stdev: standard deviation of values</li><li>range: range of values (max - min)</li><li>sum: sum of all values from raster</li></ul>" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "raster_statistic('lc',1,'avg')" ), tr( "Average value from band 1 from 'lc' raster layer" ), tr( "" ) )
            << HelpExample( tr( "raster_statistic('ac2010',3,'min')" ), tr( "Minimum value from band 3 from 'ac2010' raster layer" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "raster_value",
    Help( "raster_value", tr( "function" ), tr( "Returns the raster value found at the provided point." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "raster_value" ), tr( "Returns the raster value found at the provided point." ),
          QList<HelpArg>()
              << HelpArg( "layer", tr( "the name or id of a raster layer" ), false, false, false, "" )
              << HelpArg( "band", tr( "the band number to sample the value from." ), false, false, false, "" )
              << HelpArg( "point", tr( "point geometry (for multipart geometries having more than one part, a null value will be returned)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "raster_value('dem', 1, make_point(1,1))" ), tr( "25" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "regexp_match",
    Help( "regexp_match", tr( "function" ), tr( "Return the first matching position matching a regular expression within a string, or 0 if the substring is not found." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "regexp_match" ), tr( "Return the first matching position matching a regular expression within a string, or 0 if the substring is not found." ),
          QList<HelpArg>()
              << HelpArg( "input_string", tr( "the string to test against the regular expression" ), false, false, false, "" )
              << HelpArg( "regex", tr( "The regular expression to test against. Backslash characters must be double escaped (e.g., \"\\\\s\" to match a white space character)." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "regexp_match('QGIS ROCKS','\\\\sROCKS')" ), tr( "4" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "regexp_matches",
    Help( "regexp_matches", tr( "function" ), tr( "Returns an array of all strings captured by capturing groups, in the order the groups themselves appear in the supplied regular expression against a string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "regexp_matches" ), tr( "Returns an array of all strings captured by capturing groups, in the order the groups themselves appear in the supplied regular expression against a string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the string to capture groups from against the regular expression" ), false, false, false, "" )
              << HelpArg( "regex", tr( "the regular expression used to capture groups" ), false, false, false, "" )
              << HelpArg( "empty_value", tr( "the optional string to use as replacement for empty (zero length) matches" ), false, false, true, "''" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "regexp_matches('QGIS=>rocks','(.*)=>(.*)')" ), tr( "[ 'QGIS', 'rocks' ]" ), tr( "" ) )
            << HelpExample( tr( "regexp_matches('key=>','(.*)=>(.*)','empty value')" ), tr( "[ 'key', 'empty value' ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "regexp_replace",
    Help( "regexp_replace", tr( "function" ), tr( "Returns a string with the supplied regular expression replaced." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "regexp_replace" ), tr( "Returns a string with the supplied regular expression replaced." ),
          QList<HelpArg>()
              << HelpArg( "input_string", tr( "the string to replace matches in" ), false, false, false, "" )
              << HelpArg( "regex", tr( "The regular expression to replace. Backslash characters must be double escaped (e.g., \"\\\\s\" to match a white space character)." ), false, false, false, "" )
              << HelpArg( "replacement", tr( "The string that will replace any matching occurrences of the supplied regular expression. Captured groups can be inserted into the replacement string using \\\\1, \\\\2, etc." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "regexp_replace('QGIS SHOULD ROCK','\\\\sSHOULD\\\\s',' DOES ')" ), tr( "'QGIS DOES ROCK'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "regexp_substr",
    Help( "regexp_substr", tr( "function" ), tr( "Returns the portion of a string which matches a supplied regular expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "regexp_substr" ), tr( "Returns the portion of a string which matches a supplied regular expression." ),
          QList<HelpArg>()
              << HelpArg( "input_string", tr( "the string to find matches in" ), false, false, false, "" )
              << HelpArg( "regex", tr( "The regular expression to match against. Backslash characters must be double escaped (e.g., \"\\\\s\" to match a white space character)." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "regexp_substr('abc123','(\\\\d+)')" ), tr( "'123'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "relate",
    Help( "relate", tr( "function" ), tr( "Tests the Dimensional Extended 9 Intersection Model (DE-9IM) representation of the relationship between two geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Relationship variant" ), tr( "Returns the Dimensional Extended 9 Intersection Model (DE-9IM) representation of the relationship between two geometries." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ) )" ), tr( "'FF1F00102'" ), tr( "" ) )
       )
        << HelpVariant( tr( "Pattern match variant" ), tr( "Tests whether the DE-9IM relationship between two geometries matches a specified pattern." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "pattern", tr( "DE-9IM pattern to match" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ), '**1F001**' )" ), tr( "True" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "relation_aggregate",
    Help( "relation_aggregate", tr( "function" ), tr( "Returns an aggregate value calculated using all matching child features from a layer relation." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "relation_aggregate" ), tr( "Returns an aggregate value calculated using all matching child features from a layer relation." ),
          QList<HelpArg>()
              << HelpArg( "relation", tr( "a string, representing a relation ID" ), false, false, false, "" )
              << HelpArg( "aggregate", tr( "a string corresponding to the aggregate to calculate. Valid options are:<br /><ul><li>count</li><li>count_distinct</li><li>count_missing</li><li>min</li><li>max</li><li>sum</li><li>mean</li><li>median</li><li>stdev</li><li>stdevsample</li><li>range</li><li>minority</li><li>majority</li><li>q1: first quartile</li><li>q3: third quartile</li><li>iqr: inter quartile range</li><li>min_length: minimum string length</li><li>max_length: maximum string length</li><li>concatenate: join strings with a concatenator</li></ul>" ), false, false, false, "" )
              << HelpArg( "expression", tr( "sub expression or field name to aggregate" ), false, false, false, "" )
              << HelpArg( "concatenator", tr( "optional string to use to join values for 'concatenate' aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "relation_aggregate(relation:='my_relation',aggregate:='mean',expression:=\"passengers\")" ), tr( "mean value of all matching child features using the 'my_relation' relation" ), tr( "" ) )
            << HelpExample( tr( "relation_aggregate('my_relation','sum', \"passengers\"/7)" ), tr( "sum of the passengers field divided by 7 for all matching child features using the 'my_relation' relation" ), tr( "" ) )
            << HelpExample( tr( "relation_aggregate('my_relation','concatenate', \"towns\", concatenator:=',')" ), tr( "comma separated list of the towns field for all matching child features using the 'my_relation' relation" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "replace",
    Help( "replace", tr( "function" ), tr( "Returns a string with the supplied string, array, or map of strings replaced." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "String & array variant" ), tr( "Returns a string with the supplied string or array of strings replaced by a string or an array of strings." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the input string" ), false, false, false, "" )
              << HelpArg( "before", tr( "the string or array of strings to replace" ), false, false, false, "" )
              << HelpArg( "after", tr( "the string or array of strings to use as a replacement" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "replace('QGIS SHOULD ROCK','SHOULD','DOES')" ), tr( "'QGIS DOES ROCK'" ), tr( "" ) )
            << HelpExample( tr( "replace('QGIS ABC',array('A','B','C'),array('X','Y','Z'))" ), tr( "'QGIS XYZ'" ), tr( "" ) )
            << HelpExample( tr( "replace('QGIS',array('Q','S'),'')" ), tr( "'GI'" ), tr( "" ) )
       )
        << HelpVariant( tr( "Map variant" ), tr( "Returns a string with the supplied map keys replaced by paired values." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the input string" ), false, false, false, "" )
              << HelpArg( "map", tr( "the map containing keys and values" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "replace('APP SHOULD ROCK',map('APP','QGIS','SHOULD','DOES'))" ), tr( "'QGIS DOES ROCK'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "represent_value",
    Help( "represent_value", tr( "function" ), tr( "Returns the configured representation value for a field value. It depends on the configured widget type. Often, this is useful for 'Value Map' widgets." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "represent_value" ), tr( "Returns the configured representation value for a field value. It depends on the configured widget type. Often, this is useful for 'Value Map' widgets." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "The value which should be resolved. Most likely a field." ), false, false, false, "" )
              << HelpArg( "fieldName", tr( "The field name for which the widget configuration should be loaded. (Optional)" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "represent_value(\"field_with_value_map\")" ), tr( "Description for value" ), tr( "" ) )
            << HelpExample( tr( "represent_value('static value', 'field_name')" ), tr( "Description for static value" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "reverse",
    Help( "reverse", tr( "function" ), tr( "Reverses the direction of a line string by reversing the order of its vertices." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "reverse" ), tr( "Reverses the direction of a line string by reversing the order of its vertices." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(reverse(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')))" ), tr( "'LINESTRING(2 2, 1 1, 0 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "right",
    Help( "right", tr( "function" ), tr( "Returns a substring that contains the <i>n</i> rightmost characters of the string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "right" ), tr( "Returns a substring that contains the <i>n</i> rightmost characters of the string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "a string" ), false, false, false, "" )
              << HelpArg( "length", tr( "integer. The number of characters from the right of the string to return." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "right('Hello World',5)" ), tr( "'World'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "round",
    Help( "round", tr( "function" ), tr( "Rounds a number to number of decimal places." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "round" ), tr( "Rounds a number to number of decimal places." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "decimal number to be rounded" ), false, false, false, "" )
              << HelpArg( "places", tr( "Optional integer representing number of places to round decimals to. Can be negative." ), false, false, true, "0" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "round(1234.567, 2)" ), tr( "1234.57" ), tr( "" ) )
            << HelpExample( tr( "round(1234.567)" ), tr( "1235" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "rpad",
    Help( "rpad", tr( "function" ), tr( "Returns a string padded on the right to the specified width, using a fill character. If the target width is smaller than the string's length, the string is truncated." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "rpad" ), tr( "Returns a string padded on the right to the specified width, using a fill character. If the target width is smaller than the string's length, the string is truncated." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string to pad" ), false, false, false, "" )
              << HelpArg( "width", tr( "length of new string" ), false, false, false, "" )
              << HelpArg( "fill", tr( "character to pad the remaining space with" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "rpad('Hello', 10, 'x')" ), tr( "'Helloxxxxx'" ), tr( "" ) )
            << HelpExample( tr( "rpad('Hello', 3, 'x')" ), tr( "'Hel'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "scale_exp",
    Help( "scale_exp", tr( "function" ), tr( "Transforms a given value from an input domain to an output range using an exponential curve. This function can be used to ease values in or out of the specified output range." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "scale_exp" ), tr( "Transforms a given value from an input domain to an output range using an exponential curve. This function can be used to ease values in or out of the specified output range." ),
          QList<HelpArg>()
              << HelpArg( "val", tr( "A value in the input domain. The function will return a corresponding scaled value in the output range." ), false, false, false, "" )
              << HelpArg( "domain_min", tr( "Specifies the minimum value in the input domain, the smallest value the input value should take." ), false, false, false, "" )
              << HelpArg( "domain_max", tr( "Specifies the maximum value in the input domain, the largest value the input value should take." ), false, false, false, "" )
              << HelpArg( "range_min", tr( "Specifies the minimum value in the output range, the smallest value which should be output by the function." ), false, false, false, "" )
              << HelpArg( "range_max", tr( "Specifies the maximum value in the output range, the largest value which should be output by the function." ), false, false, false, "" )
              << HelpArg( "exponent", tr( "A positive value (greater than 0), which dictates the way input values are mapped to the output range. Large exponents will cause the output values to 'ease in', starting slowly before accelerating as the input values approach the domain maximum. Smaller exponents (less than 1) will cause output values to 'ease out', where the mapping starts quickly but slows as it approaches the domain maximum." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "scale_exp(5,0,10,0,100,2)" ), tr( "25" ), tr( "easing in, using an exponent of 2" ) )
            << HelpExample( tr( "scale_exp(3,0,10,0,100,0.5)" ), tr( "54.772" ), tr( "easing out, using an exponent of 0.5" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "scale_linear",
    Help( "scale_linear", tr( "function" ), tr( "Transforms a given value from an input domain to an output range using linear interpolation." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "scale_linear" ), tr( "Transforms a given value from an input domain to an output range using linear interpolation." ),
          QList<HelpArg>()
              << HelpArg( "val", tr( "A value in the input domain. The function will return a corresponding scaled value in the output range." ), false, false, false, "" )
              << HelpArg( "domain_min", tr( "Specifies the minimum value in the input domain, the smallest value the input value should take." ), false, false, false, "" )
              << HelpArg( "domain_max", tr( "Specifies the maximum value in the input domain, the largest value the input value should take." ), false, false, false, "" )
              << HelpArg( "range_min", tr( "Specifies the minimum value in the output range, the smallest value which should be output by the function." ), false, false, false, "" )
              << HelpArg( "range_max", tr( "Specifies the maximum value in the output range, the largest value which should be output by the function." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "scale_linear(5,0,10,0,100)" ), tr( "72" ), tr( "" ) )
            << HelpExample( tr( "scale_linear(0.2,0,1,0,360)" ), tr( "72" ), tr( "scaling a value between 0 and 1 to an angle between 0 and 360" ) )
            << HelpExample( tr( "scale_linear(1500,1000,10000,9,20)" ), tr( "10.22" ), tr( "scaling a population which varies between 1000 and 10000 to a font size between 9 and 20" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "second",
    Help( "second", tr( "function" ), tr( "Extract the seconds part from a datetime or time, or the number of seconds from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Time variant" ), tr( "Extract the seconds part from a time or datetime." ),
          QList<HelpArg>()
              << HelpArg( "datetime", tr( "a time or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "second('2012-07-22T13:24:57')" ), tr( "57" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in seconds of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of seconds from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "second(age('2012-07-22T00:20:00','2012-07-22T00:00:00'))" ), tr( "1200" ), tr( "" ) )
            << HelpExample( tr( "second(age('2012-01-01','2010-01-01'))" ), tr( "63072000" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "segments_to_lines",
    Help( "segments_to_lines", tr( "function" ), tr( "Returns a multi line geometry consisting of a line for every segment in the input geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "segments_to_lines" ), tr( "Returns a multi line geometry consisting of a line for every segment in the input geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(segments_to_lines(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')))" ), tr( "'MultiLineString ((0 0, 1 1),(1 1, 2 2))'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "set_color_part",
    Help( "set_color_part", tr( "function" ), tr( "Sets a specific color component for a color string, e.g., the red component or alpha component." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "set_color_part" ), tr( "Sets a specific color component for a color string, e.g., the red component or alpha component." ),
          QList<HelpArg>()
              << HelpArg( "color", tr( "a color string" ), false, false, false, "" )
              << HelpArg( "component", tr( "a string corresponding to the color component to set. Valid options are:<br /><ul><li>red: RGB red component (0-255)</li><li>green: RGB green component (0-255)</li><li>blue: RGB blue component (0-255)</li><li>alpha: alpha (transparency) value (0-255)</li><li>hue: HSV hue (0-360)</li><li>saturation: HSV saturation (0-100)</li><li>value: HSV value (0-100)</li><li>hsl_hue: HSL hue (0-360)</li><li>hsl_saturation: HSL saturation (0-100)</li><li>lightness: HSL lightness (0-100)</li><li>cyan: CMYK cyan component (0-100)</li><li>magenta: CMYK magenta component (0-100)</li><li>yellow: CMYK yellow component (0-100)</li> <li>black: CMYK black component (0-100)</li></ul>" ), false, false, false, "" )
              << HelpArg( "value", tr( "new value for color component, respecting the ranges listed above" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "set_color_part('200,10,30','green',50)" ), tr( "200,50,30" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "shortest_line",
    Help( "shortest_line", tr( "function" ), tr( "Returns the shortest line joining geometry1 to geometry2. The resultant line will start at geometry1 and end at geometry2." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "shortest_line" ), tr( "Returns the shortest line joining geometry1 to geometry2. The resultant line will start at geometry1 and end at geometry2." ),
          QList<HelpArg>()
              << HelpArg( "geometry1", tr( "geometry to find shortest line from" ), false, false, false, "" )
              << HelpArg( "geometry2", tr( "geometry to find shortest line to" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(shortest_line(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)')))" ), tr( "LineString(73.0769 115.384, 100 100)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "simplify",
    Help( "simplify", tr( "function" ), tr( "Simplifies a geometry by removing nodes using a distance based threshold (ie, the Douglas Peucker algorithm). The algorithm preserves large deviations in geometries and reduces the number of vertices in nearly straight segments." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "simplify" ), tr( "Simplifies a geometry by removing nodes using a distance based threshold (ie, the Douglas Peucker algorithm). The algorithm preserves large deviations in geometries and reduces the number of vertices in nearly straight segments." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "tolerance", tr( "maximum deviation from straight segments for points to be removed" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(simplify(geometry:=geom_from_wkt('LineString(0 0, 5 0.1, 10 0)'),tolerance:=5))" ), tr( "'LineString(0 0, 10 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "simplify_vw",
    Help( "simplify_vw", tr( "function" ), tr( "Simplifies a geometry by removing nodes using an area based threshold (ie, the Visvalingam-Whyatt algorithm). The algorithm removes vertices which create small areas in geometries, e.g., narrow spikes or nearly straight segments." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "simplify_vw" ), tr( "Simplifies a geometry by removing nodes using an area based threshold (ie, the Visvalingam-Whyatt algorithm). The algorithm removes vertices which create small areas in geometries, e.g., narrow spikes or nearly straight segments." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "tolerance", tr( "a measure of the maximum area created by a node for the node to be removed" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(simplify_vw(geometry:=geom_from_wkt('LineString(0 0, 5 0, 5.01 10, 5.02 0, 10 0)'),tolerance:=5))" ), tr( "'LineString(0 0, 10 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "sin",
    Help( "sin", tr( "function" ), tr( "Returns the sine of an angle." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "sin" ), tr( "Returns the sine of an angle." ),
          QList<HelpArg>()
              << HelpArg( "angle", tr( "angle in radians" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "sin(1.571)" ), tr( "0.999999682931835" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "single_sided_buffer",
    Help( "single_sided_buffer", tr( "function" ), tr( "Returns a geometry formed by buffering out just one side of a linestring geometry. Distances are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "single_sided_buffer" ), tr( "Returns a geometry formed by buffering out just one side of a linestring geometry. Distances are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a (multi)linestring geometry" ), false, false, false, "" )
              << HelpArg( "distance", tr( "buffer distance. Positive values will be buffered to the left of lines, negative values to the right" ), false, false, false, "" )
              << HelpArg( "segments", tr( "number of segments to use to represent a quarter circle when a round join style is used. A larger number results in a smoother buffer with more nodes." ), false, false, true, "8" )
              << HelpArg( "join", tr( "join style for corners, where 1 = round, 2 = miter and 3 = bevel" ), false, false, true, "1" )
              << HelpArg( "miter_limit", tr( "limit on the miter ratio used for very sharp corners (when using miter joins only)" ), false, false, true, "2.0" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "single_sided_buffer($geometry, 10.5)" ), tr( "line buffered to the left by 10.5 units" ), tr( "" ) )
            << HelpExample( tr( "single_sided_buffer($geometry, -10.5)" ), tr( "line buffered to the right by 10.5 units" ), tr( "" ) )
            << HelpExample( tr( "single_sided_buffer($geometry, 10.5, segments=16, join=1)" ), tr( "line buffered to the left by 10.5 units, using more segments to result in a smoother buffer" ), tr( "" ) )
            << HelpExample( tr( "single_sided_buffer($geometry, 10.5, join=3)" ), tr( "line buffered to the left by 10.5 units, using a beveled join" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "smooth",
    Help( "smooth", tr( "function" ), tr( "Smooths a geometry by adding extra nodes which round off corners in the geometry. If input geometries contain Z or M values, these will also be smoothed and the output geometry will retain the same dimensionality as the input geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "smooth" ), tr( "Smooths a geometry by adding extra nodes which round off corners in the geometry. If input geometries contain Z or M values, these will also be smoothed and the output geometry will retain the same dimensionality as the input geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "iterations", tr( "number of smoothing iterations to apply. Larger numbers result in smoother but more complex geometries." ), false, false, true, "" )
              << HelpArg( "offset", tr( "value between 0 and 0.5 which controls how tightly the smoothed geometry follow the original geometry. Smaller values result in a tighter smoothing, larger values result in looser smoothing." ), false, false, true, "" )
              << HelpArg( "min_length", tr( "minimum length of segments to apply smoothing to. This parameter can be used to avoid placing excessive additional nodes in shorter segments of the geometry." ), false, false, true, "" )
              << HelpArg( "max_angle", tr( "maximum angle at node for smoothing to be applied (0-180). By lowering the maximum angle intentionally sharp corners in the geometry can be preserved. For instance, a value of 80 degrees will retain right angles in the geometry." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(smooth(geometry:=geom_from_wkt('LineString(0 0, 5 0, 5 5)'),iterations:=1,offset:=0.2,min_length:=-1,max_angle:=180))" ), tr( "'LineString (0 0, 4 0, 5 1, 5 5)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "soundex",
    Help( "soundex", tr( "function" ), tr( "Returns the Soundex representation of a string. Soundex is a phonetic matching algorithm, so strings with similar sounds should be represented by the same Soundex code." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "soundex" ), tr( "Returns the Soundex representation of a string. Soundex is a phonetic matching algorithm, so strings with similar sounds should be represented by the same Soundex code." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "a string" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "soundex('robert')" ), tr( "'R163'" ), tr( "" ) )
            << HelpExample( tr( "soundex('rupert')" ), tr( "'R163'" ), tr( "" ) )
            << HelpExample( tr( "soundex('rubin')" ), tr( "'R150'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "sqlite_fetch_and_increment",
    Help( "sqlite_fetch_and_increment", tr( "function" ), tr( "Manage autoincrementing values in sqlite databases.<p>SQlite default values can only be applied on insert and not prefetched.</p><p>This makes it impossible to acquire an incremented primary key via AUTO_INCREMENT before creating the row in the database. Sidenote: with postgres, this works via the option <i>evaluate default values</i>.</p><p>When adding new features with relations, it is really nice to be able to already add children for a parent, while the parents form is still open and hence the parent feature uncommitted.</p><p>To get around this limitation, this function can be used to manage sequence values in a separate table on sqlite based formats like gpkg.</p><p>The sequence table will be filtered for a sequence id (filter_attribute and filter_value) and the current value of the id_field will be incremented by 1 ond the incremented value returned.</p><p>If additional columns require values to be specified, the default_value map can be used for this purpose.</p><p><b>Note</b><br/>This function modifies the target sqlite table. It is intended for usage with default value configurations for attributes.</p><p>When the database parameter is a layer and the layer is in transaction mode, the value will only be retrieved once during the lifetime of a transaction and cached and incremented. This makes it unsafe to work on the same database from several processes in parallel.</p>" ),
      QList<HelpVariant>()
        << HelpVariant( tr( "sqlite_fetch_and_increment" ), tr( "Manage autoincrementing values in sqlite databases.<p>SQlite default values can only be applied on insert and not prefetched.</p><p>This makes it impossible to acquire an incremented primary key via AUTO_INCREMENT before creating the row in the database. Sidenote: with postgres, this works via the option <i>evaluate default values</i>.</p><p>When adding new features with relations, it is really nice to be able to already add children for a parent, while the parents form is still open and hence the parent feature uncommitted.</p><p>To get around this limitation, this function can be used to manage sequence values in a separate table on sqlite based formats like gpkg.</p><p>The sequence table will be filtered for a sequence id (filter_attribute and filter_value) and the current value of the id_field will be incremented by 1 ond the incremented value returned.</p><p>If additional columns require values to be specified, the default_value map can be used for this purpose.</p><p><b>Note</b><br/>This function modifies the target sqlite table. It is intended for usage with default value configurations for attributes.</p><p>When the database parameter is a layer and the layer is in transaction mode, the value will only be retrieved once during the lifetime of a transaction and cached and incremented. This makes it unsafe to work on the same database from several processes in parallel.</p>" ),
          QList<HelpArg>()
              << HelpArg( "database", tr( "Path to the sqlite file or geopackage layer" ), false, false, false, "" )
              << HelpArg( "table", tr( "Name of the table that manages the sequences" ), false, false, false, "" )
              << HelpArg( "id_field", tr( "Name of the field that contains the current value" ), false, false, false, "" )
              << HelpArg( "filter_attribute", tr( "Name the field that contains a unique identifier for this sequence. Must have a UNIQUE index." ), false, false, false, "" )
              << HelpArg( "filter_value", tr( "Name of the sequence to use." ), false, false, false, "" )
              << HelpArg( "default_values", tr( "Map with default values for additional columns on the table. The values need to be fully quoted. Functions are allowed." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "sqlite_fetch_and_increment(@layer, 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change','date(''now'')','user','''' || @user_account_name || ''''))" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "sqlite_fetch_and_increment(layer_property(@layer, 'path'), 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change','date(''now'')','user','''' || @user_account_name || ''''))" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "sqrt",
    Help( "sqrt", tr( "function" ), tr( "Returns square root of a value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "sqrt" ), tr( "Returns square root of a value." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "a number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "sqrt(9)" ), tr( "3" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "start_point",
    Help( "start_point", tr( "function" ), tr( "Returns the first node from a geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "start_point" ), tr( "Returns the first node from a geometry." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "geometry object" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt(start_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)')))" ), tr( "'Point (4 0)'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "stdev",
    Help( "stdev", tr( "function" ), tr( "Returns the aggregate standard deviation value from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "stdev" ), tr( "Returns the aggregate standard deviation value from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "stdev(\"population\",group_by:=\"state\")" ), tr( "standard deviation of population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "string_to_array",
    Help( "string_to_array", tr( "function" ), tr( "Splits string into an array using supplied delimiter and optional string for empty values." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "string_to_array" ), tr( "Splits string into an array using supplied delimiter and optional string for empty values." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the input string" ), false, false, false, "" )
              << HelpArg( "delimiter", tr( "the string delimiter used to split the input string" ), false, false, true, "','" )
              << HelpArg( "empty_value", tr( "the optional string to use as replacement for empty (zero length) matches" ), false, false, true, "''" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "string_to_array('1,2,3',',')" ), tr( "[ '1', '2', '3' ]" ), tr( "" ) )
            << HelpExample( tr( "string_to_array('1,,3',',','0')" ), tr( "[ '1', '0', '3' ]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "strpos",
    Help( "strpos", tr( "function" ), tr( "Return the first matching position of a substring within another string, or 0 if the substring is not found." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "strpos" ), tr( "Return the first matching position of a substring within another string, or 0 if the substring is not found." ),
          QList<HelpArg>()
              << HelpArg( "haystack", tr( "string that is to be searched" ), false, false, false, "" )
              << HelpArg( "needle", tr( "string to search for" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "strpos('HELLO WORLD','WORLD')" ), tr( "7" ), tr( "" ) )
            << HelpExample( tr( "strpos('HELLO WORLD','GOODBYE')" ), tr( "0" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "substr",
    Help( "substr", tr( "function" ), tr( "Returns a part of a string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "substr" ), tr( "Returns a part of a string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the full input string" ), false, false, false, "" )
              << HelpArg( "start", tr( "integer representing start position to extract beginning with 1; if start is negative, the return string will begin at the end of the string minus the start value" ), false, false, false, "" )
              << HelpArg( "length", tr( "integer representing length of string to extract; if length is negative, the return string will omit the given length of characters from the end of the string" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "substr('HELLO WORLD',3,5)" ), tr( "'LLO W'" ), tr( "" ) )
            << HelpExample( tr( "substr('HELLO WORLD',6)" ), tr( "' WORLD'" ), tr( "" ) )
            << HelpExample( tr( "substr('HELLO WORLD',-5)" ), tr( "'WORLD'" ), tr( "" ) )
            << HelpExample( tr( "substr('HELLO',3,-1)" ), tr( "'LL'" ), tr( "" ) )
            << HelpExample( tr( "substr('HELLO WORLD',-5,2)" ), tr( "'WO'" ), tr( "" ) )
            << HelpExample( tr( "substr('HELLO WORLD',-5,-1)" ), tr( "'WORL'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "sum",
    Help( "sum", tr( "function" ), tr( "Returns the aggregate summed value from a field or expression." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "sum" ), tr( "Returns the aggregate summed value from a field or expression." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "sub expression of field to aggregate" ), false, false, false, "" )
              << HelpArg( "group_by", tr( "optional expression to use to group aggregate calculations" ), false, false, true, "" )
              << HelpArg( "filter", tr( "optional expression to use to filter features used to calculate aggregate" ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "sum(\"population\",group_by:=\"state\")" ), tr( "summed population value, grouped by state field" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "sym_difference",
    Help( "sym_difference", tr( "function" ), tr( "Returns a geometry that represents the portions of two geometries that do not intersect." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "sym_difference" ), tr( "Returns a geometry that represents the portions of two geometries that do not intersect." ),
          QList<HelpArg>()
              << HelpArg( "geometry1", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry2", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( sym_difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 8 8)' ) ) )" ), tr( "LINESTRING(5 5, 8 8)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "tan",
    Help( "tan", tr( "function" ), tr( "Returns the tangent of an angle." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "tan" ), tr( "Returns the tangent of an angle." ),
          QList<HelpArg>()
              << HelpArg( "angle", tr( "angle in radians" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "tan(1.0)" ), tr( "1.5574077246549" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "tapered_buffer",
    Help( "tapered_buffer", tr( "function" ), tr( "Creates a buffer along a line geometry where the buffer diameter varies evenly over the length of the line." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "tapered_buffer" ), tr( "Creates a buffer along a line geometry where the buffer diameter varies evenly over the length of the line." ),
          QList<HelpArg>()
              << HelpArg( "geometry", tr( "input geometry. Must be a (multi)line geometry." ), false, false, false, "" )
              << HelpArg( "start_width", tr( "width of buffer at start of line," ), false, false, false, "" )
              << HelpArg( "end_width", tr( "width of buffer at end of line." ), false, false, false, "" )
              << HelpArg( "segments", tr( "number of segments to approximate quarter-circle curves in the buffer." ), false, false, true, "8" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "tapered_buffer(geometry:=geom_from_wkt('LINESTRING(1 2, 4 2)'),start_width:=1,end_width:=2,segments:=8)" ), tr( "A tapered buffer starting with a diameter of 1 and ending with a diameter of 2 along the linestring geometry." ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "title",
    Help( "title", tr( "function" ), tr( "Converts all words of a string to title case (all words lower case with leading capital letter)." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "title" ), tr( "Converts all words of a string to title case (all words lower case with leading capital letter)." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the string to convert to title case" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "title('hello WOrld')" ), tr( "'Hello World'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_date",
    Help( "to_date", tr( "function" ), tr( "Convert a string into a date object." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_date" ), tr( "Convert a string into a date object." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string representing a date value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_date('2012-05-04')" ), tr( "2012-05-04" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_datetime",
    Help( "to_datetime", tr( "function" ), tr( "Convert a string into a datetime object." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_datetime" ), tr( "Convert a string into a datetime object." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string representing a datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_datetime('2012-05-04 12:50:00')" ), tr( "2012-05-04T12:50:00" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_dm",
    Help( "to_dm", tr( "function" ), tr( "Convert a coordinate to degree, minute." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_dm" ), tr( "Convert a coordinate to degree, minute." ),
          QList<HelpArg>()
              << HelpArg( "coordinate", tr( "A latitude or longitude value." ), false, false, false, "" )
              << HelpArg( "axis", tr( "The axis of the coordinate. Either 'x' or 'y'." ), false, false, false, "" )
              << HelpArg( "precision", tr( "Number of decimals." ), false, false, false, "" )
              << HelpArg( "formatting", tr( "Designates the formatting type. Acceptable values are NULL, 'aligned' or 'suffix'." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_dm(6.3545681, 'x', 3)" ), tr( "6°21.274′" ), tr( "" ) )
            << HelpExample( tr( "to_dm(6.3545681, 'y', 4, 'suffix')" ), tr( "6°21.2741′N" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_dms",
    Help( "to_dms", tr( "function" ), tr( "Convert a coordinate to degree, minute, second." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_dms" ), tr( "Convert a coordinate to degree, minute, second." ),
          QList<HelpArg>()
              << HelpArg( "coordinate", tr( "A latitude or longitude value." ), false, false, false, "" )
              << HelpArg( "axis", tr( "The axis of the coordinate. Either 'x' or 'y'." ), false, false, false, "" )
              << HelpArg( "precision", tr( "Number of decimals." ), false, false, false, "" )
              << HelpArg( "formatting", tr( "Designates the formatting type. Acceptable values are NULL, 'aligned' or 'suffix'." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_dms(6.3545681, 'x', 3)" ), tr( "6°21′16.445″" ), tr( "" ) )
            << HelpExample( tr( "to_dms(6.3545681, 'y', 4, 'suffix')" ), tr( "6°21′16.4452″N" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_int",
    Help( "to_int", tr( "function" ), tr( "Converts a string to integer number. Nothing is returned if a value cannot be converted to integer (e.g '123asd' is invalid)." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_int" ), tr( "Converts a string to integer number. Nothing is returned if a value cannot be converted to integer (e.g '123asd' is invalid)." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string to convert to integer number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_int('123')" ), tr( "123" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_interval",
    Help( "to_interval", tr( "function" ), tr( "Converts a string to a interval type.  Can be used to take days, hours, month, etc of a date." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_interval" ), tr( "Converts a string to a interval type.  Can be used to take days, hours, month, etc of a date." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "a string representing an interval. Allowable formats include {n} days {n} hours {n} months." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours')" ), tr( "2012-05-04T10:00:00" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_json",
    Help( "to_json", tr( "function" ), tr( "Create a JSON formatted string from a map, array or other value." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_json" ), tr( "Create a JSON formatted string from a map, array or other value." ),
          QList<HelpArg>()
              << HelpArg( "value", tr( "The input value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_json(map('qgis','rocks'))" ), tr( "{\"qgis\":\"rocks\"}" ), tr( "" ) )
            << HelpExample( tr( "to_json(array(1,2,3))" ), tr( "[1,2,3]" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_real",
    Help( "to_real", tr( "function" ), tr( "Converts a string to a real number. Nothing is returned if a value cannot be converted to real (e.g '123.56asd' is invalid).  Numbers are rounded after saving changes if the precision is smaller than the result of the conversion." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_real" ), tr( "Converts a string to a real number. Nothing is returned if a value cannot be converted to real (e.g '123.56asd' is invalid).  Numbers are rounded after saving changes if the precision is smaller than the result of the conversion." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string to convert to real number" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_real('123.45')" ), tr( "123.45" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_string",
    Help( "to_string", tr( "function" ), tr( "Converts a number to string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_string" ), tr( "Converts a number to string." ),
          QList<HelpArg>()
              << HelpArg( "number", tr( "Integer or real value. The number to convert to string." ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_string(123)" ), tr( "'123'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "to_time",
    Help( "to_time", tr( "function" ), tr( "Convert a string into a time object." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "to_time" ), tr( "Convert a string into a time object." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string representing a time value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "to_time('12:30:01')" ), tr( "12:30:01" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "touches",
    Help( "touches", tr( "function" ), tr( "Tests whether a geometry touches another. Returns true if the geometries have at least one point in common, but their interiors do not intersect." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "touches" ), tr( "Tests whether a geometry touches another. Returns true if the geometries have at least one point in common, but their interiors do not intersect." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "touches( geom_from_wkt( 'LINESTRING(5 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "touches( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "transform",
    Help( "transform", tr( "function" ), tr( "Returns the geometry transformed from a source CRS to a destination CRS." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "transform" ), tr( "Returns the geometry transformed from a source CRS to a destination CRS." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "source_auth_id", tr( "the source auth CRS ID" ), false, false, false, "" )
              << HelpArg( "dest_auth_id", tr( "the destination auth CRS ID" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( transform( $geometry, 'EPSG:2154', 'EPSG:4326' ) )" ), tr( "POINT(0 51)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "translate",
    Help( "translate", tr( "function" ), tr( "Returns a translated version of a geometry. Calculations are in the Spatial Reference System of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "translate" ), tr( "Returns a translated version of a geometry. Calculations are in the Spatial Reference System of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "dx", tr( "delta x" ), false, false, false, "" )
              << HelpArg( "dy", tr( "delta y" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "translate($geometry, 5, 10)" ), tr( "a geometry of the same type like the original one" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "trim",
    Help( "trim", tr( "function" ), tr( "Removes all leading and trailing whitespace (spaces, tabs, etc) from a string." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "trim" ), tr( "Removes all leading and trailing whitespace (spaces, tabs, etc) from a string." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "string to trim" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "trim('   hello world    ')" ), tr( "'hello world'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "try",
    Help( "try", tr( "function" ), tr( "Tries an expression and returns its value if error-free. If the expression returns an error, an alternative value will be returned when provided otherwise the function will return null." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "try" ), tr( "Tries an expression and returns its value if error-free. If the expression returns an error, an alternative value will be returned when provided otherwise the function will return null." ),
          QList<HelpArg>()
              << HelpArg( "expression", tr( "the expression which should be run" ), false, false, false, "" )
              << HelpArg( "alternative", tr( "the result which will be returned if the expression returns an error." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "try( to_int( '1' ), 0 )" ), tr( "1" ), tr( "" ) )
            << HelpExample( tr( "try( to_int( 'a' ), 0 )" ), tr( "0" ), tr( "" ) )
            << HelpExample( tr( "try( to_date( 'invalid_date' ) )" ), tr( "NULL" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "union",
    Help( "union", tr( "function" ), tr( "Returns a geometry that represents the point set union of the geometries." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "union" ), tr( "Returns a geometry that represents the point set union of the geometries." ),
          QList<HelpArg>()
              << HelpArg( "geometry1", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry2", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "geom_to_wkt( union( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) ) )" ), tr( "MULTIPOINT(4 4, 5 5)" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "upper",
    Help( "upper", tr( "function" ), tr( "Converts a string to upper case letters." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "upper" ), tr( "Converts a string to upper case letters." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the string to convert to upper case" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "upper('hello WOrld')" ), tr( "'HELLO WORLD'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "uuid",
    Help( "uuid", tr( "function" ), tr( "Generates a Universally Unique Identifier (UUID) for each row using the Qt <a href='http://qt-project.org/doc/qt-4.8/quuid.html#createUuid'>QUuid::createUuid</a>  method.  Each UUID is 38 characters long." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "uuid" ), tr( "Generates a Universally Unique Identifier (UUID) for each row using the Qt <a href='http://qt-project.org/doc/qt-4.8/quuid.html#createUuid'>QUuid::createUuid</a>  method.  Each UUID is 38 characters long." ),
          QList<HelpArg>(),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "uuid()" ), tr( "'{0bd2f60f-f157-4a6d-96af-d4ba4cb366a1}'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "var",
    Help( "var", tr( "function" ), tr( "Returns the value stored within a specified variable." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "var" ), tr( "Returns the value stored within a specified variable." ),
          QList<HelpArg>()
              << HelpArg( "name", tr( "a variable name" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "var('qgis_version')" ), tr( "'2.12'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "wedge_buffer",
    Help( "wedge_buffer", tr( "function" ), tr( "Returns a wedge shaped buffer originating from a point geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "wedge_buffer" ), tr( "Returns a wedge shaped buffer originating from a point geometry." ),
          QList<HelpArg>()
              << HelpArg( "center", tr( "center point (origin) of buffer. Must be a point geometry." ), false, false, false, "" )
              << HelpArg( "azimuth", tr( "angle (in degrees) for the middle of the wedge to point." ), false, false, false, "" )
              << HelpArg( "width", tr( "buffer width (in degrees). Note that the wedge will extend to half of the angular width either side of the azimuth direction." ), false, false, false, "" )
              << HelpArg( "outer_radius", tr( "outer radius for buffers" ), false, false, false, "" )
              << HelpArg( "inner_radius", tr( "optional inner radius for buffers" ), false, false, true, "0.0" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "wedge_buffer(center:=geom_from_wkt('POINT(1 2)'),azimuth:=90,width:=180,outer_radius:=1)" ), tr( "A wedge shaped buffer centered on the point (1,2), facing to the East, with a width of 180 degrees and outer radius of 1." ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "week",
    Help( "week", tr( "function" ), tr( "Extract the week number from a date, or the number of weeks from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Date variant" ), tr( "Extract the week number from a date or datetime." ),
          QList<HelpArg>()
              << HelpArg( "date", tr( "a date or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "week('2012-05-12')" ), tr( "19" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in weeks of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of months from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "week(tointerval('3 weeks'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "week(age('2012-01-01','2010-01-01'))" ), tr( "104.285" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "with_variable",
    Help( "with_variable", tr( "function" ), tr( "This function sets a variable for any expression code that will be provided as 3rd argument. This is only useful for complicated expressions, where the same calculated value needs to be used in different places." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "with_variable" ), tr( "This function sets a variable for any expression code that will be provided as 3rd argument. This is only useful for complicated expressions, where the same calculated value needs to be used in different places." ),
          QList<HelpArg>()
              << HelpArg( "name", tr( "the name of the variable to set" ), false, false, false, "" )
              << HelpArg( "value", tr( "the value to set" ), false, false, false, "" )
              << HelpArg( "expression", tr( "the expression for which the variable will be available" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "with_variable('my_sum', 1 + 2 + 3, @my_sum * 2 + @my_sum * 5)" ), tr( "42" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "within",
    Help( "within", tr( "function" ), tr( "Tests whether a geometry is within another. Returns true if the geometry a is completely within geometry b." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "within" ), tr( "Tests whether a geometry is within another. Returns true if the geometry a is completely within geometry b." ),
          QList<HelpArg>()
              << HelpArg( "geometry a", tr( "a geometry" ), false, false, false, "" )
              << HelpArg( "geometry b", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "within( geom_from_wkt( 'POINT( 0.5 0.5)' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ) )" ), tr( "true" ), tr( "" ) )
            << HelpExample( tr( "within( geom_from_wkt( 'POINT( 5 5 )' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ) )" ), tr( "false" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "wordwrap",
    Help( "wordwrap", tr( "function" ), tr( "Returns a string wrapped to a maximum/minimum number of characters." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "wordwrap" ), tr( "Returns a string wrapped to a maximum/minimum number of characters." ),
          QList<HelpArg>()
              << HelpArg( "string", tr( "the string to be wrapped" ), false, false, false, "" )
              << HelpArg( "wrap_length", tr( "an integer. If wrap_length is positive the number represents the ideal maximum number of characters to wrap; if negative, the number represents the minimum number of characters to wrap." ), false, false, false, "" )
              << HelpArg( "delimiter_string", tr( "Optional delimiter string to wrap to a new line." ), false, false, true, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "wordwrap('UNIVERSITY OF QGIS',13)" ), tr( "'UNIVERSITY OF<br>QGIS'" ), tr( "" ) )
            << HelpExample( tr( "wordwrap('UNIVERSITY OF QGIS',-3)" ), tr( "'UNIVERSITY<br>OF QGIS'" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "x",
    Help( "x", tr( "function" ), tr( "Returns the x coordinate of a point geometry, or the x-coordinate of the centroid for a non-point geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "x" ), tr( "Returns the x coordinate of a point geometry, or the x-coordinate of the centroid for a non-point geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "x( geom_from_wkt( 'POINT(2 5)' ) )" ), tr( "2" ), tr( "" ) )
            << HelpExample( tr( "x( $geometry )" ), tr( "x coordinate of the current feature's centroid" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "x_max",
    Help( "x_max", tr( "function" ), tr( "Returns the maximum x coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "x_max" ), tr( "Returns the maximum x coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "x_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )" ), tr( "4" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "x_min",
    Help( "x_min", tr( "function" ), tr( "Returns the minimum x coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "x_min" ), tr( "Returns the minimum x coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "x_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )" ), tr( "2" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "y",
    Help( "y", tr( "function" ), tr( "Returns the y coordinate of a point geometry, or the y-coordinate of the centroid for a non-point geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "y" ), tr( "Returns the y coordinate of a point geometry, or the y-coordinate of the centroid for a non-point geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "y( geom_from_wkt( 'POINT(2 5)' ) )" ), tr( "5" ), tr( "" ) )
            << HelpExample( tr( "y( $geometry )" ), tr( "y coordinate of the current feature's centroid" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "y_max",
    Help( "y_max", tr( "function" ), tr( "Returns the maximum y coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "y_max" ), tr( "Returns the maximum y coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "y_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )" ), tr( "8" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "y_min",
    Help( "y_min", tr( "function" ), tr( "Returns the minimum y coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "y_min" ), tr( "Returns the minimum y coordinate of a geometry. Calculations are in the spatial reference system of this geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "y_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') )" ), tr( "5" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "year",
    Help( "year", tr( "function" ), tr( "Extract the year part from a date, or the number of years from an interval." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "Date variant" ), tr( "Extract the year part from a date or datetime." ),
          QList<HelpArg>()
              << HelpArg( "date", tr( "a date or datetime value" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "year('2012-05-12')" ), tr( "2012" ), tr( "" ) )
       )
        << HelpVariant( tr( "Interval variant" ), tr( "Calculate the length in years of an interval." ),
          QList<HelpArg>()
              << HelpArg( "interval", tr( "interval value to return number of years from" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "year(to_interval('3 years'))" ), tr( "3" ), tr( "" ) )
            << HelpExample( tr( "year(age('2012-01-01','2010-01-01'))" ), tr( "1.9986" ), tr( "" ) )
       )
      )
    );

  sFunctionHelpTexts.insert( "z",
    Help( "z", tr( "function" ), tr( "Returns the z coordinate of a point geometry." ),
      QList<HelpVariant>()
        << HelpVariant( tr( "z" ), tr( "Returns the z coordinate of a point geometry." ),
          QList<HelpArg>()
              << HelpArg( "geom", tr( "a point geometry" ), false, false, false, "" ),
          /* variableLenArguments */ false,
          QList<HelpExample>()
            << HelpExample( tr( "z( geom_from_wkt( 'POINTZ(2 5 7)' ) )" ), tr( "7" ), tr( "" ) )
       )
      )
    );
}
