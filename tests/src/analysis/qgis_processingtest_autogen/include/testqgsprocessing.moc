/****************************************************************************
** Meta object code from reading C++ file 'testqgsprocessing.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsprocessing.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsProcessing_t {
    QByteArrayData data[86];
    char stringdata0[1463];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsProcessing_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsProcessing_t qt_meta_stringdata_TestQgsProcessing = {
    {
QT_MOC_LITERAL(0, 0, 17), // "TestQgsProcessing"
QT_MOC_LITERAL(1, 18, 12), // "initTestCase"
QT_MOC_LITERAL(2, 31, 0), // ""
QT_MOC_LITERAL(3, 32, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 48, 4), // "init"
QT_MOC_LITERAL(5, 53, 7), // "cleanup"
QT_MOC_LITERAL(6, 61, 8), // "instance"
QT_MOC_LITERAL(7, 70, 11), // "addProvider"
QT_MOC_LITERAL(8, 82, 12), // "providerById"
QT_MOC_LITERAL(9, 95, 14), // "removeProvider"
QT_MOC_LITERAL(10, 110, 16), // "compatibleLayers"
QT_MOC_LITERAL(11, 127, 20), // "normalizeLayerSource"
QT_MOC_LITERAL(12, 148, 7), // "context"
QT_MOC_LITERAL(13, 156, 9), // "mapLayers"
QT_MOC_LITERAL(14, 166, 17), // "mapLayerFromStore"
QT_MOC_LITERAL(15, 184, 18), // "mapLayerFromString"
QT_MOC_LITERAL(16, 203, 9), // "algorithm"
QT_MOC_LITERAL(17, 213, 8), // "features"
QT_MOC_LITERAL(18, 222, 12), // "uniqueValues"
QT_MOC_LITERAL(19, 235, 11), // "createIndex"
QT_MOC_LITERAL(20, 247, 22), // "parseDestinationString"
QT_MOC_LITERAL(21, 270, 17), // "createFeatureSink"
QT_MOC_LITERAL(22, 288, 10), // "parameters"
QT_MOC_LITERAL(23, 299, 19), // "algorithmParameters"
QT_MOC_LITERAL(24, 319, 16), // "algorithmOutputs"
QT_MOC_LITERAL(25, 336, 16), // "parameterGeneral"
QT_MOC_LITERAL(26, 353, 16), // "parameterBoolean"
QT_MOC_LITERAL(27, 370, 12), // "parameterCrs"
QT_MOC_LITERAL(28, 383, 14), // "parameterLayer"
QT_MOC_LITERAL(29, 398, 15), // "parameterExtent"
QT_MOC_LITERAL(30, 414, 14), // "parameterPoint"
QT_MOC_LITERAL(31, 429, 13), // "parameterFile"
QT_MOC_LITERAL(32, 443, 15), // "parameterMatrix"
QT_MOC_LITERAL(33, 459, 18), // "parameterLayerList"
QT_MOC_LITERAL(34, 478, 15), // "parameterNumber"
QT_MOC_LITERAL(35, 494, 17), // "parameterDistance"
QT_MOC_LITERAL(36, 512, 14), // "parameterScale"
QT_MOC_LITERAL(37, 527, 14), // "parameterRange"
QT_MOC_LITERAL(38, 542, 20), // "parameterRasterLayer"
QT_MOC_LITERAL(39, 563, 13), // "parameterEnum"
QT_MOC_LITERAL(40, 577, 15), // "parameterString"
QT_MOC_LITERAL(41, 593, 19), // "parameterAuthConfig"
QT_MOC_LITERAL(42, 613, 19), // "parameterExpression"
QT_MOC_LITERAL(43, 633, 14), // "parameterField"
QT_MOC_LITERAL(44, 648, 20), // "parameterVectorLayer"
QT_MOC_LITERAL(45, 669, 18), // "parameterMeshLayer"
QT_MOC_LITERAL(46, 688, 22), // "parameterFeatureSource"
QT_MOC_LITERAL(47, 711, 20), // "parameterFeatureSink"
QT_MOC_LITERAL(48, 732, 18), // "parameterVectorOut"
QT_MOC_LITERAL(49, 751, 18), // "parameterRasterOut"
QT_MOC_LITERAL(50, 770, 16), // "parameterFileOut"
QT_MOC_LITERAL(51, 787, 18), // "parameterFolderOut"
QT_MOC_LITERAL(52, 806, 13), // "parameterBand"
QT_MOC_LITERAL(53, 820, 15), // "parameterLayout"
QT_MOC_LITERAL(54, 836, 19), // "parameterLayoutItem"
QT_MOC_LITERAL(55, 856, 16), // "checkParamValues"
QT_MOC_LITERAL(56, 873, 18), // "combineLayerExtent"
QT_MOC_LITERAL(57, 892, 23), // "processingFeatureSource"
QT_MOC_LITERAL(58, 916, 21), // "processingFeatureSink"
QT_MOC_LITERAL(59, 938, 14), // "algorithmScope"
QT_MOC_LITERAL(60, 953, 10), // "modelScope"
QT_MOC_LITERAL(61, 964, 16), // "validateInputCrs"
QT_MOC_LITERAL(62, 981, 28), // "generateIteratingDestination"
QT_MOC_LITERAL(63, 1010, 15), // "asPythonCommand"
QT_MOC_LITERAL(64, 1026, 16), // "modelerAlgorithm"
QT_MOC_LITERAL(65, 1043, 14), // "modelExecution"
QT_MOC_LITERAL(66, 1058, 33), // "modelWithProviderWithLimitedT..."
QT_MOC_LITERAL(67, 1092, 33), // "modelVectorOutputIsCompatible..."
QT_MOC_LITERAL(68, 1126, 21), // "modelAcceptableValues"
QT_MOC_LITERAL(69, 1148, 9), // "tempUtils"
QT_MOC_LITERAL(70, 1158, 17), // "convertCompatible"
QT_MOC_LITERAL(71, 1176, 6), // "create"
QT_MOC_LITERAL(72, 1183, 13), // "combineFields"
QT_MOC_LITERAL(73, 1197, 19), // "fieldNamesToIndices"
QT_MOC_LITERAL(74, 1217, 15), // "indicesToFields"
QT_MOC_LITERAL(75, 1233, 22), // "variantToPythonLiteral"
QT_MOC_LITERAL(76, 1256, 21), // "stringToPythonLiteral"
QT_MOC_LITERAL(77, 1278, 28), // "defaultExtensionsForProvider"
QT_MOC_LITERAL(78, 1307, 19), // "supportedExtensions"
QT_MOC_LITERAL(79, 1327, 26), // "supportsNonFileBasedOutput"
QT_MOC_LITERAL(80, 1354, 16), // "addParameterType"
QT_MOC_LITERAL(81, 1371, 19), // "removeParameterType"
QT_MOC_LITERAL(82, 1391, 14), // "parameterTypes"
QT_MOC_LITERAL(83, 1406, 13), // "parameterType"
QT_MOC_LITERAL(84, 1420, 23), // "sourceTypeToString_data"
QT_MOC_LITERAL(85, 1444, 18) // "sourceTypeToString"

    },
    "TestQgsProcessing\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0instance\0"
    "addProvider\0providerById\0removeProvider\0"
    "compatibleLayers\0normalizeLayerSource\0"
    "context\0mapLayers\0mapLayerFromStore\0"
    "mapLayerFromString\0algorithm\0features\0"
    "uniqueValues\0createIndex\0"
    "parseDestinationString\0createFeatureSink\0"
    "parameters\0algorithmParameters\0"
    "algorithmOutputs\0parameterGeneral\0"
    "parameterBoolean\0parameterCrs\0"
    "parameterLayer\0parameterExtent\0"
    "parameterPoint\0parameterFile\0"
    "parameterMatrix\0parameterLayerList\0"
    "parameterNumber\0parameterDistance\0"
    "parameterScale\0parameterRange\0"
    "parameterRasterLayer\0parameterEnum\0"
    "parameterString\0parameterAuthConfig\0"
    "parameterExpression\0parameterField\0"
    "parameterVectorLayer\0parameterMeshLayer\0"
    "parameterFeatureSource\0parameterFeatureSink\0"
    "parameterVectorOut\0parameterRasterOut\0"
    "parameterFileOut\0parameterFolderOut\0"
    "parameterBand\0parameterLayout\0"
    "parameterLayoutItem\0checkParamValues\0"
    "combineLayerExtent\0processingFeatureSource\0"
    "processingFeatureSink\0algorithmScope\0"
    "modelScope\0validateInputCrs\0"
    "generateIteratingDestination\0"
    "asPythonCommand\0modelerAlgorithm\0"
    "modelExecution\0modelWithProviderWithLimitedTypes\0"
    "modelVectorOutputIsCompatibleType\0"
    "modelAcceptableValues\0tempUtils\0"
    "convertCompatible\0create\0combineFields\0"
    "fieldNamesToIndices\0indicesToFields\0"
    "variantToPythonLiteral\0stringToPythonLiteral\0"
    "defaultExtensionsForProvider\0"
    "supportedExtensions\0supportsNonFileBasedOutput\0"
    "addParameterType\0removeParameterType\0"
    "parameterTypes\0parameterType\0"
    "sourceTypeToString_data\0sourceTypeToString"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsProcessing[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      84,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  434,    2, 0x08 /* Private */,
       3,    0,  435,    2, 0x08 /* Private */,
       4,    0,  436,    2, 0x08 /* Private */,
       5,    0,  437,    2, 0x08 /* Private */,
       6,    0,  438,    2, 0x08 /* Private */,
       7,    0,  439,    2, 0x08 /* Private */,
       8,    0,  440,    2, 0x08 /* Private */,
       9,    0,  441,    2, 0x08 /* Private */,
      10,    0,  442,    2, 0x08 /* Private */,
      11,    0,  443,    2, 0x08 /* Private */,
      12,    0,  444,    2, 0x08 /* Private */,
      13,    0,  445,    2, 0x08 /* Private */,
      14,    0,  446,    2, 0x08 /* Private */,
      15,    0,  447,    2, 0x08 /* Private */,
      16,    0,  448,    2, 0x08 /* Private */,
      17,    0,  449,    2, 0x08 /* Private */,
      18,    0,  450,    2, 0x08 /* Private */,
      19,    0,  451,    2, 0x08 /* Private */,
      20,    0,  452,    2, 0x08 /* Private */,
      21,    0,  453,    2, 0x08 /* Private */,
      22,    0,  454,    2, 0x08 /* Private */,
      23,    0,  455,    2, 0x08 /* Private */,
      24,    0,  456,    2, 0x08 /* Private */,
      25,    0,  457,    2, 0x08 /* Private */,
      26,    0,  458,    2, 0x08 /* Private */,
      27,    0,  459,    2, 0x08 /* Private */,
      28,    0,  460,    2, 0x08 /* Private */,
      29,    0,  461,    2, 0x08 /* Private */,
      30,    0,  462,    2, 0x08 /* Private */,
      31,    0,  463,    2, 0x08 /* Private */,
      32,    0,  464,    2, 0x08 /* Private */,
      33,    0,  465,    2, 0x08 /* Private */,
      34,    0,  466,    2, 0x08 /* Private */,
      35,    0,  467,    2, 0x08 /* Private */,
      36,    0,  468,    2, 0x08 /* Private */,
      37,    0,  469,    2, 0x08 /* Private */,
      38,    0,  470,    2, 0x08 /* Private */,
      39,    0,  471,    2, 0x08 /* Private */,
      40,    0,  472,    2, 0x08 /* Private */,
      41,    0,  473,    2, 0x08 /* Private */,
      42,    0,  474,    2, 0x08 /* Private */,
      43,    0,  475,    2, 0x08 /* Private */,
      44,    0,  476,    2, 0x08 /* Private */,
      45,    0,  477,    2, 0x08 /* Private */,
      46,    0,  478,    2, 0x08 /* Private */,
      47,    0,  479,    2, 0x08 /* Private */,
      48,    0,  480,    2, 0x08 /* Private */,
      49,    0,  481,    2, 0x08 /* Private */,
      50,    0,  482,    2, 0x08 /* Private */,
      51,    0,  483,    2, 0x08 /* Private */,
      52,    0,  484,    2, 0x08 /* Private */,
      53,    0,  485,    2, 0x08 /* Private */,
      54,    0,  486,    2, 0x08 /* Private */,
      55,    0,  487,    2, 0x08 /* Private */,
      56,    0,  488,    2, 0x08 /* Private */,
      57,    0,  489,    2, 0x08 /* Private */,
      58,    0,  490,    2, 0x08 /* Private */,
      59,    0,  491,    2, 0x08 /* Private */,
      60,    0,  492,    2, 0x08 /* Private */,
      61,    0,  493,    2, 0x08 /* Private */,
      62,    0,  494,    2, 0x08 /* Private */,
      63,    0,  495,    2, 0x08 /* Private */,
      64,    0,  496,    2, 0x08 /* Private */,
      65,    0,  497,    2, 0x08 /* Private */,
      66,    0,  498,    2, 0x08 /* Private */,
      67,    0,  499,    2, 0x08 /* Private */,
      68,    0,  500,    2, 0x08 /* Private */,
      69,    0,  501,    2, 0x08 /* Private */,
      70,    0,  502,    2, 0x08 /* Private */,
      71,    0,  503,    2, 0x08 /* Private */,
      72,    0,  504,    2, 0x08 /* Private */,
      73,    0,  505,    2, 0x08 /* Private */,
      74,    0,  506,    2, 0x08 /* Private */,
      75,    0,  507,    2, 0x08 /* Private */,
      76,    0,  508,    2, 0x08 /* Private */,
      77,    0,  509,    2, 0x08 /* Private */,
      78,    0,  510,    2, 0x08 /* Private */,
      79,    0,  511,    2, 0x08 /* Private */,
      80,    0,  512,    2, 0x08 /* Private */,
      81,    0,  513,    2, 0x08 /* Private */,
      82,    0,  514,    2, 0x08 /* Private */,
      83,    0,  515,    2, 0x08 /* Private */,
      84,    0,  516,    2, 0x08 /* Private */,
      85,    0,  517,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsProcessing::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsProcessing *_t = static_cast<TestQgsProcessing *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->instance(); break;
        case 5: _t->addProvider(); break;
        case 6: _t->providerById(); break;
        case 7: _t->removeProvider(); break;
        case 8: _t->compatibleLayers(); break;
        case 9: _t->normalizeLayerSource(); break;
        case 10: _t->context(); break;
        case 11: _t->mapLayers(); break;
        case 12: _t->mapLayerFromStore(); break;
        case 13: _t->mapLayerFromString(); break;
        case 14: _t->algorithm(); break;
        case 15: _t->features(); break;
        case 16: _t->uniqueValues(); break;
        case 17: _t->createIndex(); break;
        case 18: _t->parseDestinationString(); break;
        case 19: _t->createFeatureSink(); break;
        case 20: _t->parameters(); break;
        case 21: _t->algorithmParameters(); break;
        case 22: _t->algorithmOutputs(); break;
        case 23: _t->parameterGeneral(); break;
        case 24: _t->parameterBoolean(); break;
        case 25: _t->parameterCrs(); break;
        case 26: _t->parameterLayer(); break;
        case 27: _t->parameterExtent(); break;
        case 28: _t->parameterPoint(); break;
        case 29: _t->parameterFile(); break;
        case 30: _t->parameterMatrix(); break;
        case 31: _t->parameterLayerList(); break;
        case 32: _t->parameterNumber(); break;
        case 33: _t->parameterDistance(); break;
        case 34: _t->parameterScale(); break;
        case 35: _t->parameterRange(); break;
        case 36: _t->parameterRasterLayer(); break;
        case 37: _t->parameterEnum(); break;
        case 38: _t->parameterString(); break;
        case 39: _t->parameterAuthConfig(); break;
        case 40: _t->parameterExpression(); break;
        case 41: _t->parameterField(); break;
        case 42: _t->parameterVectorLayer(); break;
        case 43: _t->parameterMeshLayer(); break;
        case 44: _t->parameterFeatureSource(); break;
        case 45: _t->parameterFeatureSink(); break;
        case 46: _t->parameterVectorOut(); break;
        case 47: _t->parameterRasterOut(); break;
        case 48: _t->parameterFileOut(); break;
        case 49: _t->parameterFolderOut(); break;
        case 50: _t->parameterBand(); break;
        case 51: _t->parameterLayout(); break;
        case 52: _t->parameterLayoutItem(); break;
        case 53: _t->checkParamValues(); break;
        case 54: _t->combineLayerExtent(); break;
        case 55: _t->processingFeatureSource(); break;
        case 56: _t->processingFeatureSink(); break;
        case 57: _t->algorithmScope(); break;
        case 58: _t->modelScope(); break;
        case 59: _t->validateInputCrs(); break;
        case 60: _t->generateIteratingDestination(); break;
        case 61: _t->asPythonCommand(); break;
        case 62: _t->modelerAlgorithm(); break;
        case 63: _t->modelExecution(); break;
        case 64: _t->modelWithProviderWithLimitedTypes(); break;
        case 65: _t->modelVectorOutputIsCompatibleType(); break;
        case 66: _t->modelAcceptableValues(); break;
        case 67: _t->tempUtils(); break;
        case 68: _t->convertCompatible(); break;
        case 69: _t->create(); break;
        case 70: _t->combineFields(); break;
        case 71: _t->fieldNamesToIndices(); break;
        case 72: _t->indicesToFields(); break;
        case 73: _t->variantToPythonLiteral(); break;
        case 74: _t->stringToPythonLiteral(); break;
        case 75: _t->defaultExtensionsForProvider(); break;
        case 76: _t->supportedExtensions(); break;
        case 77: _t->supportsNonFileBasedOutput(); break;
        case 78: _t->addParameterType(); break;
        case 79: _t->removeParameterType(); break;
        case 80: _t->parameterTypes(); break;
        case 81: _t->parameterType(); break;
        case 82: _t->sourceTypeToString_data(); break;
        case 83: _t->sourceTypeToString(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsProcessing::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsProcessing.data,
      qt_meta_data_TestQgsProcessing,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsProcessing::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsProcessing::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsProcessing.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsProcessing::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 84)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 84;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 84)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 84;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
