/****************************************************************************
** Meta object code from reading C++ file 'testprocessinggui.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testprocessinggui.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestProcessingGui_t {
    QByteArrayData data[33];
    char stringdata0[594];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestProcessingGui_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestProcessingGui_t qt_meta_stringdata_TestProcessingGui = {
    {
QT_MOC_LITERAL(0, 0, 17), // "TestProcessingGui"
QT_MOC_LITERAL(1, 18, 12), // "initTestCase"
QT_MOC_LITERAL(2, 31, 0), // ""
QT_MOC_LITERAL(3, 32, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 48, 4), // "init"
QT_MOC_LITERAL(5, 53, 7), // "cleanup"
QT_MOC_LITERAL(6, 61, 16), // "testSetGetConfig"
QT_MOC_LITERAL(7, 78, 25), // "testFilterAlgorithmConfig"
QT_MOC_LITERAL(8, 104, 26), // "testWrapperFactoryRegistry"
QT_MOC_LITERAL(9, 131, 18), // "testWrapperGeneral"
QT_MOC_LITERAL(10, 150, 18), // "testWrapperDynamic"
QT_MOC_LITERAL(11, 169, 18), // "testModelerWrapper"
QT_MOC_LITERAL(12, 188, 18), // "testBooleanWrapper"
QT_MOC_LITERAL(13, 207, 17), // "testStringWrapper"
QT_MOC_LITERAL(14, 225, 15), // "testFileWrapper"
QT_MOC_LITERAL(15, 241, 18), // "testAuthCfgWrapper"
QT_MOC_LITERAL(16, 260, 14), // "testCrsWrapper"
QT_MOC_LITERAL(17, 275, 24), // "testNumericWrapperDouble"
QT_MOC_LITERAL(18, 300, 21), // "testNumericWrapperInt"
QT_MOC_LITERAL(19, 322, 19), // "testDistanceWrapper"
QT_MOC_LITERAL(20, 342, 16), // "testScaleWrapper"
QT_MOC_LITERAL(21, 359, 16), // "testRangeWrapper"
QT_MOC_LITERAL(22, 376, 16), // "testMatrixDialog"
QT_MOC_LITERAL(23, 393, 17), // "testMatrixWrapper"
QT_MOC_LITERAL(24, 411, 21), // "testExpressionWrapper"
QT_MOC_LITERAL(25, 433, 27), // "testMultipleSelectionDialog"
QT_MOC_LITERAL(26, 461, 22), // "testEnumSelectionPanel"
QT_MOC_LITERAL(27, 484, 21), // "testEnumCheckboxPanel"
QT_MOC_LITERAL(28, 506, 15), // "testEnumWrapper"
QT_MOC_LITERAL(29, 522, 17), // "testLayoutWrapper"
QT_MOC_LITERAL(30, 540, 21), // "testLayoutItemWrapper"
QT_MOC_LITERAL(31, 562, 14), // "testPointPanel"
QT_MOC_LITERAL(32, 577, 16) // "testPointWrapper"

    },
    "TestProcessingGui\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0"
    "testSetGetConfig\0testFilterAlgorithmConfig\0"
    "testWrapperFactoryRegistry\0"
    "testWrapperGeneral\0testWrapperDynamic\0"
    "testModelerWrapper\0testBooleanWrapper\0"
    "testStringWrapper\0testFileWrapper\0"
    "testAuthCfgWrapper\0testCrsWrapper\0"
    "testNumericWrapperDouble\0testNumericWrapperInt\0"
    "testDistanceWrapper\0testScaleWrapper\0"
    "testRangeWrapper\0testMatrixDialog\0"
    "testMatrixWrapper\0testExpressionWrapper\0"
    "testMultipleSelectionDialog\0"
    "testEnumSelectionPanel\0testEnumCheckboxPanel\0"
    "testEnumWrapper\0testLayoutWrapper\0"
    "testLayoutItemWrapper\0testPointPanel\0"
    "testPointWrapper"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestProcessingGui[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      31,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  169,    2, 0x08 /* Private */,
       3,    0,  170,    2, 0x08 /* Private */,
       4,    0,  171,    2, 0x08 /* Private */,
       5,    0,  172,    2, 0x08 /* Private */,
       6,    0,  173,    2, 0x08 /* Private */,
       7,    0,  174,    2, 0x08 /* Private */,
       8,    0,  175,    2, 0x08 /* Private */,
       9,    0,  176,    2, 0x08 /* Private */,
      10,    0,  177,    2, 0x08 /* Private */,
      11,    0,  178,    2, 0x08 /* Private */,
      12,    0,  179,    2, 0x08 /* Private */,
      13,    0,  180,    2, 0x08 /* Private */,
      14,    0,  181,    2, 0x08 /* Private */,
      15,    0,  182,    2, 0x08 /* Private */,
      16,    0,  183,    2, 0x08 /* Private */,
      17,    0,  184,    2, 0x08 /* Private */,
      18,    0,  185,    2, 0x08 /* Private */,
      19,    0,  186,    2, 0x08 /* Private */,
      20,    0,  187,    2, 0x08 /* Private */,
      21,    0,  188,    2, 0x08 /* Private */,
      22,    0,  189,    2, 0x08 /* Private */,
      23,    0,  190,    2, 0x08 /* Private */,
      24,    0,  191,    2, 0x08 /* Private */,
      25,    0,  192,    2, 0x08 /* Private */,
      26,    0,  193,    2, 0x08 /* Private */,
      27,    0,  194,    2, 0x08 /* Private */,
      28,    0,  195,    2, 0x08 /* Private */,
      29,    0,  196,    2, 0x08 /* Private */,
      30,    0,  197,    2, 0x08 /* Private */,
      31,    0,  198,    2, 0x08 /* Private */,
      32,    0,  199,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestProcessingGui::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestProcessingGui *_t = static_cast<TestProcessingGui *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->testSetGetConfig(); break;
        case 5: _t->testFilterAlgorithmConfig(); break;
        case 6: _t->testWrapperFactoryRegistry(); break;
        case 7: _t->testWrapperGeneral(); break;
        case 8: _t->testWrapperDynamic(); break;
        case 9: _t->testModelerWrapper(); break;
        case 10: _t->testBooleanWrapper(); break;
        case 11: _t->testStringWrapper(); break;
        case 12: _t->testFileWrapper(); break;
        case 13: _t->testAuthCfgWrapper(); break;
        case 14: _t->testCrsWrapper(); break;
        case 15: _t->testNumericWrapperDouble(); break;
        case 16: _t->testNumericWrapperInt(); break;
        case 17: _t->testDistanceWrapper(); break;
        case 18: _t->testScaleWrapper(); break;
        case 19: _t->testRangeWrapper(); break;
        case 20: _t->testMatrixDialog(); break;
        case 21: _t->testMatrixWrapper(); break;
        case 22: _t->testExpressionWrapper(); break;
        case 23: _t->testMultipleSelectionDialog(); break;
        case 24: _t->testEnumSelectionPanel(); break;
        case 25: _t->testEnumCheckboxPanel(); break;
        case 26: _t->testEnumWrapper(); break;
        case 27: _t->testLayoutWrapper(); break;
        case 28: _t->testLayoutItemWrapper(); break;
        case 29: _t->testPointPanel(); break;
        case 30: _t->testPointWrapper(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestProcessingGui::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestProcessingGui.data,
      qt_meta_data_TestProcessingGui,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestProcessingGui::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestProcessingGui::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestProcessingGui.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestProcessingGui::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 31)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 31;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 31)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 31;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
