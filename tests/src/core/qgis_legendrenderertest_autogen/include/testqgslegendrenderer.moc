/****************************************************************************
** Meta object code from reading C++ file 'testqgslegendrenderer.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgslegendrenderer.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsLegendRenderer_t {
    QByteArrayData data[28];
    char stringdata0[453];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsLegendRenderer_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsLegendRenderer_t qt_meta_stringdata_TestQgsLegendRenderer = {
    {
QT_MOC_LITERAL(0, 0, 21), // "TestQgsLegendRenderer"
QT_MOC_LITERAL(1, 22, 12), // "initTestCase"
QT_MOC_LITERAL(2, 35, 0), // ""
QT_MOC_LITERAL(3, 36, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 52, 4), // "init"
QT_MOC_LITERAL(5, 57, 7), // "cleanup"
QT_MOC_LITERAL(6, 65, 9), // "testModel"
QT_MOC_LITERAL(7, 75, 9), // "testBasic"
QT_MOC_LITERAL(8, 85, 13), // "testBigMarker"
QT_MOC_LITERAL(9, 99, 12), // "testMapUnits"
QT_MOC_LITERAL(10, 112, 14), // "testTallSymbol"
QT_MOC_LITERAL(11, 127, 15), // "testLineSpacing"
QT_MOC_LITERAL(12, 143, 18), // "testLongSymbolText"
QT_MOC_LITERAL(13, 162, 16), // "testThreeColumns"
QT_MOC_LITERAL(14, 179, 15), // "testFilterByMap"
QT_MOC_LITERAL(15, 195, 25), // "testFilterByMapSameSymbol"
QT_MOC_LITERAL(16, 221, 16), // "testColumns_data"
QT_MOC_LITERAL(17, 238, 11), // "testColumns"
QT_MOC_LITERAL(18, 250, 16), // "testRasterStroke"
QT_MOC_LITERAL(19, 267, 19), // "testFilterByPolygon"
QT_MOC_LITERAL(20, 287, 22), // "testFilterByExpression"
QT_MOC_LITERAL(21, 310, 26), // "testDiagramAttributeLegend"
QT_MOC_LITERAL(22, 337, 21), // "testDiagramSizeLegend"
QT_MOC_LITERAL(23, 359, 28), // "testDataDefinedSizeCollapsed"
QT_MOC_LITERAL(24, 388, 16), // "testTextOnSymbol"
QT_MOC_LITERAL(25, 405, 13), // "testBasicJson"
QT_MOC_LITERAL(26, 419, 15), // "testOpacityJson"
QT_MOC_LITERAL(27, 435, 17) // "testBigMarkerJson"

    },
    "TestQgsLegendRenderer\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0testModel\0"
    "testBasic\0testBigMarker\0testMapUnits\0"
    "testTallSymbol\0testLineSpacing\0"
    "testLongSymbolText\0testThreeColumns\0"
    "testFilterByMap\0testFilterByMapSameSymbol\0"
    "testColumns_data\0testColumns\0"
    "testRasterStroke\0testFilterByPolygon\0"
    "testFilterByExpression\0"
    "testDiagramAttributeLegend\0"
    "testDiagramSizeLegend\0"
    "testDataDefinedSizeCollapsed\0"
    "testTextOnSymbol\0testBasicJson\0"
    "testOpacityJson\0testBigMarkerJson"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsLegendRenderer[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      26,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  144,    2, 0x08 /* Private */,
       3,    0,  145,    2, 0x08 /* Private */,
       4,    0,  146,    2, 0x08 /* Private */,
       5,    0,  147,    2, 0x08 /* Private */,
       6,    0,  148,    2, 0x08 /* Private */,
       7,    0,  149,    2, 0x08 /* Private */,
       8,    0,  150,    2, 0x08 /* Private */,
       9,    0,  151,    2, 0x08 /* Private */,
      10,    0,  152,    2, 0x08 /* Private */,
      11,    0,  153,    2, 0x08 /* Private */,
      12,    0,  154,    2, 0x08 /* Private */,
      13,    0,  155,    2, 0x08 /* Private */,
      14,    0,  156,    2, 0x08 /* Private */,
      15,    0,  157,    2, 0x08 /* Private */,
      16,    0,  158,    2, 0x08 /* Private */,
      17,    0,  159,    2, 0x08 /* Private */,
      18,    0,  160,    2, 0x08 /* Private */,
      19,    0,  161,    2, 0x08 /* Private */,
      20,    0,  162,    2, 0x08 /* Private */,
      21,    0,  163,    2, 0x08 /* Private */,
      22,    0,  164,    2, 0x08 /* Private */,
      23,    0,  165,    2, 0x08 /* Private */,
      24,    0,  166,    2, 0x08 /* Private */,
      25,    0,  167,    2, 0x08 /* Private */,
      26,    0,  168,    2, 0x08 /* Private */,
      27,    0,  169,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsLegendRenderer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsLegendRenderer *_t = static_cast<TestQgsLegendRenderer *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->testModel(); break;
        case 5: _t->testBasic(); break;
        case 6: _t->testBigMarker(); break;
        case 7: _t->testMapUnits(); break;
        case 8: _t->testTallSymbol(); break;
        case 9: _t->testLineSpacing(); break;
        case 10: _t->testLongSymbolText(); break;
        case 11: _t->testThreeColumns(); break;
        case 12: _t->testFilterByMap(); break;
        case 13: _t->testFilterByMapSameSymbol(); break;
        case 14: _t->testColumns_data(); break;
        case 15: _t->testColumns(); break;
        case 16: _t->testRasterStroke(); break;
        case 17: _t->testFilterByPolygon(); break;
        case 18: _t->testFilterByExpression(); break;
        case 19: _t->testDiagramAttributeLegend(); break;
        case 20: _t->testDiagramSizeLegend(); break;
        case 21: _t->testDataDefinedSizeCollapsed(); break;
        case 22: _t->testTextOnSymbol(); break;
        case 23: _t->testBasicJson(); break;
        case 24: _t->testOpacityJson(); break;
        case 25: _t->testBigMarkerJson(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsLegendRenderer::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsLegendRenderer.data,
      qt_meta_data_TestQgsLegendRenderer,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsLegendRenderer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsLegendRenderer::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsLegendRenderer.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsLegendRenderer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 26)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 26;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 26)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 26;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
