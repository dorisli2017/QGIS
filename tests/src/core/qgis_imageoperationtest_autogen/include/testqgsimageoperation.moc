/****************************************************************************
** Meta object code from reading C++ file 'testqgsimageoperation.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsimageoperation.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsImageOperation_t {
    QByteArrayData data[36];
    char stringdata0[610];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsImageOperation_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsImageOperation_t qt_meta_stringdata_TestQgsImageOperation = {
    {
QT_MOC_LITERAL(0, 0, 21), // "TestQgsImageOperation"
QT_MOC_LITERAL(1, 22, 12), // "initTestCase"
QT_MOC_LITERAL(2, 35, 0), // ""
QT_MOC_LITERAL(3, 36, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 52, 4), // "init"
QT_MOC_LITERAL(5, 57, 7), // "cleanup"
QT_MOC_LITERAL(6, 65, 12), // "smallImageOp"
QT_MOC_LITERAL(7, 78, 18), // "grayscaleLightness"
QT_MOC_LITERAL(8, 97, 19), // "grayscaleLuminosity"
QT_MOC_LITERAL(9, 117, 16), // "grayscaleAverage"
QT_MOC_LITERAL(10, 134, 26), // "brightnessContrastNoChange"
QT_MOC_LITERAL(11, 161, 18), // "increaseBrightness"
QT_MOC_LITERAL(12, 180, 18), // "decreaseBrightness"
QT_MOC_LITERAL(13, 199, 16), // "increaseContrast"
QT_MOC_LITERAL(14, 216, 16), // "decreaseContrast"
QT_MOC_LITERAL(15, 233, 21), // "hueSaturationNoChange"
QT_MOC_LITERAL(16, 255, 18), // "increaseSaturation"
QT_MOC_LITERAL(17, 274, 18), // "decreaseSaturation"
QT_MOC_LITERAL(18, 293, 12), // "colorizeFull"
QT_MOC_LITERAL(19, 306, 15), // "colorizePartial"
QT_MOC_LITERAL(20, 322, 15), // "opacityNoChange"
QT_MOC_LITERAL(21, 338, 15), // "opacityIncrease"
QT_MOC_LITERAL(22, 354, 15), // "opacityDecrease"
QT_MOC_LITERAL(23, 370, 12), // "overlayColor"
QT_MOC_LITERAL(24, 383, 24), // "distanceTransformMaxDist"
QT_MOC_LITERAL(25, 408, 26), // "distanceTransformSetSpread"
QT_MOC_LITERAL(26, 435, 25), // "distanceTransformInterior"
QT_MOC_LITERAL(27, 461, 21), // "distanceTransformMisc"
QT_MOC_LITERAL(28, 483, 9), // "stackBlur"
QT_MOC_LITERAL(29, 493, 22), // "stackBlurPremultiplied"
QT_MOC_LITERAL(30, 516, 13), // "alphaOnlyBlur"
QT_MOC_LITERAL(31, 530, 12), // "gaussianBlur"
QT_MOC_LITERAL(32, 543, 17), // "gaussianBlurSmall"
QT_MOC_LITERAL(33, 561, 20), // "gaussianBlurNoChange"
QT_MOC_LITERAL(34, 582, 14), // "flipHorizontal"
QT_MOC_LITERAL(35, 597, 12) // "flipVertical"

    },
    "TestQgsImageOperation\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0smallImageOp\0"
    "grayscaleLightness\0grayscaleLuminosity\0"
    "grayscaleAverage\0brightnessContrastNoChange\0"
    "increaseBrightness\0decreaseBrightness\0"
    "increaseContrast\0decreaseContrast\0"
    "hueSaturationNoChange\0increaseSaturation\0"
    "decreaseSaturation\0colorizeFull\0"
    "colorizePartial\0opacityNoChange\0"
    "opacityIncrease\0opacityDecrease\0"
    "overlayColor\0distanceTransformMaxDist\0"
    "distanceTransformSetSpread\0"
    "distanceTransformInterior\0"
    "distanceTransformMisc\0stackBlur\0"
    "stackBlurPremultiplied\0alphaOnlyBlur\0"
    "gaussianBlur\0gaussianBlurSmall\0"
    "gaussianBlurNoChange\0flipHorizontal\0"
    "flipVertical"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsImageOperation[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      34,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  184,    2, 0x08 /* Private */,
       3,    0,  185,    2, 0x08 /* Private */,
       4,    0,  186,    2, 0x08 /* Private */,
       5,    0,  187,    2, 0x08 /* Private */,
       6,    0,  188,    2, 0x08 /* Private */,
       7,    0,  189,    2, 0x08 /* Private */,
       8,    0,  190,    2, 0x08 /* Private */,
       9,    0,  191,    2, 0x08 /* Private */,
      10,    0,  192,    2, 0x08 /* Private */,
      11,    0,  193,    2, 0x08 /* Private */,
      12,    0,  194,    2, 0x08 /* Private */,
      13,    0,  195,    2, 0x08 /* Private */,
      14,    0,  196,    2, 0x08 /* Private */,
      15,    0,  197,    2, 0x08 /* Private */,
      16,    0,  198,    2, 0x08 /* Private */,
      17,    0,  199,    2, 0x08 /* Private */,
      18,    0,  200,    2, 0x08 /* Private */,
      19,    0,  201,    2, 0x08 /* Private */,
      20,    0,  202,    2, 0x08 /* Private */,
      21,    0,  203,    2, 0x08 /* Private */,
      22,    0,  204,    2, 0x08 /* Private */,
      23,    0,  205,    2, 0x08 /* Private */,
      24,    0,  206,    2, 0x08 /* Private */,
      25,    0,  207,    2, 0x08 /* Private */,
      26,    0,  208,    2, 0x08 /* Private */,
      27,    0,  209,    2, 0x08 /* Private */,
      28,    0,  210,    2, 0x08 /* Private */,
      29,    0,  211,    2, 0x08 /* Private */,
      30,    0,  212,    2, 0x08 /* Private */,
      31,    0,  213,    2, 0x08 /* Private */,
      32,    0,  214,    2, 0x08 /* Private */,
      33,    0,  215,    2, 0x08 /* Private */,
      34,    0,  216,    2, 0x08 /* Private */,
      35,    0,  217,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsImageOperation::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsImageOperation *_t = static_cast<TestQgsImageOperation *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->smallImageOp(); break;
        case 5: _t->grayscaleLightness(); break;
        case 6: _t->grayscaleLuminosity(); break;
        case 7: _t->grayscaleAverage(); break;
        case 8: _t->brightnessContrastNoChange(); break;
        case 9: _t->increaseBrightness(); break;
        case 10: _t->decreaseBrightness(); break;
        case 11: _t->increaseContrast(); break;
        case 12: _t->decreaseContrast(); break;
        case 13: _t->hueSaturationNoChange(); break;
        case 14: _t->increaseSaturation(); break;
        case 15: _t->decreaseSaturation(); break;
        case 16: _t->colorizeFull(); break;
        case 17: _t->colorizePartial(); break;
        case 18: _t->opacityNoChange(); break;
        case 19: _t->opacityIncrease(); break;
        case 20: _t->opacityDecrease(); break;
        case 21: _t->overlayColor(); break;
        case 22: _t->distanceTransformMaxDist(); break;
        case 23: _t->distanceTransformSetSpread(); break;
        case 24: _t->distanceTransformInterior(); break;
        case 25: _t->distanceTransformMisc(); break;
        case 26: _t->stackBlur(); break;
        case 27: _t->stackBlurPremultiplied(); break;
        case 28: _t->alphaOnlyBlur(); break;
        case 29: _t->gaussianBlur(); break;
        case 30: _t->gaussianBlurSmall(); break;
        case 31: _t->gaussianBlurNoChange(); break;
        case 32: _t->flipHorizontal(); break;
        case 33: _t->flipVertical(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsImageOperation::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsImageOperation.data,
      qt_meta_data_TestQgsImageOperation,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsImageOperation::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsImageOperation::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsImageOperation.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsImageOperation::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 34)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 34;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 34)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 34;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
