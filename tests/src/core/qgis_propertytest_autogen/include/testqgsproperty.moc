/****************************************************************************
** Meta object code from reading C++ file 'testqgsproperty.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsproperty.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsProperty_t {
    QByteArrayData data[26];
    char stringdata0[453];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsProperty_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsProperty_t qt_meta_stringdata_TestQgsProperty = {
    {
QT_MOC_LITERAL(0, 0, 15), // "TestQgsProperty"
QT_MOC_LITERAL(1, 16, 12), // "initTestCase"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 46, 4), // "init"
QT_MOC_LITERAL(5, 51, 7), // "cleanup"
QT_MOC_LITERAL(6, 59, 11), // "conversions"
QT_MOC_LITERAL(7, 71, 7), // "invalid"
QT_MOC_LITERAL(8, 79, 14), // "staticProperty"
QT_MOC_LITERAL(9, 94, 18), // "fieldBasedProperty"
QT_MOC_LITERAL(10, 113, 23), // "expressionBasedProperty"
QT_MOC_LITERAL(11, 137, 8), // "equality"
QT_MOC_LITERAL(12, 146, 19), // "propertyTransformer"
QT_MOC_LITERAL(13, 166, 33), // "propertyTransformerFromExpres..."
QT_MOC_LITERAL(14, 200, 25), // "genericNumericTransformer"
QT_MOC_LITERAL(15, 226, 39), // "genericNumericTransformerFrom..."
QT_MOC_LITERAL(16, 266, 20), // "sizeScaleTransformer"
QT_MOC_LITERAL(17, 287, 34), // "sizeScaleTransformerFromExpre..."
QT_MOC_LITERAL(18, 322, 20), // "colorRampTransformer"
QT_MOC_LITERAL(19, 343, 21), // "propertyToTransformer"
QT_MOC_LITERAL(20, 365, 12), // "asExpression"
QT_MOC_LITERAL(21, 378, 18), // "propertyCollection"
QT_MOC_LITERAL(22, 397, 15), // "collectionStack"
QT_MOC_LITERAL(23, 413, 14), // "curveTransform"
QT_MOC_LITERAL(24, 428, 9), // "asVariant"
QT_MOC_LITERAL(25, 438, 14) // "isProjectColor"

    },
    "TestQgsProperty\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0conversions\0"
    "invalid\0staticProperty\0fieldBasedProperty\0"
    "expressionBasedProperty\0equality\0"
    "propertyTransformer\0"
    "propertyTransformerFromExpression\0"
    "genericNumericTransformer\0"
    "genericNumericTransformerFromExpression\0"
    "sizeScaleTransformer\0"
    "sizeScaleTransformerFromExpression\0"
    "colorRampTransformer\0propertyToTransformer\0"
    "asExpression\0propertyCollection\0"
    "collectionStack\0curveTransform\0asVariant\0"
    "isProjectColor"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsProperty[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      24,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  134,    2, 0x08 /* Private */,
       3,    0,  135,    2, 0x08 /* Private */,
       4,    0,  136,    2, 0x08 /* Private */,
       5,    0,  137,    2, 0x08 /* Private */,
       6,    0,  138,    2, 0x08 /* Private */,
       7,    0,  139,    2, 0x08 /* Private */,
       8,    0,  140,    2, 0x08 /* Private */,
       9,    0,  141,    2, 0x08 /* Private */,
      10,    0,  142,    2, 0x08 /* Private */,
      11,    0,  143,    2, 0x08 /* Private */,
      12,    0,  144,    2, 0x08 /* Private */,
      13,    0,  145,    2, 0x08 /* Private */,
      14,    0,  146,    2, 0x08 /* Private */,
      15,    0,  147,    2, 0x08 /* Private */,
      16,    0,  148,    2, 0x08 /* Private */,
      17,    0,  149,    2, 0x08 /* Private */,
      18,    0,  150,    2, 0x08 /* Private */,
      19,    0,  151,    2, 0x08 /* Private */,
      20,    0,  152,    2, 0x08 /* Private */,
      21,    0,  153,    2, 0x08 /* Private */,
      22,    0,  154,    2, 0x08 /* Private */,
      23,    0,  155,    2, 0x08 /* Private */,
      24,    0,  156,    2, 0x08 /* Private */,
      25,    0,  157,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsProperty::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsProperty *_t = static_cast<TestQgsProperty *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->conversions(); break;
        case 5: _t->invalid(); break;
        case 6: _t->staticProperty(); break;
        case 7: _t->fieldBasedProperty(); break;
        case 8: _t->expressionBasedProperty(); break;
        case 9: _t->equality(); break;
        case 10: _t->propertyTransformer(); break;
        case 11: _t->propertyTransformerFromExpression(); break;
        case 12: _t->genericNumericTransformer(); break;
        case 13: _t->genericNumericTransformerFromExpression(); break;
        case 14: _t->sizeScaleTransformer(); break;
        case 15: _t->sizeScaleTransformerFromExpression(); break;
        case 16: _t->colorRampTransformer(); break;
        case 17: _t->propertyToTransformer(); break;
        case 18: _t->asExpression(); break;
        case 19: _t->propertyCollection(); break;
        case 20: _t->collectionStack(); break;
        case 21: _t->curveTransform(); break;
        case 22: _t->asVariant(); break;
        case 23: _t->isProjectColor(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsProperty::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsProperty.data,
      qt_meta_data_TestQgsProperty,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsProperty::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsProperty::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsProperty.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsProperty::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 24)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 24;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 24)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 24;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
