/****************************************************************************
** Meta object code from reading C++ file 'testqgsgml.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsgml.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsGML_t {
    QByteArrayData data[39];
    char stringdata0[845];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsGML_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsGML_t qt_meta_stringdata_TestQgsGML = {
    {
QT_MOC_LITERAL(0, 0, 10), // "TestQgsGML"
QT_MOC_LITERAL(1, 11, 12), // "initTestCase"
QT_MOC_LITERAL(2, 24, 0), // ""
QT_MOC_LITERAL(3, 25, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 41, 11), // "testFromURL"
QT_MOC_LITERAL(5, 53, 17), // "testFromByteArray"
QT_MOC_LITERAL(6, 71, 19), // "testStreamingParser"
QT_MOC_LITERAL(7, 91, 29), // "testStreamingParserInvalidGML"
QT_MOC_LITERAL(8, 121, 13), // "testPointGML2"
QT_MOC_LITERAL(9, 135, 18), // "testLineStringGML2"
QT_MOC_LITERAL(10, 154, 15), // "testPolygonGML2"
QT_MOC_LITERAL(11, 170, 18), // "testMultiPointGML2"
QT_MOC_LITERAL(12, 189, 23), // "testMultiLineStringGML2"
QT_MOC_LITERAL(13, 213, 20), // "testMultiPolygonGML2"
QT_MOC_LITERAL(14, 234, 13), // "testPointGML3"
QT_MOC_LITERAL(15, 248, 23), // "testPointGML3_EPSG_4326"
QT_MOC_LITERAL(16, 272, 27), // "testPointGML3_urn_EPSG_4326"
QT_MOC_LITERAL(17, 300, 35), // "testPointGML3_EPSG_4326_honou..."
QT_MOC_LITERAL(18, 336, 42), // "testPointGML3_EPSG_4326_honou..."
QT_MOC_LITERAL(19, 379, 18), // "testLineStringGML3"
QT_MOC_LITERAL(20, 398, 36), // "testLineStringGML3_LineString..."
QT_MOC_LITERAL(21, 435, 15), // "testPolygonGML3"
QT_MOC_LITERAL(22, 451, 39), // "testPolygonGML3_srsDimension_..."
QT_MOC_LITERAL(23, 491, 39), // "testPolygonGML3_srsDimension_..."
QT_MOC_LITERAL(24, 531, 23), // "testMultiLineStringGML3"
QT_MOC_LITERAL(25, 555, 20), // "testMultiPolygonGML3"
QT_MOC_LITERAL(26, 576, 15), // "testPointGML3_2"
QT_MOC_LITERAL(27, 592, 19), // "testBoundingBoxGML2"
QT_MOC_LITERAL(28, 612, 19), // "testBoundingBoxGML3"
QT_MOC_LITERAL(29, 632, 31), // "testNumberMatchedNumberReturned"
QT_MOC_LITERAL(30, 664, 13), // "testException"
QT_MOC_LITERAL(31, 678, 9), // "testTuple"
QT_MOC_LITERAL(32, 688, 17), // "testRenamedFields"
QT_MOC_LITERAL(33, 706, 21), // "testTruncatedResponse"
QT_MOC_LITERAL(34, 728, 18), // "testPartialFeature"
QT_MOC_LITERAL(35, 747, 22), // "testThroughOGRGeometry"
QT_MOC_LITERAL(36, 770, 36), // "testThroughOGRGeometry_urn_EP..."
QT_MOC_LITERAL(37, 807, 11), // "testAccents"
QT_MOC_LITERAL(38, 819, 25) // "testSameTypeameAsGeomName"

    },
    "TestQgsGML\0initTestCase\0\0cleanupTestCase\0"
    "testFromURL\0testFromByteArray\0"
    "testStreamingParser\0testStreamingParserInvalidGML\0"
    "testPointGML2\0testLineStringGML2\0"
    "testPolygonGML2\0testMultiPointGML2\0"
    "testMultiLineStringGML2\0testMultiPolygonGML2\0"
    "testPointGML3\0testPointGML3_EPSG_4326\0"
    "testPointGML3_urn_EPSG_4326\0"
    "testPointGML3_EPSG_4326_honour_EPSG\0"
    "testPointGML3_EPSG_4326_honour_EPSG_invert\0"
    "testLineStringGML3\0"
    "testLineStringGML3_LineStringSegment\0"
    "testPolygonGML3\0testPolygonGML3_srsDimension_on_Polygon\0"
    "testPolygonGML3_srsDimension_on_posList\0"
    "testMultiLineStringGML3\0testMultiPolygonGML3\0"
    "testPointGML3_2\0testBoundingBoxGML2\0"
    "testBoundingBoxGML3\0testNumberMatchedNumberReturned\0"
    "testException\0testTuple\0testRenamedFields\0"
    "testTruncatedResponse\0testPartialFeature\0"
    "testThroughOGRGeometry\0"
    "testThroughOGRGeometry_urn_EPSG_4326\0"
    "testAccents\0testSameTypeameAsGeomName"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsGML[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      37,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  199,    2, 0x08 /* Private */,
       3,    0,  200,    2, 0x08 /* Private */,
       4,    0,  201,    2, 0x08 /* Private */,
       5,    0,  202,    2, 0x08 /* Private */,
       6,    0,  203,    2, 0x08 /* Private */,
       7,    0,  204,    2, 0x08 /* Private */,
       8,    0,  205,    2, 0x08 /* Private */,
       9,    0,  206,    2, 0x08 /* Private */,
      10,    0,  207,    2, 0x08 /* Private */,
      11,    0,  208,    2, 0x08 /* Private */,
      12,    0,  209,    2, 0x08 /* Private */,
      13,    0,  210,    2, 0x08 /* Private */,
      14,    0,  211,    2, 0x08 /* Private */,
      15,    0,  212,    2, 0x08 /* Private */,
      16,    0,  213,    2, 0x08 /* Private */,
      17,    0,  214,    2, 0x08 /* Private */,
      18,    0,  215,    2, 0x08 /* Private */,
      19,    0,  216,    2, 0x08 /* Private */,
      20,    0,  217,    2, 0x08 /* Private */,
      21,    0,  218,    2, 0x08 /* Private */,
      22,    0,  219,    2, 0x08 /* Private */,
      23,    0,  220,    2, 0x08 /* Private */,
      24,    0,  221,    2, 0x08 /* Private */,
      25,    0,  222,    2, 0x08 /* Private */,
      26,    0,  223,    2, 0x08 /* Private */,
      27,    0,  224,    2, 0x08 /* Private */,
      28,    0,  225,    2, 0x08 /* Private */,
      29,    0,  226,    2, 0x08 /* Private */,
      30,    0,  227,    2, 0x08 /* Private */,
      31,    0,  228,    2, 0x08 /* Private */,
      32,    0,  229,    2, 0x08 /* Private */,
      33,    0,  230,    2, 0x08 /* Private */,
      34,    0,  231,    2, 0x08 /* Private */,
      35,    0,  232,    2, 0x08 /* Private */,
      36,    0,  233,    2, 0x08 /* Private */,
      37,    0,  234,    2, 0x08 /* Private */,
      38,    0,  235,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsGML::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsGML *_t = static_cast<TestQgsGML *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->testFromURL(); break;
        case 3: _t->testFromByteArray(); break;
        case 4: _t->testStreamingParser(); break;
        case 5: _t->testStreamingParserInvalidGML(); break;
        case 6: _t->testPointGML2(); break;
        case 7: _t->testLineStringGML2(); break;
        case 8: _t->testPolygonGML2(); break;
        case 9: _t->testMultiPointGML2(); break;
        case 10: _t->testMultiLineStringGML2(); break;
        case 11: _t->testMultiPolygonGML2(); break;
        case 12: _t->testPointGML3(); break;
        case 13: _t->testPointGML3_EPSG_4326(); break;
        case 14: _t->testPointGML3_urn_EPSG_4326(); break;
        case 15: _t->testPointGML3_EPSG_4326_honour_EPSG(); break;
        case 16: _t->testPointGML3_EPSG_4326_honour_EPSG_invert(); break;
        case 17: _t->testLineStringGML3(); break;
        case 18: _t->testLineStringGML3_LineStringSegment(); break;
        case 19: _t->testPolygonGML3(); break;
        case 20: _t->testPolygonGML3_srsDimension_on_Polygon(); break;
        case 21: _t->testPolygonGML3_srsDimension_on_posList(); break;
        case 22: _t->testMultiLineStringGML3(); break;
        case 23: _t->testMultiPolygonGML3(); break;
        case 24: _t->testPointGML3_2(); break;
        case 25: _t->testBoundingBoxGML2(); break;
        case 26: _t->testBoundingBoxGML3(); break;
        case 27: _t->testNumberMatchedNumberReturned(); break;
        case 28: _t->testException(); break;
        case 29: _t->testTuple(); break;
        case 30: _t->testRenamedFields(); break;
        case 31: _t->testTruncatedResponse(); break;
        case 32: _t->testPartialFeature(); break;
        case 33: _t->testThroughOGRGeometry(); break;
        case 34: _t->testThroughOGRGeometry_urn_EPSG_4326(); break;
        case 35: _t->testAccents(); break;
        case 36: _t->testSameTypeameAsGeomName(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsGML::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsGML.data,
      qt_meta_data_TestQgsGML,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsGML::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsGML::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsGML.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsGML::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 37)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 37;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 37)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 37;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
