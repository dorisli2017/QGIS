/****************************************************************************
** Meta object code from reading C++ file 'testqgsgeometry.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsgeometry.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsGeometry_t {
    QByteArrayData data[64];
    char stringdata0[876];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsGeometry_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsGeometry_t qt_meta_stringdata_TestQgsGeometry = {
    {
QT_MOC_LITERAL(0, 0, 15), // "TestQgsGeometry"
QT_MOC_LITERAL(1, 16, 12), // "initTestCase"
QT_MOC_LITERAL(2, 29, 0), // ""
QT_MOC_LITERAL(3, 30, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 46, 4), // "init"
QT_MOC_LITERAL(5, 51, 7), // "cleanup"
QT_MOC_LITERAL(6, 59, 4), // "copy"
QT_MOC_LITERAL(7, 64, 10), // "assignment"
QT_MOC_LITERAL(8, 75, 9), // "asVariant"
QT_MOC_LITERAL(9, 85, 7), // "isEmpty"
QT_MOC_LITERAL(10, 93, 8), // "equality"
QT_MOC_LITERAL(11, 102, 14), // "vertexIterator"
QT_MOC_LITERAL(12, 117, 12), // "partIterator"
QT_MOC_LITERAL(13, 130, 5), // "point"
QT_MOC_LITERAL(14, 136, 10), // "lineString"
QT_MOC_LITERAL(15, 147, 14), // "circularString"
QT_MOC_LITERAL(16, 162, 7), // "polygon"
QT_MOC_LITERAL(17, 170, 12), // "curvePolygon"
QT_MOC_LITERAL(18, 183, 8), // "triangle"
QT_MOC_LITERAL(19, 192, 6), // "circle"
QT_MOC_LITERAL(20, 199, 7), // "ellipse"
QT_MOC_LITERAL(21, 207, 13), // "quadrilateral"
QT_MOC_LITERAL(22, 221, 14), // "regularPolygon"
QT_MOC_LITERAL(23, 236, 13), // "compoundCurve"
QT_MOC_LITERAL(24, 250, 10), // "multiPoint"
QT_MOC_LITERAL(25, 261, 15), // "multiLineString"
QT_MOC_LITERAL(26, 277, 10), // "multiCurve"
QT_MOC_LITERAL(27, 288, 12), // "multiSurface"
QT_MOC_LITERAL(28, 301, 12), // "multiPolygon"
QT_MOC_LITERAL(29, 314, 18), // "geometryCollection"
QT_MOC_LITERAL(30, 333, 14), // "fromQgsPointXY"
QT_MOC_LITERAL(31, 348, 10), // "fromQPoint"
QT_MOC_LITERAL(32, 359, 13), // "fromQPolygonF"
QT_MOC_LITERAL(33, 373, 12), // "fromPolyline"
QT_MOC_LITERAL(34, 386, 9), // "asQPointF"
QT_MOC_LITERAL(35, 396, 11), // "asQPolygonF"
QT_MOC_LITERAL(36, 408, 16), // "comparePolylines"
QT_MOC_LITERAL(37, 425, 15), // "comparePolygons"
QT_MOC_LITERAL(38, 441, 23), // "createEmptyWithSameType"
QT_MOC_LITERAL(39, 465, 18), // "intersectionCheck1"
QT_MOC_LITERAL(40, 484, 18), // "intersectionCheck2"
QT_MOC_LITERAL(41, 503, 15), // "translateCheck1"
QT_MOC_LITERAL(42, 519, 12), // "rotateCheck1"
QT_MOC_LITERAL(43, 532, 11), // "unionCheck1"
QT_MOC_LITERAL(44, 544, 11), // "unionCheck2"
QT_MOC_LITERAL(45, 556, 16), // "differenceCheck1"
QT_MOC_LITERAL(46, 573, 16), // "differenceCheck2"
QT_MOC_LITERAL(47, 590, 11), // "bufferCheck"
QT_MOC_LITERAL(48, 602, 11), // "smoothCheck"
QT_MOC_LITERAL(49, 614, 10), // "unaryUnion"
QT_MOC_LITERAL(50, 625, 10), // "dataStream"
QT_MOC_LITERAL(51, 636, 15), // "exportToGeoJSON"
QT_MOC_LITERAL(52, 652, 8), // "wkbInOut"
QT_MOC_LITERAL(53, 661, 28), // "directionNeutralSegmentation"
QT_MOC_LITERAL(54, 690, 21), // "poleOfInaccessibility"
QT_MOC_LITERAL(55, 712, 9), // "makeValid"
QT_MOC_LITERAL(56, 722, 8), // "isSimple"
QT_MOC_LITERAL(57, 731, 24), // "reshapeGeometryLineMerge"
QT_MOC_LITERAL(58, 756, 22), // "createCollectionOfType"
QT_MOC_LITERAL(59, 779, 22), // "minimalEnclosingCircle"
QT_MOC_LITERAL(60, 802, 13), // "splitGeometry"
QT_MOC_LITERAL(61, 816, 13), // "snappedToGrid"
QT_MOC_LITERAL(62, 830, 35), // "convertGeometryCollectionToSu..."
QT_MOC_LITERAL(63, 866, 9) // "emptyJson"

    },
    "TestQgsGeometry\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0copy\0"
    "assignment\0asVariant\0isEmpty\0equality\0"
    "vertexIterator\0partIterator\0point\0"
    "lineString\0circularString\0polygon\0"
    "curvePolygon\0triangle\0circle\0ellipse\0"
    "quadrilateral\0regularPolygon\0compoundCurve\0"
    "multiPoint\0multiLineString\0multiCurve\0"
    "multiSurface\0multiPolygon\0geometryCollection\0"
    "fromQgsPointXY\0fromQPoint\0fromQPolygonF\0"
    "fromPolyline\0asQPointF\0asQPolygonF\0"
    "comparePolylines\0comparePolygons\0"
    "createEmptyWithSameType\0intersectionCheck1\0"
    "intersectionCheck2\0translateCheck1\0"
    "rotateCheck1\0unionCheck1\0unionCheck2\0"
    "differenceCheck1\0differenceCheck2\0"
    "bufferCheck\0smoothCheck\0unaryUnion\0"
    "dataStream\0exportToGeoJSON\0wkbInOut\0"
    "directionNeutralSegmentation\0"
    "poleOfInaccessibility\0makeValid\0"
    "isSimple\0reshapeGeometryLineMerge\0"
    "createCollectionOfType\0minimalEnclosingCircle\0"
    "splitGeometry\0snappedToGrid\0"
    "convertGeometryCollectionToSubclass\0"
    "emptyJson"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsGeometry[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      62,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  324,    2, 0x08 /* Private */,
       3,    0,  325,    2, 0x08 /* Private */,
       4,    0,  326,    2, 0x08 /* Private */,
       5,    0,  327,    2, 0x08 /* Private */,
       6,    0,  328,    2, 0x08 /* Private */,
       7,    0,  329,    2, 0x08 /* Private */,
       8,    0,  330,    2, 0x08 /* Private */,
       9,    0,  331,    2, 0x08 /* Private */,
      10,    0,  332,    2, 0x08 /* Private */,
      11,    0,  333,    2, 0x08 /* Private */,
      12,    0,  334,    2, 0x08 /* Private */,
      13,    0,  335,    2, 0x08 /* Private */,
      14,    0,  336,    2, 0x08 /* Private */,
      15,    0,  337,    2, 0x08 /* Private */,
      16,    0,  338,    2, 0x08 /* Private */,
      17,    0,  339,    2, 0x08 /* Private */,
      18,    0,  340,    2, 0x08 /* Private */,
      19,    0,  341,    2, 0x08 /* Private */,
      20,    0,  342,    2, 0x08 /* Private */,
      21,    0,  343,    2, 0x08 /* Private */,
      22,    0,  344,    2, 0x08 /* Private */,
      23,    0,  345,    2, 0x08 /* Private */,
      24,    0,  346,    2, 0x08 /* Private */,
      25,    0,  347,    2, 0x08 /* Private */,
      26,    0,  348,    2, 0x08 /* Private */,
      27,    0,  349,    2, 0x08 /* Private */,
      28,    0,  350,    2, 0x08 /* Private */,
      29,    0,  351,    2, 0x08 /* Private */,
      30,    0,  352,    2, 0x08 /* Private */,
      31,    0,  353,    2, 0x08 /* Private */,
      32,    0,  354,    2, 0x08 /* Private */,
      33,    0,  355,    2, 0x08 /* Private */,
      34,    0,  356,    2, 0x08 /* Private */,
      35,    0,  357,    2, 0x08 /* Private */,
      36,    0,  358,    2, 0x08 /* Private */,
      37,    0,  359,    2, 0x08 /* Private */,
      38,    0,  360,    2, 0x08 /* Private */,
      39,    0,  361,    2, 0x08 /* Private */,
      40,    0,  362,    2, 0x08 /* Private */,
      41,    0,  363,    2, 0x08 /* Private */,
      42,    0,  364,    2, 0x08 /* Private */,
      43,    0,  365,    2, 0x08 /* Private */,
      44,    0,  366,    2, 0x08 /* Private */,
      45,    0,  367,    2, 0x08 /* Private */,
      46,    0,  368,    2, 0x08 /* Private */,
      47,    0,  369,    2, 0x08 /* Private */,
      48,    0,  370,    2, 0x08 /* Private */,
      49,    0,  371,    2, 0x08 /* Private */,
      50,    0,  372,    2, 0x08 /* Private */,
      51,    0,  373,    2, 0x08 /* Private */,
      52,    0,  374,    2, 0x08 /* Private */,
      53,    0,  375,    2, 0x08 /* Private */,
      54,    0,  376,    2, 0x08 /* Private */,
      55,    0,  377,    2, 0x08 /* Private */,
      56,    0,  378,    2, 0x08 /* Private */,
      57,    0,  379,    2, 0x08 /* Private */,
      58,    0,  380,    2, 0x08 /* Private */,
      59,    0,  381,    2, 0x08 /* Private */,
      60,    0,  382,    2, 0x08 /* Private */,
      61,    0,  383,    2, 0x08 /* Private */,
      62,    0,  384,    2, 0x08 /* Private */,
      63,    0,  385,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsGeometry::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsGeometry *_t = static_cast<TestQgsGeometry *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->copy(); break;
        case 5: _t->assignment(); break;
        case 6: _t->asVariant(); break;
        case 7: _t->isEmpty(); break;
        case 8: _t->equality(); break;
        case 9: _t->vertexIterator(); break;
        case 10: _t->partIterator(); break;
        case 11: _t->point(); break;
        case 12: _t->lineString(); break;
        case 13: _t->circularString(); break;
        case 14: _t->polygon(); break;
        case 15: _t->curvePolygon(); break;
        case 16: _t->triangle(); break;
        case 17: _t->circle(); break;
        case 18: _t->ellipse(); break;
        case 19: _t->quadrilateral(); break;
        case 20: _t->regularPolygon(); break;
        case 21: _t->compoundCurve(); break;
        case 22: _t->multiPoint(); break;
        case 23: _t->multiLineString(); break;
        case 24: _t->multiCurve(); break;
        case 25: _t->multiSurface(); break;
        case 26: _t->multiPolygon(); break;
        case 27: _t->geometryCollection(); break;
        case 28: _t->fromQgsPointXY(); break;
        case 29: _t->fromQPoint(); break;
        case 30: _t->fromQPolygonF(); break;
        case 31: _t->fromPolyline(); break;
        case 32: _t->asQPointF(); break;
        case 33: _t->asQPolygonF(); break;
        case 34: _t->comparePolylines(); break;
        case 35: _t->comparePolygons(); break;
        case 36: _t->createEmptyWithSameType(); break;
        case 37: _t->intersectionCheck1(); break;
        case 38: _t->intersectionCheck2(); break;
        case 39: _t->translateCheck1(); break;
        case 40: _t->rotateCheck1(); break;
        case 41: _t->unionCheck1(); break;
        case 42: _t->unionCheck2(); break;
        case 43: _t->differenceCheck1(); break;
        case 44: _t->differenceCheck2(); break;
        case 45: _t->bufferCheck(); break;
        case 46: _t->smoothCheck(); break;
        case 47: _t->unaryUnion(); break;
        case 48: _t->dataStream(); break;
        case 49: _t->exportToGeoJSON(); break;
        case 50: _t->wkbInOut(); break;
        case 51: _t->directionNeutralSegmentation(); break;
        case 52: _t->poleOfInaccessibility(); break;
        case 53: _t->makeValid(); break;
        case 54: _t->isSimple(); break;
        case 55: _t->reshapeGeometryLineMerge(); break;
        case 56: _t->createCollectionOfType(); break;
        case 57: _t->minimalEnclosingCircle(); break;
        case 58: _t->splitGeometry(); break;
        case 59: _t->snappedToGrid(); break;
        case 60: _t->convertGeometryCollectionToSubclass(); break;
        case 61: _t->emptyJson(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsGeometry::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsGeometry.data,
      qt_meta_data_TestQgsGeometry,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsGeometry::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsGeometry::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsGeometry.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsGeometry::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 62)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 62;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 62)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 62;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
