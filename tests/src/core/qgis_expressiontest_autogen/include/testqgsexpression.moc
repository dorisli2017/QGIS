/****************************************************************************
** Meta object code from reading C++ file 'testqgsexpression.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsexpression.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsExpression_t {
    QByteArrayData data[83];
    char stringdata0[1510];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsExpression_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsExpression_t qt_meta_stringdata_TestQgsExpression = {
    {
QT_MOC_LITERAL(0, 0, 17), // "TestQgsExpression"
QT_MOC_LITERAL(1, 18, 12), // "initTestCase"
QT_MOC_LITERAL(2, 31, 0), // ""
QT_MOC_LITERAL(3, 32, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 48, 12), // "parsing_data"
QT_MOC_LITERAL(5, 61, 7), // "parsing"
QT_MOC_LITERAL(6, 69, 30), // "parsing_error_line_column_data"
QT_MOC_LITERAL(7, 100, 25), // "parsing_error_line_column"
QT_MOC_LITERAL(8, 126, 10), // "max_errors"
QT_MOC_LITERAL(9, 137, 19), // "parsing_with_locale"
QT_MOC_LITERAL(10, 157, 10), // "alias_data"
QT_MOC_LITERAL(11, 168, 5), // "alias"
QT_MOC_LITERAL(12, 174, 20), // "named_parameter_data"
QT_MOC_LITERAL(13, 195, 15), // "named_parameter"
QT_MOC_LITERAL(14, 211, 15), // "represent_value"
QT_MOC_LITERAL(15, 227, 15), // "evaluation_data"
QT_MOC_LITERAL(16, 243, 19), // "run_evaluation_test"
QT_MOC_LITERAL(17, 263, 14), // "QgsExpression&"
QT_MOC_LITERAL(18, 278, 3), // "exp"
QT_MOC_LITERAL(19, 282, 9), // "evalError"
QT_MOC_LITERAL(20, 292, 9), // "QVariant&"
QT_MOC_LITERAL(21, 302, 8), // "expected"
QT_MOC_LITERAL(22, 311, 10), // "evaluation"
QT_MOC_LITERAL(23, 322, 12), // "eval_columns"
QT_MOC_LITERAL(24, 335, 15), // "eval_feature_id"
QT_MOC_LITERAL(25, 351, 20), // "eval_current_feature"
QT_MOC_LITERAL(26, 372, 22), // "eval_feature_attribute"
QT_MOC_LITERAL(27, 395, 21), // "eval_get_feature_data"
QT_MOC_LITERAL(28, 417, 16), // "eval_get_feature"
QT_MOC_LITERAL(29, 434, 28), // "test_sqliteFetchAndIncrement"
QT_MOC_LITERAL(30, 463, 14), // "aggregate_data"
QT_MOC_LITERAL(31, 478, 9), // "aggregate"
QT_MOC_LITERAL(32, 488, 20), // "layerAggregates_data"
QT_MOC_LITERAL(33, 509, 9), // "selection"
QT_MOC_LITERAL(34, 519, 14), // "selection_data"
QT_MOC_LITERAL(35, 534, 15), // "layerAggregates"
QT_MOC_LITERAL(36, 550, 22), // "relationAggregate_data"
QT_MOC_LITERAL(37, 573, 17), // "relationAggregate"
QT_MOC_LITERAL(38, 591, 20), // "get_feature_geometry"
QT_MOC_LITERAL(39, 612, 9), // "eval_rand"
QT_MOC_LITERAL(40, 622, 10), // "eval_randf"
QT_MOC_LITERAL(41, 633, 18), // "referenced_columns"
QT_MOC_LITERAL(42, 652, 20), // "referenced_variables"
QT_MOC_LITERAL(43, 673, 20), // "referenced_functions"
QT_MOC_LITERAL(44, 694, 9), // "findNodes"
QT_MOC_LITERAL(45, 704, 33), // "referenced_columns_all_attrib..."
QT_MOC_LITERAL(46, 738, 19), // "needs_geometry_data"
QT_MOC_LITERAL(47, 758, 14), // "needs_geometry"
QT_MOC_LITERAL(48, 773, 18), // "eval_geometry_data"
QT_MOC_LITERAL(49, 792, 13), // "eval_geometry"
QT_MOC_LITERAL(50, 806, 18), // "eval_geometry_calc"
QT_MOC_LITERAL(51, 825, 15), // "geom_calculator"
QT_MOC_LITERAL(52, 841, 17), // "eval_geometry_wkt"
QT_MOC_LITERAL(53, 859, 30), // "eval_geometry_constructor_data"
QT_MOC_LITERAL(54, 890, 25), // "eval_geometry_constructor"
QT_MOC_LITERAL(55, 916, 35), // "eval_geometry_access_transfor..."
QT_MOC_LITERAL(56, 952, 30), // "eval_geometry_access_transform"
QT_MOC_LITERAL(57, 983, 26), // "eval_spatial_operator_data"
QT_MOC_LITERAL(58, 1010, 21), // "eval_spatial_operator"
QT_MOC_LITERAL(59, 1032, 25), // "eval_geometry_method_data"
QT_MOC_LITERAL(60, 1058, 20), // "eval_geometry_method"
QT_MOC_LITERAL(61, 1079, 9), // "eval_eval"
QT_MOC_LITERAL(62, 1089, 20), // "eval_generate_series"
QT_MOC_LITERAL(63, 1110, 17), // "eval_string_array"
QT_MOC_LITERAL(64, 1128, 14), // "eval_int_array"
QT_MOC_LITERAL(65, 1143, 14), // "compare_arrays"
QT_MOC_LITERAL(66, 1158, 8), // "eval_map"
QT_MOC_LITERAL(67, 1167, 31), // "expression_from_expression_data"
QT_MOC_LITERAL(68, 1199, 26), // "expression_from_expression"
QT_MOC_LITERAL(69, 1226, 12), // "quote_string"
QT_MOC_LITERAL(70, 1239, 12), // "quoted_value"
QT_MOC_LITERAL(71, 1252, 9), // "reentrant"
QT_MOC_LITERAL(72, 1262, 16), // "evaluateToDouble"
QT_MOC_LITERAL(73, 1279, 12), // "eval_isField"
QT_MOC_LITERAL(74, 1292, 20), // "test_implicitSharing"
QT_MOC_LITERAL(75, 1313, 24), // "test_columnRefUnprepared"
QT_MOC_LITERAL(76, 1338, 8), // "test_env"
QT_MOC_LITERAL(77, 1347, 24), // "test_formatPreviewString"
QT_MOC_LITERAL(78, 1372, 14), // "test_nowStatic"
QT_MOC_LITERAL(79, 1387, 18), // "test_IndexOperator"
QT_MOC_LITERAL(80, 1406, 46), // "testSqliteFetchAndIncrementWi..."
QT_MOC_LITERAL(81, 1453, 30), // "testReplaceExpressionText_data"
QT_MOC_LITERAL(82, 1484, 25) // "testReplaceExpressionText"

    },
    "TestQgsExpression\0initTestCase\0\0"
    "cleanupTestCase\0parsing_data\0parsing\0"
    "parsing_error_line_column_data\0"
    "parsing_error_line_column\0max_errors\0"
    "parsing_with_locale\0alias_data\0alias\0"
    "named_parameter_data\0named_parameter\0"
    "represent_value\0evaluation_data\0"
    "run_evaluation_test\0QgsExpression&\0"
    "exp\0evalError\0QVariant&\0expected\0"
    "evaluation\0eval_columns\0eval_feature_id\0"
    "eval_current_feature\0eval_feature_attribute\0"
    "eval_get_feature_data\0eval_get_feature\0"
    "test_sqliteFetchAndIncrement\0"
    "aggregate_data\0aggregate\0layerAggregates_data\0"
    "selection\0selection_data\0layerAggregates\0"
    "relationAggregate_data\0relationAggregate\0"
    "get_feature_geometry\0eval_rand\0"
    "eval_randf\0referenced_columns\0"
    "referenced_variables\0referenced_functions\0"
    "findNodes\0referenced_columns_all_attributes\0"
    "needs_geometry_data\0needs_geometry\0"
    "eval_geometry_data\0eval_geometry\0"
    "eval_geometry_calc\0geom_calculator\0"
    "eval_geometry_wkt\0eval_geometry_constructor_data\0"
    "eval_geometry_constructor\0"
    "eval_geometry_access_transform_data\0"
    "eval_geometry_access_transform\0"
    "eval_spatial_operator_data\0"
    "eval_spatial_operator\0eval_geometry_method_data\0"
    "eval_geometry_method\0eval_eval\0"
    "eval_generate_series\0eval_string_array\0"
    "eval_int_array\0compare_arrays\0eval_map\0"
    "expression_from_expression_data\0"
    "expression_from_expression\0quote_string\0"
    "quoted_value\0reentrant\0evaluateToDouble\0"
    "eval_isField\0test_implicitSharing\0"
    "test_columnRefUnprepared\0test_env\0"
    "test_formatPreviewString\0test_nowStatic\0"
    "test_IndexOperator\0"
    "testSqliteFetchAndIncrementWithTranscationMode\0"
    "testReplaceExpressionText_data\0"
    "testReplaceExpressionText"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsExpression[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      76,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  394,    2, 0x08 /* Private */,
       3,    0,  395,    2, 0x08 /* Private */,
       4,    0,  396,    2, 0x08 /* Private */,
       5,    0,  397,    2, 0x08 /* Private */,
       6,    0,  398,    2, 0x08 /* Private */,
       7,    0,  399,    2, 0x08 /* Private */,
       8,    0,  400,    2, 0x08 /* Private */,
       9,    0,  401,    2, 0x08 /* Private */,
      10,    0,  402,    2, 0x08 /* Private */,
      11,    0,  403,    2, 0x08 /* Private */,
      12,    0,  404,    2, 0x08 /* Private */,
      13,    0,  405,    2, 0x08 /* Private */,
      14,    0,  406,    2, 0x08 /* Private */,
      15,    0,  407,    2, 0x08 /* Private */,
      16,    3,  408,    2, 0x08 /* Private */,
      22,    0,  415,    2, 0x08 /* Private */,
      23,    0,  416,    2, 0x08 /* Private */,
      24,    0,  417,    2, 0x08 /* Private */,
      25,    0,  418,    2, 0x08 /* Private */,
      26,    0,  419,    2, 0x08 /* Private */,
      27,    0,  420,    2, 0x08 /* Private */,
      28,    0,  421,    2, 0x08 /* Private */,
      29,    0,  422,    2, 0x08 /* Private */,
      30,    0,  423,    2, 0x08 /* Private */,
      31,    0,  424,    2, 0x08 /* Private */,
      32,    0,  425,    2, 0x08 /* Private */,
      33,    0,  426,    2, 0x08 /* Private */,
      34,    0,  427,    2, 0x08 /* Private */,
      35,    0,  428,    2, 0x08 /* Private */,
      36,    0,  429,    2, 0x08 /* Private */,
      37,    0,  430,    2, 0x08 /* Private */,
      38,    0,  431,    2, 0x08 /* Private */,
      39,    0,  432,    2, 0x08 /* Private */,
      40,    0,  433,    2, 0x08 /* Private */,
      41,    0,  434,    2, 0x08 /* Private */,
      42,    0,  435,    2, 0x08 /* Private */,
      43,    0,  436,    2, 0x08 /* Private */,
      44,    0,  437,    2, 0x08 /* Private */,
      45,    0,  438,    2, 0x08 /* Private */,
      46,    0,  439,    2, 0x08 /* Private */,
      47,    0,  440,    2, 0x08 /* Private */,
      48,    0,  441,    2, 0x08 /* Private */,
      49,    0,  442,    2, 0x08 /* Private */,
      50,    0,  443,    2, 0x08 /* Private */,
      51,    0,  444,    2, 0x08 /* Private */,
      52,    0,  445,    2, 0x08 /* Private */,
      53,    0,  446,    2, 0x08 /* Private */,
      54,    0,  447,    2, 0x08 /* Private */,
      55,    0,  448,    2, 0x08 /* Private */,
      56,    0,  449,    2, 0x08 /* Private */,
      57,    0,  450,    2, 0x08 /* Private */,
      58,    0,  451,    2, 0x08 /* Private */,
      59,    0,  452,    2, 0x08 /* Private */,
      60,    0,  453,    2, 0x08 /* Private */,
      61,    0,  454,    2, 0x08 /* Private */,
      62,    0,  455,    2, 0x08 /* Private */,
      63,    0,  456,    2, 0x08 /* Private */,
      64,    0,  457,    2, 0x08 /* Private */,
      65,    0,  458,    2, 0x08 /* Private */,
      66,    0,  459,    2, 0x08 /* Private */,
      67,    0,  460,    2, 0x08 /* Private */,
      68,    0,  461,    2, 0x08 /* Private */,
      69,    0,  462,    2, 0x08 /* Private */,
      70,    0,  463,    2, 0x08 /* Private */,
      71,    0,  464,    2, 0x08 /* Private */,
      72,    0,  465,    2, 0x08 /* Private */,
      73,    0,  466,    2, 0x08 /* Private */,
      74,    0,  467,    2, 0x08 /* Private */,
      75,    0,  468,    2, 0x08 /* Private */,
      76,    0,  469,    2, 0x08 /* Private */,
      77,    0,  470,    2, 0x08 /* Private */,
      78,    0,  471,    2, 0x08 /* Private */,
      79,    0,  472,    2, 0x08 /* Private */,
      80,    0,  473,    2, 0x08 /* Private */,
      81,    0,  474,    2, 0x08 /* Private */,
      82,    0,  475,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void, 0x80000000 | 17, QMetaType::Bool, 0x80000000 | 20,   18,   19,   21,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsExpression::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsExpression *_t = static_cast<TestQgsExpression *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->parsing_data(); break;
        case 3: _t->parsing(); break;
        case 4: _t->parsing_error_line_column_data(); break;
        case 5: _t->parsing_error_line_column(); break;
        case 6: _t->max_errors(); break;
        case 7: _t->parsing_with_locale(); break;
        case 8: _t->alias_data(); break;
        case 9: _t->alias(); break;
        case 10: _t->named_parameter_data(); break;
        case 11: _t->named_parameter(); break;
        case 12: _t->represent_value(); break;
        case 13: _t->evaluation_data(); break;
        case 14: _t->run_evaluation_test((*reinterpret_cast< QgsExpression(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< QVariant(*)>(_a[3]))); break;
        case 15: _t->evaluation(); break;
        case 16: _t->eval_columns(); break;
        case 17: _t->eval_feature_id(); break;
        case 18: _t->eval_current_feature(); break;
        case 19: _t->eval_feature_attribute(); break;
        case 20: _t->eval_get_feature_data(); break;
        case 21: _t->eval_get_feature(); break;
        case 22: _t->test_sqliteFetchAndIncrement(); break;
        case 23: _t->aggregate_data(); break;
        case 24: _t->aggregate(); break;
        case 25: _t->layerAggregates_data(); break;
        case 26: _t->selection(); break;
        case 27: _t->selection_data(); break;
        case 28: _t->layerAggregates(); break;
        case 29: _t->relationAggregate_data(); break;
        case 30: _t->relationAggregate(); break;
        case 31: _t->get_feature_geometry(); break;
        case 32: _t->eval_rand(); break;
        case 33: _t->eval_randf(); break;
        case 34: _t->referenced_columns(); break;
        case 35: _t->referenced_variables(); break;
        case 36: _t->referenced_functions(); break;
        case 37: _t->findNodes(); break;
        case 38: _t->referenced_columns_all_attributes(); break;
        case 39: _t->needs_geometry_data(); break;
        case 40: _t->needs_geometry(); break;
        case 41: _t->eval_geometry_data(); break;
        case 42: _t->eval_geometry(); break;
        case 43: _t->eval_geometry_calc(); break;
        case 44: _t->geom_calculator(); break;
        case 45: _t->eval_geometry_wkt(); break;
        case 46: _t->eval_geometry_constructor_data(); break;
        case 47: _t->eval_geometry_constructor(); break;
        case 48: _t->eval_geometry_access_transform_data(); break;
        case 49: _t->eval_geometry_access_transform(); break;
        case 50: _t->eval_spatial_operator_data(); break;
        case 51: _t->eval_spatial_operator(); break;
        case 52: _t->eval_geometry_method_data(); break;
        case 53: _t->eval_geometry_method(); break;
        case 54: _t->eval_eval(); break;
        case 55: _t->eval_generate_series(); break;
        case 56: _t->eval_string_array(); break;
        case 57: _t->eval_int_array(); break;
        case 58: _t->compare_arrays(); break;
        case 59: _t->eval_map(); break;
        case 60: _t->expression_from_expression_data(); break;
        case 61: _t->expression_from_expression(); break;
        case 62: _t->quote_string(); break;
        case 63: _t->quoted_value(); break;
        case 64: _t->reentrant(); break;
        case 65: _t->evaluateToDouble(); break;
        case 66: _t->eval_isField(); break;
        case 67: _t->test_implicitSharing(); break;
        case 68: _t->test_columnRefUnprepared(); break;
        case 69: _t->test_env(); break;
        case 70: _t->test_formatPreviewString(); break;
        case 71: _t->test_nowStatic(); break;
        case 72: _t->test_IndexOperator(); break;
        case 73: _t->testSqliteFetchAndIncrementWithTranscationMode(); break;
        case 74: _t->testReplaceExpressionText_data(); break;
        case 75: _t->testReplaceExpressionText(); break;
        default: ;
        }
    }
}

const QMetaObject TestQgsExpression::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsExpression.data,
      qt_meta_data_TestQgsExpression,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsExpression::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsExpression::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsExpression.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsExpression::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 76)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 76;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 76)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 76;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
