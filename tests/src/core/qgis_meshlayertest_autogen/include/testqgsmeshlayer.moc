/****************************************************************************
** Meta object code from reading C++ file 'testqgsmeshlayer.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsmeshlayer.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsMeshLayer_t {
    QByteArrayData data[20];
    char stringdata0[394];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsMeshLayer_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsMeshLayer_t qt_meta_stringdata_TestQgsMeshLayer = {
    {
QT_MOC_LITERAL(0, 0, 16), // "TestQgsMeshLayer"
QT_MOC_LITERAL(1, 17, 12), // "initTestCase"
QT_MOC_LITERAL(2, 30, 0), // ""
QT_MOC_LITERAL(3, 31, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 47, 4), // "init"
QT_MOC_LITERAL(5, 52, 7), // "cleanup"
QT_MOC_LITERAL(6, 60, 8), // "readFile"
QT_MOC_LITERAL(7, 69, 5), // "fname"
QT_MOC_LITERAL(8, 75, 23), // "test_write_read_project"
QT_MOC_LITERAL(9, 99, 14), // "test_read_mesh"
QT_MOC_LITERAL(10, 114, 21), // "test_read_flower_mesh"
QT_MOC_LITERAL(11, 136, 31), // "test_read_bed_elevation_dataset"
QT_MOC_LITERAL(12, 168, 31), // "test_read_vertex_scalar_dataset"
QT_MOC_LITERAL(13, 200, 31), // "test_read_vertex_vector_dataset"
QT_MOC_LITERAL(14, 232, 29), // "test_read_face_scalar_dataset"
QT_MOC_LITERAL(15, 262, 29), // "test_read_face_vector_dataset"
QT_MOC_LITERAL(16, 292, 50), // "test_read_vertex_scalar_datas..."
QT_MOC_LITERAL(17, 343, 11), // "test_extent"
QT_MOC_LITERAL(18, 355, 21), // "test_time_format_data"
QT_MOC_LITERAL(19, 377, 16) // "test_time_format"

    },
    "TestQgsMeshLayer\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0readFile\0"
    "fname\0test_write_read_project\0"
    "test_read_mesh\0test_read_flower_mesh\0"
    "test_read_bed_elevation_dataset\0"
    "test_read_vertex_scalar_dataset\0"
    "test_read_vertex_vector_dataset\0"
    "test_read_face_scalar_dataset\0"
    "test_read_face_vector_dataset\0"
    "test_read_vertex_scalar_dataset_with_inactive_face\0"
    "test_extent\0test_time_format_data\0"
    "test_time_format"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsMeshLayer[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      17,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   99,    2, 0x08 /* Private */,
       3,    0,  100,    2, 0x08 /* Private */,
       4,    0,  101,    2, 0x08 /* Private */,
       5,    0,  102,    2, 0x08 /* Private */,
       6,    1,  103,    2, 0x08 /* Private */,
       8,    0,  106,    2, 0x08 /* Private */,
       9,    0,  107,    2, 0x08 /* Private */,
      10,    0,  108,    2, 0x08 /* Private */,
      11,    0,  109,    2, 0x08 /* Private */,
      12,    0,  110,    2, 0x08 /* Private */,
      13,    0,  111,    2, 0x08 /* Private */,
      14,    0,  112,    2, 0x08 /* Private */,
      15,    0,  113,    2, 0x08 /* Private */,
      16,    0,  114,    2, 0x08 /* Private */,
      17,    0,  115,    2, 0x08 /* Private */,
      18,    0,  116,    2, 0x08 /* Private */,
      19,    0,  117,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::QString, QMetaType::QString,    7,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsMeshLayer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsMeshLayer *_t = static_cast<TestQgsMeshLayer *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: { QString _r = _t->readFile((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = std::move(_r); }  break;
        case 5: _t->test_write_read_project(); break;
        case 6: _t->test_read_mesh(); break;
        case 7: _t->test_read_flower_mesh(); break;
        case 8: _t->test_read_bed_elevation_dataset(); break;
        case 9: _t->test_read_vertex_scalar_dataset(); break;
        case 10: _t->test_read_vertex_vector_dataset(); break;
        case 11: _t->test_read_face_scalar_dataset(); break;
        case 12: _t->test_read_face_vector_dataset(); break;
        case 13: _t->test_read_vertex_scalar_dataset_with_inactive_face(); break;
        case 14: _t->test_extent(); break;
        case 15: _t->test_time_format_data(); break;
        case 16: _t->test_time_format(); break;
        default: ;
        }
    }
}

const QMetaObject TestQgsMeshLayer::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsMeshLayer.data,
      qt_meta_data_TestQgsMeshLayer,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsMeshLayer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsMeshLayer::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsMeshLayer.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsMeshLayer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 17;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
