/****************************************************************************
** Meta object code from reading C++ file 'testqgsgeometryimport.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgsgeometryimport.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsGeometryImport_t {
    QByteArrayData data[17];
    char stringdata0[235];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsGeometryImport_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsGeometryImport_t qt_meta_stringdata_TestQgsGeometryImport = {
    {
QT_MOC_LITERAL(0, 0, 21), // "TestQgsGeometryImport"
QT_MOC_LITERAL(1, 22, 12), // "initTestCase"
QT_MOC_LITERAL(2, 35, 0), // ""
QT_MOC_LITERAL(3, 36, 13), // "pointWkt_data"
QT_MOC_LITERAL(4, 50, 8), // "pointWkt"
QT_MOC_LITERAL(5, 59, 13), // "pointWkb_data"
QT_MOC_LITERAL(6, 73, 8), // "pointWkb"
QT_MOC_LITERAL(7, 82, 14), // "pointGeos_data"
QT_MOC_LITERAL(8, 97, 9), // "pointGeos"
QT_MOC_LITERAL(9, 107, 18), // "linestringWkt_data"
QT_MOC_LITERAL(10, 126, 13), // "linestringWkt"
QT_MOC_LITERAL(11, 140, 18), // "linestringWkb_data"
QT_MOC_LITERAL(12, 159, 13), // "linestringWkb"
QT_MOC_LITERAL(13, 173, 19), // "linestringGeos_data"
QT_MOC_LITERAL(14, 193, 14), // "linestringGeos"
QT_MOC_LITERAL(15, 208, 15), // "delimiters_data"
QT_MOC_LITERAL(16, 224, 10) // "delimiters"

    },
    "TestQgsGeometryImport\0initTestCase\0\0"
    "pointWkt_data\0pointWkt\0pointWkb_data\0"
    "pointWkb\0pointGeos_data\0pointGeos\0"
    "linestringWkt_data\0linestringWkt\0"
    "linestringWkb_data\0linestringWkb\0"
    "linestringGeos_data\0linestringGeos\0"
    "delimiters_data\0delimiters"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsGeometryImport[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      15,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   89,    2, 0x08 /* Private */,
       3,    0,   90,    2, 0x08 /* Private */,
       4,    0,   91,    2, 0x08 /* Private */,
       5,    0,   92,    2, 0x08 /* Private */,
       6,    0,   93,    2, 0x08 /* Private */,
       7,    0,   94,    2, 0x08 /* Private */,
       8,    0,   95,    2, 0x08 /* Private */,
       9,    0,   96,    2, 0x08 /* Private */,
      10,    0,   97,    2, 0x08 /* Private */,
      11,    0,   98,    2, 0x08 /* Private */,
      12,    0,   99,    2, 0x08 /* Private */,
      13,    0,  100,    2, 0x08 /* Private */,
      14,    0,  101,    2, 0x08 /* Private */,
      15,    0,  102,    2, 0x08 /* Private */,
      16,    0,  103,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsGeometryImport::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsGeometryImport *_t = static_cast<TestQgsGeometryImport *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->pointWkt_data(); break;
        case 2: _t->pointWkt(); break;
        case 3: _t->pointWkb_data(); break;
        case 4: _t->pointWkb(); break;
        case 5: _t->pointGeos_data(); break;
        case 6: _t->pointGeos(); break;
        case 7: _t->linestringWkt_data(); break;
        case 8: _t->linestringWkt(); break;
        case 9: _t->linestringWkb_data(); break;
        case 10: _t->linestringWkb(); break;
        case 11: _t->linestringGeos_data(); break;
        case 12: _t->linestringGeos(); break;
        case 13: _t->delimiters_data(); break;
        case 14: _t->delimiters(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsGeometryImport::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsGeometryImport.data,
      qt_meta_data_TestQgsGeometryImport,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsGeometryImport::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsGeometryImport::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsGeometryImport.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsGeometryImport::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 15)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 15;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 15)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 15;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
