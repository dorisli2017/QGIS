/****************************************************************************
** Meta object code from reading C++ file 'testqgscoordinatereferencesystem.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgscoordinatereferencesystem.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsCoordinateReferenceSystem_t {
    QByteArrayData data[51];
    char stringdata0[688];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsCoordinateReferenceSystem_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsCoordinateReferenceSystem_t qt_meta_stringdata_TestQgsCoordinateReferenceSystem = {
    {
QT_MOC_LITERAL(0, 0, 32), // "TestQgsCoordinateReferenceSystem"
QT_MOC_LITERAL(1, 33, 12), // "initTestCase"
QT_MOC_LITERAL(2, 46, 0), // ""
QT_MOC_LITERAL(3, 47, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 63, 7), // "wktCtor"
QT_MOC_LITERAL(5, 71, 6), // "idCtor"
QT_MOC_LITERAL(6, 78, 8), // "copyCtor"
QT_MOC_LITERAL(7, 87, 14), // "assignmentCtor"
QT_MOC_LITERAL(8, 102, 12), // "createFromId"
QT_MOC_LITERAL(9, 115, 10), // "fromEpsgId"
QT_MOC_LITERAL(10, 126, 19), // "createFromOgcWmsCrs"
QT_MOC_LITERAL(11, 146, 13), // "fromOgcWmsCrs"
QT_MOC_LITERAL(12, 160, 14), // "ogcWmsCrsCache"
QT_MOC_LITERAL(13, 175, 14), // "createFromSrid"
QT_MOC_LITERAL(14, 190, 9), // "sridCache"
QT_MOC_LITERAL(15, 200, 13), // "createFromWkt"
QT_MOC_LITERAL(16, 214, 7), // "fromWkt"
QT_MOC_LITERAL(17, 222, 8), // "wktCache"
QT_MOC_LITERAL(18, 231, 17), // "createFromESRIWkt"
QT_MOC_LITERAL(19, 249, 14), // "createFromSrId"
QT_MOC_LITERAL(20, 264, 9), // "fromSrsId"
QT_MOC_LITERAL(21, 274, 10), // "srsIdCache"
QT_MOC_LITERAL(22, 285, 15), // "createFromProj4"
QT_MOC_LITERAL(23, 301, 9), // "fromProj4"
QT_MOC_LITERAL(24, 311, 10), // "proj4Cache"
QT_MOC_LITERAL(25, 322, 15), // "fromStringCache"
QT_MOC_LITERAL(26, 338, 7), // "isValid"
QT_MOC_LITERAL(27, 346, 8), // "validate"
QT_MOC_LITERAL(28, 355, 8), // "equality"
QT_MOC_LITERAL(29, 364, 10), // "noEquality"
QT_MOC_LITERAL(30, 375, 15), // "equalityInvalid"
QT_MOC_LITERAL(31, 391, 12), // "readWriteXml"
QT_MOC_LITERAL(32, 404, 22), // "setCustomSrsValidation"
QT_MOC_LITERAL(33, 427, 19), // "customSrsValidation"
QT_MOC_LITERAL(34, 447, 11), // "postgisSrid"
QT_MOC_LITERAL(35, 459, 16), // "ellipsoidAcronym"
QT_MOC_LITERAL(36, 476, 5), // "toWkt"
QT_MOC_LITERAL(37, 482, 7), // "toProj4"
QT_MOC_LITERAL(38, 490, 12), // "isGeographic"
QT_MOC_LITERAL(39, 503, 8), // "mapUnits"
QT_MOC_LITERAL(40, 512, 17), // "setValidationHint"
QT_MOC_LITERAL(41, 530, 15), // "hasAxisInverted"
QT_MOC_LITERAL(42, 546, 22), // "createFromProj4Invalid"
QT_MOC_LITERAL(43, 569, 11), // "validSrsIds"
QT_MOC_LITERAL(44, 581, 9), // "asVariant"
QT_MOC_LITERAL(45, 591, 6), // "bounds"
QT_MOC_LITERAL(46, 598, 13), // "saveAsUserCrs"
QT_MOC_LITERAL(47, 612, 20), // "projectWithCustomCrs"
QT_MOC_LITERAL(48, 633, 16), // "projectEPSG25833"
QT_MOC_LITERAL(49, 650, 17), // "geoCcsDescription"
QT_MOC_LITERAL(50, 668, 19) // "geographicCrsAuthId"

    },
    "TestQgsCoordinateReferenceSystem\0"
    "initTestCase\0\0cleanupTestCase\0wktCtor\0"
    "idCtor\0copyCtor\0assignmentCtor\0"
    "createFromId\0fromEpsgId\0createFromOgcWmsCrs\0"
    "fromOgcWmsCrs\0ogcWmsCrsCache\0"
    "createFromSrid\0sridCache\0createFromWkt\0"
    "fromWkt\0wktCache\0createFromESRIWkt\0"
    "createFromSrId\0fromSrsId\0srsIdCache\0"
    "createFromProj4\0fromProj4\0proj4Cache\0"
    "fromStringCache\0isValid\0validate\0"
    "equality\0noEquality\0equalityInvalid\0"
    "readWriteXml\0setCustomSrsValidation\0"
    "customSrsValidation\0postgisSrid\0"
    "ellipsoidAcronym\0toWkt\0toProj4\0"
    "isGeographic\0mapUnits\0setValidationHint\0"
    "hasAxisInverted\0createFromProj4Invalid\0"
    "validSrsIds\0asVariant\0bounds\0saveAsUserCrs\0"
    "projectWithCustomCrs\0projectEPSG25833\0"
    "geoCcsDescription\0geographicCrsAuthId"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsCoordinateReferenceSystem[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      49,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  259,    2, 0x08 /* Private */,
       3,    0,  260,    2, 0x08 /* Private */,
       4,    0,  261,    2, 0x08 /* Private */,
       5,    0,  262,    2, 0x08 /* Private */,
       6,    0,  263,    2, 0x08 /* Private */,
       7,    0,  264,    2, 0x08 /* Private */,
       8,    0,  265,    2, 0x08 /* Private */,
       9,    0,  266,    2, 0x08 /* Private */,
      10,    0,  267,    2, 0x08 /* Private */,
      11,    0,  268,    2, 0x08 /* Private */,
      12,    0,  269,    2, 0x08 /* Private */,
      13,    0,  270,    2, 0x08 /* Private */,
      14,    0,  271,    2, 0x08 /* Private */,
      15,    0,  272,    2, 0x08 /* Private */,
      16,    0,  273,    2, 0x08 /* Private */,
      17,    0,  274,    2, 0x08 /* Private */,
      18,    0,  275,    2, 0x08 /* Private */,
      19,    0,  276,    2, 0x08 /* Private */,
      20,    0,  277,    2, 0x08 /* Private */,
      21,    0,  278,    2, 0x08 /* Private */,
      22,    0,  279,    2, 0x08 /* Private */,
      23,    0,  280,    2, 0x08 /* Private */,
      24,    0,  281,    2, 0x08 /* Private */,
      25,    0,  282,    2, 0x08 /* Private */,
      26,    0,  283,    2, 0x08 /* Private */,
      27,    0,  284,    2, 0x08 /* Private */,
      28,    0,  285,    2, 0x08 /* Private */,
      29,    0,  286,    2, 0x08 /* Private */,
      30,    0,  287,    2, 0x08 /* Private */,
      31,    0,  288,    2, 0x08 /* Private */,
      32,    0,  289,    2, 0x08 /* Private */,
      33,    0,  290,    2, 0x08 /* Private */,
      34,    0,  291,    2, 0x08 /* Private */,
      35,    0,  292,    2, 0x08 /* Private */,
      36,    0,  293,    2, 0x08 /* Private */,
      37,    0,  294,    2, 0x08 /* Private */,
      38,    0,  295,    2, 0x08 /* Private */,
      39,    0,  296,    2, 0x08 /* Private */,
      40,    0,  297,    2, 0x08 /* Private */,
      41,    0,  298,    2, 0x08 /* Private */,
      42,    0,  299,    2, 0x08 /* Private */,
      43,    0,  300,    2, 0x08 /* Private */,
      44,    0,  301,    2, 0x08 /* Private */,
      45,    0,  302,    2, 0x08 /* Private */,
      46,    0,  303,    2, 0x08 /* Private */,
      47,    0,  304,    2, 0x08 /* Private */,
      48,    0,  305,    2, 0x08 /* Private */,
      49,    0,  306,    2, 0x08 /* Private */,
      50,    0,  307,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsCoordinateReferenceSystem::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsCoordinateReferenceSystem *_t = static_cast<TestQgsCoordinateReferenceSystem *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->wktCtor(); break;
        case 3: _t->idCtor(); break;
        case 4: _t->copyCtor(); break;
        case 5: _t->assignmentCtor(); break;
        case 6: _t->createFromId(); break;
        case 7: _t->fromEpsgId(); break;
        case 8: _t->createFromOgcWmsCrs(); break;
        case 9: _t->fromOgcWmsCrs(); break;
        case 10: _t->ogcWmsCrsCache(); break;
        case 11: _t->createFromSrid(); break;
        case 12: _t->sridCache(); break;
        case 13: _t->createFromWkt(); break;
        case 14: _t->fromWkt(); break;
        case 15: _t->wktCache(); break;
        case 16: _t->createFromESRIWkt(); break;
        case 17: _t->createFromSrId(); break;
        case 18: _t->fromSrsId(); break;
        case 19: _t->srsIdCache(); break;
        case 20: _t->createFromProj4(); break;
        case 21: _t->fromProj4(); break;
        case 22: _t->proj4Cache(); break;
        case 23: _t->fromStringCache(); break;
        case 24: _t->isValid(); break;
        case 25: _t->validate(); break;
        case 26: _t->equality(); break;
        case 27: _t->noEquality(); break;
        case 28: _t->equalityInvalid(); break;
        case 29: _t->readWriteXml(); break;
        case 30: _t->setCustomSrsValidation(); break;
        case 31: _t->customSrsValidation(); break;
        case 32: _t->postgisSrid(); break;
        case 33: _t->ellipsoidAcronym(); break;
        case 34: _t->toWkt(); break;
        case 35: _t->toProj4(); break;
        case 36: _t->isGeographic(); break;
        case 37: _t->mapUnits(); break;
        case 38: _t->setValidationHint(); break;
        case 39: _t->hasAxisInverted(); break;
        case 40: _t->createFromProj4Invalid(); break;
        case 41: _t->validSrsIds(); break;
        case 42: _t->asVariant(); break;
        case 43: _t->bounds(); break;
        case 44: _t->saveAsUserCrs(); break;
        case 45: _t->projectWithCustomCrs(); break;
        case 46: _t->projectEPSG25833(); break;
        case 47: _t->geoCcsDescription(); break;
        case 48: _t->geographicCrsAuthId(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsCoordinateReferenceSystem::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsCoordinateReferenceSystem.data,
      qt_meta_data_TestQgsCoordinateReferenceSystem,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsCoordinateReferenceSystem::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsCoordinateReferenceSystem::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsCoordinateReferenceSystem.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsCoordinateReferenceSystem::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 49)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 49;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 49)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 49;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
