/****************************************************************************
** Meta object code from reading C++ file 'testziplayer.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testziplayer.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestZipLayer_t {
    QByteArrayData data[24];
    char stringdata0[440];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestZipLayer_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestZipLayer_t qt_meta_stringdata_TestZipLayer = {
    {
QT_MOC_LITERAL(0, 0, 12), // "TestZipLayer"
QT_MOC_LITERAL(1, 13, 12), // "initTestCase"
QT_MOC_LITERAL(2, 26, 0), // ""
QT_MOC_LITERAL(3, 27, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 43, 4), // "init"
QT_MOC_LITERAL(5, 48, 7), // "cleanup"
QT_MOC_LITERAL(6, 56, 21), // "testPassthruVectorZip"
QT_MOC_LITERAL(7, 78, 21), // "testPassthruVectorTar"
QT_MOC_LITERAL(8, 100, 22), // "testPassthruVectorGzip"
QT_MOC_LITERAL(9, 123, 21), // "testPassthruRasterZip"
QT_MOC_LITERAL(10, 145, 21), // "testPassthruRasterTar"
QT_MOC_LITERAL(11, 167, 22), // "testPassthruRasterGzip"
QT_MOC_LITERAL(12, 190, 17), // "testZipItemRaster"
QT_MOC_LITERAL(13, 208, 17), // "testTarItemRaster"
QT_MOC_LITERAL(14, 226, 17), // "testZipItemVector"
QT_MOC_LITERAL(15, 244, 17), // "testTarItemVector"
QT_MOC_LITERAL(16, 262, 14), // "testZipItemAll"
QT_MOC_LITERAL(17, 277, 14), // "testTarItemAll"
QT_MOC_LITERAL(18, 292, 29), // "testZipItemRasterTransparency"
QT_MOC_LITERAL(19, 322, 29), // "testTarItemRasterTransparency"
QT_MOC_LITERAL(20, 352, 30), // "testGzipItemRasterTransparency"
QT_MOC_LITERAL(21, 383, 20), // "testZipItemSubfolder"
QT_MOC_LITERAL(22, 404, 20), // "testTarItemSubfolder"
QT_MOC_LITERAL(23, 425, 14) // "testZipItemVRT"

    },
    "TestZipLayer\0initTestCase\0\0cleanupTestCase\0"
    "init\0cleanup\0testPassthruVectorZip\0"
    "testPassthruVectorTar\0testPassthruVectorGzip\0"
    "testPassthruRasterZip\0testPassthruRasterTar\0"
    "testPassthruRasterGzip\0testZipItemRaster\0"
    "testTarItemRaster\0testZipItemVector\0"
    "testTarItemVector\0testZipItemAll\0"
    "testTarItemAll\0testZipItemRasterTransparency\0"
    "testTarItemRasterTransparency\0"
    "testGzipItemRasterTransparency\0"
    "testZipItemSubfolder\0testTarItemSubfolder\0"
    "testZipItemVRT"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestZipLayer[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      22,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  124,    2, 0x08 /* Private */,
       3,    0,  125,    2, 0x08 /* Private */,
       4,    0,  126,    2, 0x08 /* Private */,
       5,    0,  127,    2, 0x08 /* Private */,
       6,    0,  128,    2, 0x08 /* Private */,
       7,    0,  129,    2, 0x08 /* Private */,
       8,    0,  130,    2, 0x08 /* Private */,
       9,    0,  131,    2, 0x08 /* Private */,
      10,    0,  132,    2, 0x08 /* Private */,
      11,    0,  133,    2, 0x08 /* Private */,
      12,    0,  134,    2, 0x08 /* Private */,
      13,    0,  135,    2, 0x08 /* Private */,
      14,    0,  136,    2, 0x08 /* Private */,
      15,    0,  137,    2, 0x08 /* Private */,
      16,    0,  138,    2, 0x08 /* Private */,
      17,    0,  139,    2, 0x08 /* Private */,
      18,    0,  140,    2, 0x08 /* Private */,
      19,    0,  141,    2, 0x08 /* Private */,
      20,    0,  142,    2, 0x08 /* Private */,
      21,    0,  143,    2, 0x08 /* Private */,
      22,    0,  144,    2, 0x08 /* Private */,
      23,    0,  145,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestZipLayer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestZipLayer *_t = static_cast<TestZipLayer *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->testPassthruVectorZip(); break;
        case 5: _t->testPassthruVectorTar(); break;
        case 6: _t->testPassthruVectorGzip(); break;
        case 7: _t->testPassthruRasterZip(); break;
        case 8: _t->testPassthruRasterTar(); break;
        case 9: _t->testPassthruRasterGzip(); break;
        case 10: _t->testZipItemRaster(); break;
        case 11: _t->testTarItemRaster(); break;
        case 12: _t->testZipItemVector(); break;
        case 13: _t->testTarItemVector(); break;
        case 14: _t->testZipItemAll(); break;
        case 15: _t->testTarItemAll(); break;
        case 16: _t->testZipItemRasterTransparency(); break;
        case 17: _t->testTarItemRasterTransparency(); break;
        case 18: _t->testGzipItemRasterTransparency(); break;
        case 19: _t->testZipItemSubfolder(); break;
        case 20: _t->testTarItemSubfolder(); break;
        case 21: _t->testZipItemVRT(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestZipLayer::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestZipLayer.data,
      qt_meta_data_TestZipLayer,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestZipLayer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestZipLayer::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestZipLayer.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestZipLayer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 22)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 22;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 22)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 22;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
