/****************************************************************************
** Meta object code from reading C++ file 'testqgslayoutunits.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.5)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'testqgslayoutunits.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.5. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestQgsLayoutUnits_t {
    QByteArrayData data[47];
    char stringdata0[678];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestQgsLayoutUnits_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestQgsLayoutUnits_t qt_meta_stringdata_TestQgsLayoutUnits = {
    {
QT_MOC_LITERAL(0, 0, 18), // "TestQgsLayoutUnits"
QT_MOC_LITERAL(1, 19, 12), // "initTestCase"
QT_MOC_LITERAL(2, 32, 0), // ""
QT_MOC_LITERAL(3, 33, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 49, 4), // "init"
QT_MOC_LITERAL(5, 54, 7), // "cleanup"
QT_MOC_LITERAL(6, 62, 12), // "encodeDecode"
QT_MOC_LITERAL(7, 75, 6), // "create"
QT_MOC_LITERAL(8, 82, 14), // "gettersSetters"
QT_MOC_LITERAL(9, 97, 15), // "copyConstructor"
QT_MOC_LITERAL(10, 113, 8), // "equality"
QT_MOC_LITERAL(11, 122, 10), // "assignment"
QT_MOC_LITERAL(12, 133, 9), // "operators"
QT_MOC_LITERAL(13, 143, 9), // "unitTypes"
QT_MOC_LITERAL(14, 153, 23), // "measurementEncodeDecode"
QT_MOC_LITERAL(15, 177, 10), // "createSize"
QT_MOC_LITERAL(16, 188, 18), // "sizeGettersSetters"
QT_MOC_LITERAL(17, 207, 19), // "sizeCopyConstructor"
QT_MOC_LITERAL(18, 227, 12), // "sizeEquality"
QT_MOC_LITERAL(19, 240, 14), // "sizeAssignment"
QT_MOC_LITERAL(20, 255, 13), // "sizeOperators"
QT_MOC_LITERAL(21, 269, 7), // "isEmpty"
QT_MOC_LITERAL(22, 277, 8), // "toQSizeF"
QT_MOC_LITERAL(23, 286, 16), // "sizeEncodeDecode"
QT_MOC_LITERAL(24, 303, 11), // "createPoint"
QT_MOC_LITERAL(25, 315, 19), // "pointGettersSetters"
QT_MOC_LITERAL(26, 335, 20), // "pointCopyConstructor"
QT_MOC_LITERAL(27, 356, 13), // "pointEquality"
QT_MOC_LITERAL(28, 370, 15), // "pointAssignment"
QT_MOC_LITERAL(29, 386, 14), // "pointOperators"
QT_MOC_LITERAL(30, 401, 6), // "isNull"
QT_MOC_LITERAL(31, 408, 9), // "toQPointF"
QT_MOC_LITERAL(32, 418, 17), // "pointEncodeDecode"
QT_MOC_LITERAL(33, 436, 15), // "converterCreate"
QT_MOC_LITERAL(34, 452, 13), // "converterCopy"
QT_MOC_LITERAL(35, 466, 23), // "converterGettersSetters"
QT_MOC_LITERAL(36, 490, 14), // "conversionToMM"
QT_MOC_LITERAL(37, 505, 14), // "conversionToCM"
QT_MOC_LITERAL(38, 520, 13), // "conversionToM"
QT_MOC_LITERAL(39, 534, 18), // "conversionToInches"
QT_MOC_LITERAL(40, 553, 16), // "conversionToFeet"
QT_MOC_LITERAL(41, 570, 18), // "conversionToPoints"
QT_MOC_LITERAL(42, 589, 17), // "conversionToPicas"
QT_MOC_LITERAL(43, 607, 20), // "conversionFromPixels"
QT_MOC_LITERAL(44, 628, 18), // "conversionToPixels"
QT_MOC_LITERAL(45, 647, 14), // "sizeConversion"
QT_MOC_LITERAL(46, 662, 15) // "pointConversion"

    },
    "TestQgsLayoutUnits\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0encodeDecode\0"
    "create\0gettersSetters\0copyConstructor\0"
    "equality\0assignment\0operators\0unitTypes\0"
    "measurementEncodeDecode\0createSize\0"
    "sizeGettersSetters\0sizeCopyConstructor\0"
    "sizeEquality\0sizeAssignment\0sizeOperators\0"
    "isEmpty\0toQSizeF\0sizeEncodeDecode\0"
    "createPoint\0pointGettersSetters\0"
    "pointCopyConstructor\0pointEquality\0"
    "pointAssignment\0pointOperators\0isNull\0"
    "toQPointF\0pointEncodeDecode\0converterCreate\0"
    "converterCopy\0converterGettersSetters\0"
    "conversionToMM\0conversionToCM\0"
    "conversionToM\0conversionToInches\0"
    "conversionToFeet\0conversionToPoints\0"
    "conversionToPicas\0conversionFromPixels\0"
    "conversionToPixels\0sizeConversion\0"
    "pointConversion"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestQgsLayoutUnits[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      45,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  239,    2, 0x08 /* Private */,
       3,    0,  240,    2, 0x08 /* Private */,
       4,    0,  241,    2, 0x08 /* Private */,
       5,    0,  242,    2, 0x08 /* Private */,
       6,    0,  243,    2, 0x08 /* Private */,
       7,    0,  244,    2, 0x08 /* Private */,
       8,    0,  245,    2, 0x08 /* Private */,
       9,    0,  246,    2, 0x08 /* Private */,
      10,    0,  247,    2, 0x08 /* Private */,
      11,    0,  248,    2, 0x08 /* Private */,
      12,    0,  249,    2, 0x08 /* Private */,
      13,    0,  250,    2, 0x08 /* Private */,
      14,    0,  251,    2, 0x08 /* Private */,
      15,    0,  252,    2, 0x08 /* Private */,
      16,    0,  253,    2, 0x08 /* Private */,
      17,    0,  254,    2, 0x08 /* Private */,
      18,    0,  255,    2, 0x08 /* Private */,
      19,    0,  256,    2, 0x08 /* Private */,
      20,    0,  257,    2, 0x08 /* Private */,
      21,    0,  258,    2, 0x08 /* Private */,
      22,    0,  259,    2, 0x08 /* Private */,
      23,    0,  260,    2, 0x08 /* Private */,
      24,    0,  261,    2, 0x08 /* Private */,
      25,    0,  262,    2, 0x08 /* Private */,
      26,    0,  263,    2, 0x08 /* Private */,
      27,    0,  264,    2, 0x08 /* Private */,
      28,    0,  265,    2, 0x08 /* Private */,
      29,    0,  266,    2, 0x08 /* Private */,
      30,    0,  267,    2, 0x08 /* Private */,
      31,    0,  268,    2, 0x08 /* Private */,
      32,    0,  269,    2, 0x08 /* Private */,
      33,    0,  270,    2, 0x08 /* Private */,
      34,    0,  271,    2, 0x08 /* Private */,
      35,    0,  272,    2, 0x08 /* Private */,
      36,    0,  273,    2, 0x08 /* Private */,
      37,    0,  274,    2, 0x08 /* Private */,
      38,    0,  275,    2, 0x08 /* Private */,
      39,    0,  276,    2, 0x08 /* Private */,
      40,    0,  277,    2, 0x08 /* Private */,
      41,    0,  278,    2, 0x08 /* Private */,
      42,    0,  279,    2, 0x08 /* Private */,
      43,    0,  280,    2, 0x08 /* Private */,
      44,    0,  281,    2, 0x08 /* Private */,
      45,    0,  282,    2, 0x08 /* Private */,
      46,    0,  283,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestQgsLayoutUnits::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestQgsLayoutUnits *_t = static_cast<TestQgsLayoutUnits *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->encodeDecode(); break;
        case 5: _t->create(); break;
        case 6: _t->gettersSetters(); break;
        case 7: _t->copyConstructor(); break;
        case 8: _t->equality(); break;
        case 9: _t->assignment(); break;
        case 10: _t->operators(); break;
        case 11: _t->unitTypes(); break;
        case 12: _t->measurementEncodeDecode(); break;
        case 13: _t->createSize(); break;
        case 14: _t->sizeGettersSetters(); break;
        case 15: _t->sizeCopyConstructor(); break;
        case 16: _t->sizeEquality(); break;
        case 17: _t->sizeAssignment(); break;
        case 18: _t->sizeOperators(); break;
        case 19: _t->isEmpty(); break;
        case 20: _t->toQSizeF(); break;
        case 21: _t->sizeEncodeDecode(); break;
        case 22: _t->createPoint(); break;
        case 23: _t->pointGettersSetters(); break;
        case 24: _t->pointCopyConstructor(); break;
        case 25: _t->pointEquality(); break;
        case 26: _t->pointAssignment(); break;
        case 27: _t->pointOperators(); break;
        case 28: _t->isNull(); break;
        case 29: _t->toQPointF(); break;
        case 30: _t->pointEncodeDecode(); break;
        case 31: _t->converterCreate(); break;
        case 32: _t->converterCopy(); break;
        case 33: _t->converterGettersSetters(); break;
        case 34: _t->conversionToMM(); break;
        case 35: _t->conversionToCM(); break;
        case 36: _t->conversionToM(); break;
        case 37: _t->conversionToInches(); break;
        case 38: _t->conversionToFeet(); break;
        case 39: _t->conversionToPoints(); break;
        case 40: _t->conversionToPicas(); break;
        case 41: _t->conversionFromPixels(); break;
        case 42: _t->conversionToPixels(); break;
        case 43: _t->sizeConversion(); break;
        case 44: _t->pointConversion(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestQgsLayoutUnits::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestQgsLayoutUnits.data,
      qt_meta_data_TestQgsLayoutUnits,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestQgsLayoutUnits::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQgsLayoutUnits::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestQgsLayoutUnits.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQgsLayoutUnits::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 45)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 45;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 45)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 45;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
